
stm32_alma_DMU331_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036ec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  080038bc  080038bc  000138bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a04  08003a04  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08003a04  08003a04  00013a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a0c  08003a0c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a0c  08003a0c  00013a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a10  08003a10  00013a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003a14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  2000005c  08003a70  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08003a70  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007a10  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018af  00000000  00000000  00027adf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006e8  00000000  00000000  00029390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000051a  00000000  00000000  00029a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022532  00000000  00000000  00029f92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009206  00000000  00000000  0004c4c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4d50  00000000  00000000  000556ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000020ac  00000000  00000000  0012a41c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0012c4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080038a4 	.word	0x080038a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	080038a4 	.word	0x080038a4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 fb7e 	bl	8000cb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f8ac 	bl	8000710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 f9c8 	bl	800094c <MX_GPIO_Init>
  MX_CAN1_Init();
 80005bc:	f000 f966 	bl	800088c <MX_CAN1_Init>
  MX_ADC1_Init();
 80005c0:	f000 f912 	bl	80007e8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
    // start can communication
  HAL_CAN_Start(&hcan1);
 80005c4:	484a      	ldr	r0, [pc, #296]	; (80006f0 <main+0x144>)
 80005c6:	f001 f833 	bl	8001630 <HAL_CAN_Start>

  /* Start the CAN peripheral */

  /* Activate CAN RX notification */
    // set transmit parameter
  amp1.TxHeader.DLC =8; // 8 bit =1byte
 80005ca:	4b4a      	ldr	r3, [pc, #296]	; (80006f4 <main+0x148>)
 80005cc:	2208      	movs	r2, #8
 80005ce:	611a      	str	r2, [r3, #16]
  amp1.TxHeader.IDE = CAN_ID_STD ;
 80005d0:	4b48      	ldr	r3, [pc, #288]	; (80006f4 <main+0x148>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  amp1.TxHeader.RTR = CAN_RTR_DATA;
 80005d6:	4b47      	ldr	r3, [pc, #284]	; (80006f4 <main+0x148>)
 80005d8:	2200      	movs	r2, #0
 80005da:	60da      	str	r2, [r3, #12]
  amp1.TxHeader.StdId = 0x0000;
 80005dc:	4b45      	ldr	r3, [pc, #276]	; (80006f4 <main+0x148>)
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]

  amp1.RxHeader.StdId=0x0000;
 80005e2:	4b44      	ldr	r3, [pc, #272]	; (80006f4 <main+0x148>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	619a      	str	r2, [r3, #24]
  amp1.RxHeader.DLC=8;
 80005e8:	4b42      	ldr	r3, [pc, #264]	; (80006f4 <main+0x148>)
 80005ea:	2208      	movs	r2, #8
 80005ec:	629a      	str	r2, [r3, #40]	; 0x28
  amp1.RxHeader.IDE=CAN_ID_STD;
 80005ee:	4b41      	ldr	r3, [pc, #260]	; (80006f4 <main+0x148>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	621a      	str	r2, [r3, #32]
  amp1.RxHeader.RTR=CAN_RTR_DATA;
 80005f4:	4b3f      	ldr	r3, [pc, #252]	; (80006f4 <main+0x148>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	625a      	str	r2, [r3, #36]	; 0x24

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80005fa:	2102      	movs	r1, #2
 80005fc:	483c      	ldr	r0, [pc, #240]	; (80006f0 <main+0x144>)
 80005fe:	f001 f96d 	bl	80018dc <HAL_CAN_ActivateNotification>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <main+0x60>
  {
    Error_Handler();
 8000608:	f000 f9ea 	bl	80009e0 <Error_Handler>
  }
  sFilterConfig.FilterBank = 0;
 800060c:	4b3a      	ldr	r3, [pc, #232]	; (80006f8 <main+0x14c>)
 800060e:	2200      	movs	r2, #0
 8000610:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000612:	4b39      	ldr	r3, [pc, #228]	; (80006f8 <main+0x14c>)
 8000614:	2200      	movs	r2, #0
 8000616:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000618:	4b37      	ldr	r3, [pc, #220]	; (80006f8 <main+0x14c>)
 800061a:	2201      	movs	r2, #1
 800061c:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 800061e:	4b36      	ldr	r3, [pc, #216]	; (80006f8 <main+0x14c>)
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000624:	4b34      	ldr	r3, [pc, #208]	; (80006f8 <main+0x14c>)
 8000626:	2200      	movs	r2, #0
 8000628:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh =0x0000; // 0xFFF0- 0x0150 dersek yine aynı şeyi yapar
 800062a:	4b33      	ldr	r3, [pc, #204]	; (80006f8 <main+0x14c>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000630:	4b31      	ldr	r3, [pc, #196]	; (80006f8 <main+0x14c>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000636:	4b30      	ldr	r3, [pc, #192]	; (80006f8 <main+0x14c>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation = ENABLE;
 800063c:	4b2e      	ldr	r3, [pc, #184]	; (80006f8 <main+0x14c>)
 800063e:	2201      	movs	r2, #1
 8000640:	621a      	str	r2, [r3, #32]
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000642:	2102      	movs	r1, #2
 8000644:	482a      	ldr	r0, [pc, #168]	; (80006f0 <main+0x144>)
 8000646:	f001 f949 	bl	80018dc <HAL_CAN_ActivateNotification>
  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800064a:	492b      	ldr	r1, [pc, #172]	; (80006f8 <main+0x14c>)
 800064c:	4828      	ldr	r0, [pc, #160]	; (80006f0 <main+0x144>)
 800064e:	f000 ff0f 	bl	8001470 <HAL_CAN_ConfigFilter>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <main+0xb0>
  {
    Error_Handler();
 8000658:	f000 f9c2 	bl	80009e0 <Error_Handler>
  }
  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 800065c:	4926      	ldr	r1, [pc, #152]	; (80006f8 <main+0x14c>)
 800065e:	4824      	ldr	r0, [pc, #144]	; (80006f0 <main+0x144>)
 8000660:	f000 ff06 	bl	8001470 <HAL_CAN_ConfigFilter>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0 , &amp1.RxHeader, &amp1.RxData);

      if(amp1.RxData[5] != 0xFF)
 8000664:	4b23      	ldr	r3, [pc, #140]	; (80006f4 <main+0x148>)
 8000666:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800066a:	2bff      	cmp	r3, #255	; 0xff
 800066c:	d021      	beq.n	80006b2 <main+0x106>
      {
  	    HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0 , &amp1.RxHeader, &amp1.RxData);
 800066e:	4b23      	ldr	r3, [pc, #140]	; (80006fc <main+0x150>)
 8000670:	4a23      	ldr	r2, [pc, #140]	; (8000700 <main+0x154>)
 8000672:	2100      	movs	r1, #0
 8000674:	481e      	ldr	r0, [pc, #120]	; (80006f0 <main+0x144>)
 8000676:	f001 f81f 	bl	80016b8 <HAL_CAN_GetRxMessage>
      sprintf(amp1_buff1, "%d", amp1.RxData[4]);// amp1.RxData[4] ve amp1.RxData[5] değerleri önce karakter dizilerine dönüştürülüyor (sprintf kullanılarak).
 800067a:	4b1e      	ldr	r3, [pc, #120]	; (80006f4 <main+0x148>)
 800067c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000680:	461a      	mov	r2, r3
 8000682:	4920      	ldr	r1, [pc, #128]	; (8000704 <main+0x158>)
 8000684:	4820      	ldr	r0, [pc, #128]	; (8000708 <main+0x15c>)
 8000686:	f002 fc69 	bl	8002f5c <siprintf>
      sprintf(amp1_buff2, "%d", amp1.RxData[5]);
 800068a:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <main+0x148>)
 800068c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000690:	461a      	mov	r2, r3
 8000692:	491c      	ldr	r1, [pc, #112]	; (8000704 <main+0x158>)
 8000694:	481d      	ldr	r0, [pc, #116]	; (800070c <main+0x160>)
 8000696:	f002 fc61 	bl	8002f5c <siprintf>
     	amp1.feedback_amp= atoi(amp1_buff2)*256 + atoi(amp1_buff1);  //atoi (ASCII to Integer), bir C kütüphane fonksiyonudur ve bir C string'ini (char dizisini) tamsayı (int) veri türüne dönüştürmek için kullanılır.
 800069a:	481c      	ldr	r0, [pc, #112]	; (800070c <main+0x160>)
 800069c:	f002 fbce 	bl	8002e3c <atoi>
 80006a0:	4819      	ldr	r0, [pc, #100]	; (8000708 <main+0x15c>)
 80006a2:	f002 fbcb 	bl	8002e3c <atoi>
 80006a6:	4603      	mov	r3, r0
 80006a8:	b2da      	uxtb	r2, r3
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <main+0x148>)
 80006ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80006b0:	e7d8      	b.n	8000664 <main+0xb8>
      }else{
      sprintf(amp1_buff1, "%d", amp1.RxData[4]);
 80006b2:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <main+0x148>)
 80006b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80006b8:	461a      	mov	r2, r3
 80006ba:	4912      	ldr	r1, [pc, #72]	; (8000704 <main+0x158>)
 80006bc:	4812      	ldr	r0, [pc, #72]	; (8000708 <main+0x15c>)
 80006be:	f002 fc4d 	bl	8002f5c <siprintf>
      sprintf(amp1_buff2, "%d", amp1.RxData[5]);
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <main+0x148>)
 80006c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80006c8:	461a      	mov	r2, r3
 80006ca:	490e      	ldr	r1, [pc, #56]	; (8000704 <main+0x158>)
 80006cc:	480f      	ldr	r0, [pc, #60]	; (800070c <main+0x160>)
 80006ce:	f002 fc45 	bl	8002f5c <siprintf>
      amp1.feedback_amp = 65536 - (atoi(amp1_buff2)*256 + atoi(amp1_buff1));
 80006d2:	480e      	ldr	r0, [pc, #56]	; (800070c <main+0x160>)
 80006d4:	f002 fbb2 	bl	8002e3c <atoi>
 80006d8:	480b      	ldr	r0, [pc, #44]	; (8000708 <main+0x15c>)
 80006da:	f002 fbaf 	bl	8002e3c <atoi>
 80006de:	4603      	mov	r3, r0
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	425b      	negs	r3, r3
 80006e4:	b2da      	uxtb	r2, r3
 80006e6:	4b03      	ldr	r3, [pc, #12]	; (80006f4 <main+0x148>)
 80006e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
      if(amp1.RxData[5] != 0xFF)
 80006ec:	e7ba      	b.n	8000664 <main+0xb8>
 80006ee:	bf00      	nop
 80006f0:	200000e8 	.word	0x200000e8
 80006f4:	20000120 	.word	0x20000120
 80006f8:	20000078 	.word	0x20000078
 80006fc:	20000160 	.word	0x20000160
 8000700:	20000138 	.word	0x20000138
 8000704:	080038bc 	.word	0x080038bc
 8000708:	20000110 	.word	0x20000110
 800070c:	20000118 	.word	0x20000118

08000710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b094      	sub	sp, #80	; 0x50
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	2234      	movs	r2, #52	; 0x34
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f002 fc3c 	bl	8002f9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	f107 0308 	add.w	r3, r7, #8
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000734:	2300      	movs	r3, #0
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	4b29      	ldr	r3, [pc, #164]	; (80007e0 <SystemClock_Config+0xd0>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073c:	4a28      	ldr	r2, [pc, #160]	; (80007e0 <SystemClock_Config+0xd0>)
 800073e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000742:	6413      	str	r3, [r2, #64]	; 0x40
 8000744:	4b26      	ldr	r3, [pc, #152]	; (80007e0 <SystemClock_Config+0xd0>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000750:	2300      	movs	r3, #0
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	4b23      	ldr	r3, [pc, #140]	; (80007e4 <SystemClock_Config+0xd4>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a22      	ldr	r2, [pc, #136]	; (80007e4 <SystemClock_Config+0xd4>)
 800075a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800075e:	6013      	str	r3, [r2, #0]
 8000760:	4b20      	ldr	r3, [pc, #128]	; (80007e4 <SystemClock_Config+0xd4>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800076c:	2301      	movs	r3, #1
 800076e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000770:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000774:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000776:	2302      	movs	r3, #2
 8000778:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800077a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800077e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000780:	2304      	movs	r3, #4
 8000782:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000784:	23a8      	movs	r3, #168	; 0xa8
 8000786:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000788:	2302      	movs	r3, #2
 800078a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800078c:	2302      	movs	r3, #2
 800078e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000790:	2302      	movs	r3, #2
 8000792:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000794:	f107 031c 	add.w	r3, r7, #28
 8000798:	4618      	mov	r0, r3
 800079a:	f002 f8b1 	bl	8002900 <HAL_RCC_OscConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007a4:	f000 f91c 	bl	80009e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a8:	230f      	movs	r3, #15
 80007aa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ac:	2302      	movs	r3, #2
 80007ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007be:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007c0:	f107 0308 	add.w	r3, r7, #8
 80007c4:	2105      	movs	r1, #5
 80007c6:	4618      	mov	r0, r3
 80007c8:	f001 fd84 	bl	80022d4 <HAL_RCC_ClockConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007d2:	f000 f905 	bl	80009e0 <Error_Handler>
  }
}
 80007d6:	bf00      	nop
 80007d8:	3750      	adds	r7, #80	; 0x50
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40007000 	.word	0x40007000

080007e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ee:	463b      	mov	r3, r7
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007fa:	4b21      	ldr	r3, [pc, #132]	; (8000880 <MX_ADC1_Init+0x98>)
 80007fc:	4a21      	ldr	r2, [pc, #132]	; (8000884 <MX_ADC1_Init+0x9c>)
 80007fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000800:	4b1f      	ldr	r3, [pc, #124]	; (8000880 <MX_ADC1_Init+0x98>)
 8000802:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000806:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000808:	4b1d      	ldr	r3, [pc, #116]	; (8000880 <MX_ADC1_Init+0x98>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800080e:	4b1c      	ldr	r3, [pc, #112]	; (8000880 <MX_ADC1_Init+0x98>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000814:	4b1a      	ldr	r3, [pc, #104]	; (8000880 <MX_ADC1_Init+0x98>)
 8000816:	2200      	movs	r2, #0
 8000818:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800081a:	4b19      	ldr	r3, [pc, #100]	; (8000880 <MX_ADC1_Init+0x98>)
 800081c:	2200      	movs	r2, #0
 800081e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000822:	4b17      	ldr	r3, [pc, #92]	; (8000880 <MX_ADC1_Init+0x98>)
 8000824:	2200      	movs	r2, #0
 8000826:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000828:	4b15      	ldr	r3, [pc, #84]	; (8000880 <MX_ADC1_Init+0x98>)
 800082a:	4a17      	ldr	r2, [pc, #92]	; (8000888 <MX_ADC1_Init+0xa0>)
 800082c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800082e:	4b14      	ldr	r3, [pc, #80]	; (8000880 <MX_ADC1_Init+0x98>)
 8000830:	2200      	movs	r2, #0
 8000832:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <MX_ADC1_Init+0x98>)
 8000836:	2201      	movs	r2, #1
 8000838:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_ADC1_Init+0x98>)
 800083c:	2200      	movs	r2, #0
 800083e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_ADC1_Init+0x98>)
 8000844:	2201      	movs	r2, #1
 8000846:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000848:	480d      	ldr	r0, [pc, #52]	; (8000880 <MX_ADC1_Init+0x98>)
 800084a:	f000 faa3 	bl	8000d94 <HAL_ADC_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000854:	f000 f8c4 	bl	80009e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000858:	2300      	movs	r3, #0
 800085a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800085c:	2301      	movs	r3, #1
 800085e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000860:	2300      	movs	r3, #0
 8000862:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000864:	463b      	mov	r3, r7
 8000866:	4619      	mov	r1, r3
 8000868:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_ADC1_Init+0x98>)
 800086a:	f000 fad7 	bl	8000e1c <HAL_ADC_ConfigChannel>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000874:	f000 f8b4 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	3710      	adds	r7, #16
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	200000a0 	.word	0x200000a0
 8000884:	40012000 	.word	0x40012000
 8000888:	0f000001 	.word	0x0f000001

0800088c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000890:	4b2b      	ldr	r3, [pc, #172]	; (8000940 <MX_CAN1_Init+0xb4>)
 8000892:	4a2c      	ldr	r2, [pc, #176]	; (8000944 <MX_CAN1_Init+0xb8>)
 8000894:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 8000896:	4b2a      	ldr	r3, [pc, #168]	; (8000940 <MX_CAN1_Init+0xb4>)
 8000898:	220c      	movs	r2, #12
 800089a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800089c:	4b28      	ldr	r3, [pc, #160]	; (8000940 <MX_CAN1_Init+0xb4>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008a2:	4b27      	ldr	r3, [pc, #156]	; (8000940 <MX_CAN1_Init+0xb4>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_CAN1_Init+0xb4>)
 80008aa:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80008ae:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80008b0:	4b23      	ldr	r3, [pc, #140]	; (8000940 <MX_CAN1_Init+0xb4>)
 80008b2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80008b6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80008b8:	4b21      	ldr	r3, [pc, #132]	; (8000940 <MX_CAN1_Init+0xb4>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80008be:	4b20      	ldr	r3, [pc, #128]	; (8000940 <MX_CAN1_Init+0xb4>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80008c4:	4b1e      	ldr	r3, [pc, #120]	; (8000940 <MX_CAN1_Init+0xb4>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80008ca:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <MX_CAN1_Init+0xb4>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80008d0:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <MX_CAN1_Init+0xb4>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80008d6:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <MX_CAN1_Init+0xb4>)
 80008d8:	2200      	movs	r2, #0
 80008da:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80008dc:	4818      	ldr	r0, [pc, #96]	; (8000940 <MX_CAN1_Init+0xb4>)
 80008de:	f000 fccb 	bl	8001278 <HAL_CAN_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80008e8:	f000 f87a 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  /* USER CODE BEGIN CAN1_Init 2 */
	sFilterConfig.FilterBank = 0;                            // value between 0 to 13 for JUST Master Mode (CAN1)
 80008ec:	4b16      	ldr	r3, [pc, #88]	; (8000948 <MX_CAN1_Init+0xbc>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;       // for filtering Identifiers
 80008f2:	4b15      	ldr	r3, [pc, #84]	; (8000948 <MX_CAN1_Init+0xbc>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;     // for Scaling filtering (if use EXTENDED CAN this must be 32BIT)
 80008f8:	4b13      	ldr	r3, [pc, #76]	; (8000948 <MX_CAN1_Init+0xbc>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh =0;         				  // First Identifier MSB value for receiving in IDLIST Mode for 32BIT Scaling
 80008fe:	4b12      	ldr	r3, [pc, #72]	; (8000948 <MX_CAN1_Init+0xbc>)
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0;                   	 // First Identifier LSB value for receiving in IDLIST Mode for 32BIT Scaling
 8000904:	4b10      	ldr	r3, [pc, #64]	; (8000948 <MX_CAN1_Init+0xbc>)
 8000906:	2200      	movs	r2, #0
 8000908:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0;                 // Second Identifier MSB value for receiving in IDLIST Mode for 32BIT Scaling
 800090a:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_CAN1_Init+0xbc>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0;                 // Second Identifier LSB value for receiving in IDLIST Mode for 32BIT Scaling
 8000910:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_CAN1_Init+0xbc>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;// specify FIFO0 or FIFO1
 8000916:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_CAN1_Init+0xbc>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;		 // Enable filtering
 800091c:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <MX_CAN1_Init+0xbc>)
 800091e:	2201      	movs	r2, #1
 8000920:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_CAN1_Init+0xbc>)
 8000924:	220e      	movs	r2, #14
 8000926:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000928:	4907      	ldr	r1, [pc, #28]	; (8000948 <MX_CAN1_Init+0xbc>)
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_CAN1_Init+0xb4>)
 800092c:	f000 fda0 	bl	8001470 <HAL_CAN_ConfigFilter>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_CAN1_Init+0xae>
	  {
	    Error_Handler();
 8000936:	f000 f853 	bl	80009e0 <Error_Handler>
	  }
  /* USER CODE END CAN1_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	200000e8 	.word	0x200000e8
 8000944:	40006400 	.word	0x40006400
 8000948:	20000078 	.word	0x20000078

0800094c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <MX_GPIO_Init+0x68>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a16      	ldr	r2, [pc, #88]	; (80009b4 <MX_GPIO_Init+0x68>)
 800095c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_GPIO_Init+0x68>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <MX_GPIO_Init+0x68>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a0f      	ldr	r2, [pc, #60]	; (80009b4 <MX_GPIO_Init+0x68>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <MX_GPIO_Init+0x68>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_GPIO_Init+0x68>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a08      	ldr	r2, [pc, #32]	; (80009b4 <MX_GPIO_Init+0x68>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_GPIO_Init+0x68>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009a6:	bf00      	nop
 80009a8:	3714      	adds	r7, #20
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800

080009b8 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0 , &amp1.RxHeader, &amp1.RxData) == HAL_OK)
 80009c0:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 80009c2:	4a05      	ldr	r2, [pc, #20]	; (80009d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 80009c4:	2100      	movs	r1, #0
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 80009c8:	f000 fe76 	bl	80016b8 <HAL_CAN_GetRxMessage>
  {
    // Handle received message
  }
}
 80009cc:	bf00      	nop
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000160 	.word	0x20000160
 80009d8:	20000138 	.word	0x20000138
 80009dc:	200000e8 	.word	0x200000e8

080009e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e4:	b672      	cpsid	i
}
 80009e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80009e8:	e7fe      	b.n	80009e8 <Error_Handler+0x8>
	...

080009ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <HAL_MspInit+0x4c>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fa:	4a0f      	ldr	r2, [pc, #60]	; (8000a38 <HAL_MspInit+0x4c>)
 80009fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a00:	6453      	str	r3, [r2, #68]	; 0x44
 8000a02:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	603b      	str	r3, [r7, #0]
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	4a08      	ldr	r2, [pc, #32]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a2a:	2007      	movs	r0, #7
 8000a2c:	f001 fa7c 	bl	8001f28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a30:	bf00      	nop
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40023800 	.word	0x40023800

08000a3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08a      	sub	sp, #40	; 0x28
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a17      	ldr	r2, [pc, #92]	; (8000ab8 <HAL_ADC_MspInit+0x7c>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d127      	bne.n	8000aae <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	4b16      	ldr	r3, [pc, #88]	; (8000abc <HAL_ADC_MspInit+0x80>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a66:	4a15      	ldr	r2, [pc, #84]	; (8000abc <HAL_ADC_MspInit+0x80>)
 8000a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6e:	4b13      	ldr	r3, [pc, #76]	; (8000abc <HAL_ADC_MspInit+0x80>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <HAL_ADC_MspInit+0x80>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a0e      	ldr	r2, [pc, #56]	; (8000abc <HAL_ADC_MspInit+0x80>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <HAL_ADC_MspInit+0x80>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a96:	2301      	movs	r3, #1
 8000a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <HAL_ADC_MspInit+0x84>)
 8000aaa:	f001 fa7f 	bl	8001fac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000aae:	bf00      	nop
 8000ab0:	3728      	adds	r7, #40	; 0x28
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40012000 	.word	0x40012000
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40020000 	.word	0x40020000

08000ac4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	; 0x28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a1d      	ldr	r2, [pc, #116]	; (8000b58 <HAL_CAN_MspInit+0x94>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d134      	bne.n	8000b50 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	4b1c      	ldr	r3, [pc, #112]	; (8000b5c <HAL_CAN_MspInit+0x98>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	4a1b      	ldr	r2, [pc, #108]	; (8000b5c <HAL_CAN_MspInit+0x98>)
 8000af0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000af4:	6413      	str	r3, [r2, #64]	; 0x40
 8000af6:	4b19      	ldr	r3, [pc, #100]	; (8000b5c <HAL_CAN_MspInit+0x98>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <HAL_CAN_MspInit+0x98>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a14      	ldr	r2, [pc, #80]	; (8000b5c <HAL_CAN_MspInit+0x98>)
 8000b0c:	f043 0302 	orr.w	r3, r3, #2
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <HAL_CAN_MspInit+0x98>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0302 	and.w	r3, r3, #2
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	2302      	movs	r3, #2
 8000b26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b30:	2309      	movs	r3, #9
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4809      	ldr	r0, [pc, #36]	; (8000b60 <HAL_CAN_MspInit+0x9c>)
 8000b3c:	f001 fa36 	bl	8001fac <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2100      	movs	r1, #0
 8000b44:	2014      	movs	r0, #20
 8000b46:	f001 f9fa 	bl	8001f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000b4a:	2014      	movs	r0, #20
 8000b4c:	f001 fa13 	bl	8001f76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000b50:	bf00      	nop
 8000b52:	3728      	adds	r7, #40	; 0x28
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40006400 	.word	0x40006400
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40020400 	.word	0x40020400

08000b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <NMI_Handler+0x4>

08000b6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <HardFault_Handler+0x4>

08000b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <MemManage_Handler+0x4>

08000b76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <BusFault_Handler+0x4>

08000b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <UsageFault_Handler+0x4>

08000b82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb0:	f000 f8d0 	bl	8000d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000bbc:	4802      	ldr	r0, [pc, #8]	; (8000bc8 <CAN1_RX0_IRQHandler+0x10>)
 8000bbe:	f000 feb3 	bl	8001928 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */


  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	200000e8 	.word	0x200000e8

08000bcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd4:	4a14      	ldr	r2, [pc, #80]	; (8000c28 <_sbrk+0x5c>)
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <_sbrk+0x60>)
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be0:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <_sbrk+0x64>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d102      	bne.n	8000bee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <_sbrk+0x64>)
 8000bea:	4a12      	ldr	r2, [pc, #72]	; (8000c34 <_sbrk+0x68>)
 8000bec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <_sbrk+0x64>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d207      	bcs.n	8000c0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bfc:	f002 f9d6 	bl	8002fac <__errno>
 8000c00:	4603      	mov	r3, r0
 8000c02:	220c      	movs	r2, #12
 8000c04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c06:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0a:	e009      	b.n	8000c20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <_sbrk+0x64>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c12:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <_sbrk+0x64>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	4a05      	ldr	r2, [pc, #20]	; (8000c30 <_sbrk+0x64>)
 8000c1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20020000 	.word	0x20020000
 8000c2c:	00000400 	.word	0x00000400
 8000c30:	2000016c 	.word	0x2000016c
 8000c34:	200002c0 	.word	0x200002c0

08000c38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <SystemInit+0x20>)
 8000c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c42:	4a05      	ldr	r2, [pc, #20]	; (8000c58 <SystemInit+0x20>)
 8000c44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c60:	480d      	ldr	r0, [pc, #52]	; (8000c98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c62:	490e      	ldr	r1, [pc, #56]	; (8000c9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c64:	4a0e      	ldr	r2, [pc, #56]	; (8000ca0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c68:	e002      	b.n	8000c70 <LoopCopyDataInit>

08000c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6e:	3304      	adds	r3, #4

08000c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c74:	d3f9      	bcc.n	8000c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c76:	4a0b      	ldr	r2, [pc, #44]	; (8000ca4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c78:	4c0b      	ldr	r4, [pc, #44]	; (8000ca8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c7c:	e001      	b.n	8000c82 <LoopFillZerobss>

08000c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c80:	3204      	adds	r2, #4

08000c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c84:	d3fb      	bcc.n	8000c7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c86:	f7ff ffd7 	bl	8000c38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c8a:	f002 f995 	bl	8002fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c8e:	f7ff fc8d 	bl	80005ac <main>
  bx  lr    
 8000c92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c9c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ca0:	08003a14 	.word	0x08003a14
  ldr r2, =_sbss
 8000ca4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000ca8:	200002bc 	.word	0x200002bc

08000cac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cac:	e7fe      	b.n	8000cac <ADC_IRQHandler>
	...

08000cb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cb4:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <HAL_Init+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0d      	ldr	r2, [pc, #52]	; (8000cf0 <HAL_Init+0x40>)
 8000cba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <HAL_Init+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <HAL_Init+0x40>)
 8000cc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ccc:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <HAL_Init+0x40>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a07      	ldr	r2, [pc, #28]	; (8000cf0 <HAL_Init+0x40>)
 8000cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd8:	2003      	movs	r0, #3
 8000cda:	f001 f925 	bl	8001f28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f000 f808 	bl	8000cf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce4:	f7ff fe82 	bl	80009ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40023c00 	.word	0x40023c00

08000cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <HAL_InitTick+0x54>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <HAL_InitTick+0x58>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	4619      	mov	r1, r3
 8000d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d12:	4618      	mov	r0, r3
 8000d14:	f001 f93d 	bl	8001f92 <HAL_SYSTICK_Config>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e00e      	b.n	8000d40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2b0f      	cmp	r3, #15
 8000d26:	d80a      	bhi.n	8000d3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d30:	f001 f905 	bl	8001f3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d34:	4a06      	ldr	r2, [pc, #24]	; (8000d50 <HAL_InitTick+0x5c>)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	e000      	b.n	8000d40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000000 	.word	0x20000000
 8000d4c:	20000008 	.word	0x20000008
 8000d50:	20000004 	.word	0x20000004

08000d54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <HAL_IncTick+0x20>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_IncTick+0x24>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4413      	add	r3, r2
 8000d64:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <HAL_IncTick+0x24>)
 8000d66:	6013      	str	r3, [r2, #0]
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	20000008 	.word	0x20000008
 8000d78:	20000170 	.word	0x20000170

08000d7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <HAL_GetTick+0x14>)
 8000d82:	681b      	ldr	r3, [r3, #0]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	20000170 	.word	0x20000170

08000d94 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d101      	bne.n	8000daa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e033      	b.n	8000e12 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d109      	bne.n	8000dc6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff fe42 	bl	8000a3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	f003 0310 	and.w	r3, r3, #16
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d118      	bne.n	8000e04 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000dda:	f023 0302 	bic.w	r3, r3, #2
 8000dde:	f043 0202 	orr.w	r2, r3, #2
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f000 f94a 	bl	8001080 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2200      	movs	r2, #0
 8000df0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	f023 0303 	bic.w	r3, r3, #3
 8000dfa:	f043 0201 	orr.w	r2, r3, #1
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	641a      	str	r2, [r3, #64]	; 0x40
 8000e02:	e001      	b.n	8000e08 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e04:	2301      	movs	r3, #1
 8000e06:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000e26:	2300      	movs	r3, #0
 8000e28:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d101      	bne.n	8000e38 <HAL_ADC_ConfigChannel+0x1c>
 8000e34:	2302      	movs	r3, #2
 8000e36:	e113      	b.n	8001060 <HAL_ADC_ConfigChannel+0x244>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b09      	cmp	r3, #9
 8000e46:	d925      	bls.n	8000e94 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	68d9      	ldr	r1, [r3, #12]
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	461a      	mov	r2, r3
 8000e56:	4613      	mov	r3, r2
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	4413      	add	r3, r2
 8000e5c:	3b1e      	subs	r3, #30
 8000e5e:	2207      	movs	r2, #7
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43da      	mvns	r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	400a      	ands	r2, r1
 8000e6c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	68d9      	ldr	r1, [r3, #12]
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	689a      	ldr	r2, [r3, #8]
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	4603      	mov	r3, r0
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	4403      	add	r3, r0
 8000e86:	3b1e      	subs	r3, #30
 8000e88:	409a      	lsls	r2, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	e022      	b.n	8000eda <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	6919      	ldr	r1, [r3, #16]
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	4413      	add	r3, r2
 8000ea8:	2207      	movs	r2, #7
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43da      	mvns	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	400a      	ands	r2, r1
 8000eb6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	6919      	ldr	r1, [r3, #16]
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	689a      	ldr	r2, [r3, #8]
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	4618      	mov	r0, r3
 8000eca:	4603      	mov	r3, r0
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	4403      	add	r3, r0
 8000ed0:	409a      	lsls	r2, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	2b06      	cmp	r3, #6
 8000ee0:	d824      	bhi.n	8000f2c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685a      	ldr	r2, [r3, #4]
 8000eec:	4613      	mov	r3, r2
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	4413      	add	r3, r2
 8000ef2:	3b05      	subs	r3, #5
 8000ef4:	221f      	movs	r2, #31
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43da      	mvns	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	400a      	ands	r2, r1
 8000f02:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	4618      	mov	r0, r3
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685a      	ldr	r2, [r3, #4]
 8000f16:	4613      	mov	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	4413      	add	r3, r2
 8000f1c:	3b05      	subs	r3, #5
 8000f1e:	fa00 f203 	lsl.w	r2, r0, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	430a      	orrs	r2, r1
 8000f28:	635a      	str	r2, [r3, #52]	; 0x34
 8000f2a:	e04c      	b.n	8000fc6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	2b0c      	cmp	r3, #12
 8000f32:	d824      	bhi.n	8000f7e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685a      	ldr	r2, [r3, #4]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	4413      	add	r3, r2
 8000f44:	3b23      	subs	r3, #35	; 0x23
 8000f46:	221f      	movs	r2, #31
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43da      	mvns	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	400a      	ands	r2, r1
 8000f54:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	4618      	mov	r0, r3
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685a      	ldr	r2, [r3, #4]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	3b23      	subs	r3, #35	; 0x23
 8000f70:	fa00 f203 	lsl.w	r2, r0, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	631a      	str	r2, [r3, #48]	; 0x30
 8000f7c:	e023      	b.n	8000fc6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685a      	ldr	r2, [r3, #4]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	4413      	add	r3, r2
 8000f8e:	3b41      	subs	r3, #65	; 0x41
 8000f90:	221f      	movs	r2, #31
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43da      	mvns	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	400a      	ands	r2, r1
 8000f9e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	4618      	mov	r0, r3
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685a      	ldr	r2, [r3, #4]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	3b41      	subs	r3, #65	; 0x41
 8000fba:	fa00 f203 	lsl.w	r2, r0, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000fc6:	4b29      	ldr	r3, [pc, #164]	; (800106c <HAL_ADC_ConfigChannel+0x250>)
 8000fc8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a28      	ldr	r2, [pc, #160]	; (8001070 <HAL_ADC_ConfigChannel+0x254>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d10f      	bne.n	8000ff4 <HAL_ADC_ConfigChannel+0x1d8>
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b12      	cmp	r3, #18
 8000fda:	d10b      	bne.n	8000ff4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a1d      	ldr	r2, [pc, #116]	; (8001070 <HAL_ADC_ConfigChannel+0x254>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d12b      	bne.n	8001056 <HAL_ADC_ConfigChannel+0x23a>
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a1c      	ldr	r2, [pc, #112]	; (8001074 <HAL_ADC_ConfigChannel+0x258>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d003      	beq.n	8001010 <HAL_ADC_ConfigChannel+0x1f4>
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b11      	cmp	r3, #17
 800100e:	d122      	bne.n	8001056 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a11      	ldr	r2, [pc, #68]	; (8001074 <HAL_ADC_ConfigChannel+0x258>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d111      	bne.n	8001056 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001032:	4b11      	ldr	r3, [pc, #68]	; (8001078 <HAL_ADC_ConfigChannel+0x25c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a11      	ldr	r2, [pc, #68]	; (800107c <HAL_ADC_ConfigChannel+0x260>)
 8001038:	fba2 2303 	umull	r2, r3, r2, r3
 800103c:	0c9a      	lsrs	r2, r3, #18
 800103e:	4613      	mov	r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4413      	add	r3, r2
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001048:	e002      	b.n	8001050 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	3b01      	subs	r3, #1
 800104e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d1f9      	bne.n	800104a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800105e:	2300      	movs	r3, #0
}
 8001060:	4618      	mov	r0, r3
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	40012300 	.word	0x40012300
 8001070:	40012000 	.word	0x40012000
 8001074:	10000012 	.word	0x10000012
 8001078:	20000000 	.word	0x20000000
 800107c:	431bde83 	.word	0x431bde83

08001080 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001088:	4b79      	ldr	r3, [pc, #484]	; (8001270 <ADC_Init+0x1f0>)
 800108a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	685a      	ldr	r2, [r3, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	431a      	orrs	r2, r3
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	685a      	ldr	r2, [r3, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	6859      	ldr	r1, [r3, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	691b      	ldr	r3, [r3, #16]
 80010c0:	021a      	lsls	r2, r3, #8
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	430a      	orrs	r2, r1
 80010c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	685a      	ldr	r2, [r3, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80010d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	6859      	ldr	r1, [r3, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689a      	ldr	r2, [r3, #8]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	430a      	orrs	r2, r1
 80010ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	689a      	ldr	r2, [r3, #8]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6899      	ldr	r1, [r3, #8]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	68da      	ldr	r2, [r3, #12]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	430a      	orrs	r2, r1
 800110c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001112:	4a58      	ldr	r2, [pc, #352]	; (8001274 <ADC_Init+0x1f4>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d022      	beq.n	800115e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001126:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6899      	ldr	r1, [r3, #8]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	430a      	orrs	r2, r1
 8001138:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001148:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	6899      	ldr	r1, [r3, #8]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	430a      	orrs	r2, r1
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	e00f      	b.n	800117e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	689a      	ldr	r2, [r3, #8]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800116c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	689a      	ldr	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800117c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f022 0202 	bic.w	r2, r2, #2
 800118c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	6899      	ldr	r1, [r3, #8]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	7e1b      	ldrb	r3, [r3, #24]
 8001198:	005a      	lsls	r2, r3, #1
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	430a      	orrs	r2, r1
 80011a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d01b      	beq.n	80011e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	685a      	ldr	r2, [r3, #4]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80011ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80011ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	6859      	ldr	r1, [r3, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d6:	3b01      	subs	r3, #1
 80011d8:	035a      	lsls	r2, r3, #13
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	430a      	orrs	r2, r1
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	e007      	b.n	80011f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	685a      	ldr	r2, [r3, #4]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001202:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	3b01      	subs	r3, #1
 8001210:	051a      	lsls	r2, r3, #20
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	430a      	orrs	r2, r1
 8001218:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	689a      	ldr	r2, [r3, #8]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001228:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	6899      	ldr	r1, [r3, #8]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001236:	025a      	lsls	r2, r3, #9
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	430a      	orrs	r2, r1
 800123e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800124e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6899      	ldr	r1, [r3, #8]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	029a      	lsls	r2, r3, #10
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	430a      	orrs	r2, r1
 8001262:	609a      	str	r2, [r3, #8]
}
 8001264:	bf00      	nop
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	40012300 	.word	0x40012300
 8001274:	0f000001 	.word	0x0f000001

08001278 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d101      	bne.n	800128a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e0ed      	b.n	8001466 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001290:	b2db      	uxtb	r3, r3
 8001292:	2b00      	cmp	r3, #0
 8001294:	d102      	bne.n	800129c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff fc14 	bl	8000ac4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f042 0201 	orr.w	r2, r2, #1
 80012aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012ac:	f7ff fd66 	bl	8000d7c <HAL_GetTick>
 80012b0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012b2:	e012      	b.n	80012da <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012b4:	f7ff fd62 	bl	8000d7c <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b0a      	cmp	r3, #10
 80012c0:	d90b      	bls.n	80012da <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2205      	movs	r2, #5
 80012d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e0c5      	b.n	8001466 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d0e5      	beq.n	80012b4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f022 0202 	bic.w	r2, r2, #2
 80012f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012f8:	f7ff fd40 	bl	8000d7c <HAL_GetTick>
 80012fc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012fe:	e012      	b.n	8001326 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001300:	f7ff fd3c 	bl	8000d7c <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b0a      	cmp	r3, #10
 800130c:	d90b      	bls.n	8001326 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001312:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2205      	movs	r2, #5
 800131e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e09f      	b.n	8001466 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d1e5      	bne.n	8001300 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	7e1b      	ldrb	r3, [r3, #24]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d108      	bne.n	800134e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	e007      	b.n	800135e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800135c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	7e5b      	ldrb	r3, [r3, #25]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d108      	bne.n	8001378 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	e007      	b.n	8001388 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001386:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	7e9b      	ldrb	r3, [r3, #26]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d108      	bne.n	80013a2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f042 0220 	orr.w	r2, r2, #32
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	e007      	b.n	80013b2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f022 0220 	bic.w	r2, r2, #32
 80013b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	7edb      	ldrb	r3, [r3, #27]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d108      	bne.n	80013cc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f022 0210 	bic.w	r2, r2, #16
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	e007      	b.n	80013dc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f042 0210 	orr.w	r2, r2, #16
 80013da:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	7f1b      	ldrb	r3, [r3, #28]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d108      	bne.n	80013f6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f042 0208 	orr.w	r2, r2, #8
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	e007      	b.n	8001406 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f022 0208 	bic.w	r2, r2, #8
 8001404:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	7f5b      	ldrb	r3, [r3, #29]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d108      	bne.n	8001420 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f042 0204 	orr.w	r2, r2, #4
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	e007      	b.n	8001430 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f022 0204 	bic.w	r2, r2, #4
 800142e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689a      	ldr	r2, [r3, #8]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	431a      	orrs	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	431a      	orrs	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	695b      	ldr	r3, [r3, #20]
 8001444:	ea42 0103 	orr.w	r1, r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	1e5a      	subs	r2, r3, #1
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2201      	movs	r2, #1
 8001460:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001470:	b480      	push	{r7}
 8001472:	b087      	sub	sp, #28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001486:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001488:	7cfb      	ldrb	r3, [r7, #19]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d003      	beq.n	8001496 <HAL_CAN_ConfigFilter+0x26>
 800148e:	7cfb      	ldrb	r3, [r7, #19]
 8001490:	2b02      	cmp	r3, #2
 8001492:	f040 80be 	bne.w	8001612 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001496:	4b65      	ldr	r3, [pc, #404]	; (800162c <HAL_CAN_ConfigFilter+0x1bc>)
 8001498:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014a0:	f043 0201 	orr.w	r2, r3, #1
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014b0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c4:	021b      	lsls	r3, r3, #8
 80014c6:	431a      	orrs	r2, r3
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	f003 031f 	and.w	r3, r3, #31
 80014d6:	2201      	movs	r2, #1
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	43db      	mvns	r3, r3
 80014e8:	401a      	ands	r2, r3
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	69db      	ldr	r3, [r3, #28]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d123      	bne.n	8001540 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	43db      	mvns	r3, r3
 8001502:	401a      	ands	r2, r3
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001516:	683a      	ldr	r2, [r7, #0]
 8001518:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800151a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	3248      	adds	r2, #72	; 0x48
 8001520:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001534:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001536:	6979      	ldr	r1, [r7, #20]
 8001538:	3348      	adds	r3, #72	; 0x48
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	440b      	add	r3, r1
 800153e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	69db      	ldr	r3, [r3, #28]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d122      	bne.n	800158e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	431a      	orrs	r2, r3
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001568:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	3248      	adds	r2, #72	; 0x48
 800156e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001582:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001584:	6979      	ldr	r1, [r7, #20]
 8001586:	3348      	adds	r3, #72	; 0x48
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	440b      	add	r3, r1
 800158c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d109      	bne.n	80015aa <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	43db      	mvns	r3, r3
 80015a0:	401a      	ands	r2, r3
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80015a8:	e007      	b.n	80015ba <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	431a      	orrs	r2, r3
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d109      	bne.n	80015d6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	43db      	mvns	r3, r3
 80015cc:	401a      	ands	r2, r3
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80015d4:	e007      	b.n	80015e6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	431a      	orrs	r2, r3
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	6a1b      	ldr	r3, [r3, #32]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d107      	bne.n	80015fe <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	431a      	orrs	r2, r3
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001604:	f023 0201 	bic.w	r2, r3, #1
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800160e:	2300      	movs	r3, #0
 8001610:	e006      	b.n	8001620 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001616:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
  }
}
 8001620:	4618      	mov	r0, r3
 8001622:	371c      	adds	r7, #28
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	40006400 	.word	0x40006400

08001630 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2b01      	cmp	r3, #1
 8001642:	d12e      	bne.n	80016a2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2202      	movs	r2, #2
 8001648:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f022 0201 	bic.w	r2, r2, #1
 800165a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800165c:	f7ff fb8e 	bl	8000d7c <HAL_GetTick>
 8001660:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001662:	e012      	b.n	800168a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001664:	f7ff fb8a 	bl	8000d7c <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b0a      	cmp	r3, #10
 8001670:	d90b      	bls.n	800168a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001676:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2205      	movs	r2, #5
 8001682:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e012      	b.n	80016b0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1e5      	bne.n	8001664 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800169e:	2300      	movs	r3, #0
 80016a0:	e006      	b.n	80016b0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
  }
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80016b8:	b480      	push	{r7}
 80016ba:	b087      	sub	sp, #28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
 80016c4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016cc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80016ce:	7dfb      	ldrb	r3, [r7, #23]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d003      	beq.n	80016dc <HAL_CAN_GetRxMessage+0x24>
 80016d4:	7dfb      	ldrb	r3, [r7, #23]
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	f040 80f3 	bne.w	80018c2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d10e      	bne.n	8001700 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	f003 0303 	and.w	r3, r3, #3
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d116      	bne.n	800171e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e0e7      	b.n	80018d0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	f003 0303 	and.w	r3, r3, #3
 800170a:	2b00      	cmp	r3, #0
 800170c:	d107      	bne.n	800171e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001712:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e0d8      	b.n	80018d0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	331b      	adds	r3, #27
 8001726:	011b      	lsls	r3, r3, #4
 8001728:	4413      	add	r3, r2
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0204 	and.w	r2, r3, #4
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d10c      	bne.n	8001756 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	331b      	adds	r3, #27
 8001744:	011b      	lsls	r3, r3, #4
 8001746:	4413      	add	r3, r2
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	0d5b      	lsrs	r3, r3, #21
 800174c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	e00b      	b.n	800176e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	331b      	adds	r3, #27
 800175e:	011b      	lsls	r3, r3, #4
 8001760:	4413      	add	r3, r2
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	08db      	lsrs	r3, r3, #3
 8001766:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	331b      	adds	r3, #27
 8001776:	011b      	lsls	r3, r3, #4
 8001778:	4413      	add	r3, r2
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0202 	and.w	r2, r3, #2
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	331b      	adds	r3, #27
 800178c:	011b      	lsls	r3, r3, #4
 800178e:	4413      	add	r3, r2
 8001790:	3304      	adds	r3, #4
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 020f 	and.w	r2, r3, #15
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	331b      	adds	r3, #27
 80017a4:	011b      	lsls	r3, r3, #4
 80017a6:	4413      	add	r3, r2
 80017a8:	3304      	adds	r3, #4
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	0a1b      	lsrs	r3, r3, #8
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	331b      	adds	r3, #27
 80017bc:	011b      	lsls	r3, r3, #4
 80017be:	4413      	add	r3, r2
 80017c0:	3304      	adds	r3, #4
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	0c1b      	lsrs	r3, r3, #16
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	011b      	lsls	r3, r3, #4
 80017d4:	4413      	add	r3, r2
 80017d6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	011b      	lsls	r3, r3, #4
 80017ea:	4413      	add	r3, r2
 80017ec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	0a1a      	lsrs	r2, r3, #8
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	3301      	adds	r3, #1
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	011b      	lsls	r3, r3, #4
 8001804:	4413      	add	r3, r2
 8001806:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	0c1a      	lsrs	r2, r3, #16
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	3302      	adds	r3, #2
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	011b      	lsls	r3, r3, #4
 800181e:	4413      	add	r3, r2
 8001820:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	0e1a      	lsrs	r2, r3, #24
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	3303      	adds	r3, #3
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	011b      	lsls	r3, r3, #4
 8001838:	4413      	add	r3, r2
 800183a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	3304      	adds	r3, #4
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	011b      	lsls	r3, r3, #4
 8001850:	4413      	add	r3, r2
 8001852:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	0a1a      	lsrs	r2, r3, #8
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	3305      	adds	r3, #5
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	011b      	lsls	r3, r3, #4
 800186a:	4413      	add	r3, r2
 800186c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	0c1a      	lsrs	r2, r3, #16
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	3306      	adds	r3, #6
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	011b      	lsls	r3, r3, #4
 8001884:	4413      	add	r3, r2
 8001886:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	0e1a      	lsrs	r2, r3, #24
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	3307      	adds	r3, #7
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d108      	bne.n	80018ae <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68da      	ldr	r2, [r3, #12]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f042 0220 	orr.w	r2, r2, #32
 80018aa:	60da      	str	r2, [r3, #12]
 80018ac:	e007      	b.n	80018be <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	691a      	ldr	r2, [r3, #16]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f042 0220 	orr.w	r2, r2, #32
 80018bc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80018be:	2300      	movs	r3, #0
 80018c0:	e006      	b.n	80018d0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
  }
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	371c      	adds	r7, #28
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018ec:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d002      	beq.n	80018fa <HAL_CAN_ActivateNotification+0x1e>
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d109      	bne.n	800190e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6959      	ldr	r1, [r3, #20]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	430a      	orrs	r2, r1
 8001908:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800190a:	2300      	movs	r3, #0
 800190c:	e006      	b.n	800191c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001912:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
  }
}
 800191c:	4618      	mov	r0, r3
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08a      	sub	sp, #40	; 0x28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001930:	2300      	movs	r3, #0
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001964:	6a3b      	ldr	r3, [r7, #32]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b00      	cmp	r3, #0
 800196c:	d07c      	beq.n	8001a68 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b00      	cmp	r3, #0
 8001976:	d023      	beq.n	80019c0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2201      	movs	r2, #1
 800197e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 f983 	bl	8001c96 <HAL_CAN_TxMailbox0CompleteCallback>
 8001990:	e016      	b.n	80019c0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	2b00      	cmp	r3, #0
 800199a:	d004      	beq.n	80019a6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
 80019a4:	e00c      	b.n	80019c0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	f003 0308 	and.w	r3, r3, #8
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d004      	beq.n	80019ba <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
 80019b8:	e002      	b.n	80019c0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 f989 	bl	8001cd2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d024      	beq.n	8001a14 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019d2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 f963 	bl	8001caa <HAL_CAN_TxMailbox1CompleteCallback>
 80019e4:	e016      	b.n	8001a14 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d004      	beq.n	80019fa <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
 80019f8:	e00c      	b.n	8001a14 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d004      	beq.n	8001a0e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a0c:	e002      	b.n	8001a14 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 f969 	bl	8001ce6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d024      	beq.n	8001a68 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a26:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 f943 	bl	8001cbe <HAL_CAN_TxMailbox2CompleteCallback>
 8001a38:	e016      	b.n	8001a68 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d004      	beq.n	8001a4e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a4c:	e00c      	b.n	8001a68 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d004      	beq.n	8001a62 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a60:	e002      	b.n	8001a68 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 f949 	bl	8001cfa <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001a68:	6a3b      	ldr	r3, [r7, #32]
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00c      	beq.n	8001a8c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	f003 0310 	and.w	r3, r3, #16
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d007      	beq.n	8001a8c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2210      	movs	r2, #16
 8001a8a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001a8c:	6a3b      	ldr	r3, [r7, #32]
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d00b      	beq.n	8001aae <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	f003 0308 	and.w	r3, r3, #8
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d006      	beq.n	8001aae <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2208      	movs	r2, #8
 8001aa6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 f930 	bl	8001d0e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001aae:	6a3b      	ldr	r3, [r7, #32]
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d009      	beq.n	8001acc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	f003 0303 	and.w	r3, r3, #3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d002      	beq.n	8001acc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7fe ff76 	bl	80009b8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001acc:	6a3b      	ldr	r3, [r7, #32]
 8001ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00c      	beq.n	8001af0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	f003 0310 	and.w	r3, r3, #16
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d007      	beq.n	8001af0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ae6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2210      	movs	r2, #16
 8001aee:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001af0:	6a3b      	ldr	r3, [r7, #32]
 8001af2:	f003 0320 	and.w	r3, r3, #32
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d00b      	beq.n	8001b12 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	f003 0308 	and.w	r3, r3, #8
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d006      	beq.n	8001b12 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2208      	movs	r2, #8
 8001b0a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 f912 	bl	8001d36 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001b12:	6a3b      	ldr	r3, [r7, #32]
 8001b14:	f003 0310 	and.w	r3, r3, #16
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d009      	beq.n	8001b30 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d002      	beq.n	8001b30 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 f8f9 	bl	8001d22 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001b30:	6a3b      	ldr	r3, [r7, #32]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00b      	beq.n	8001b52 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	f003 0310 	and.w	r3, r3, #16
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d006      	beq.n	8001b52 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2210      	movs	r2, #16
 8001b4a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 f8fc 	bl	8001d4a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b52:	6a3b      	ldr	r3, [r7, #32]
 8001b54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d00b      	beq.n	8001b74 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f003 0308 	and.w	r3, r3, #8
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d006      	beq.n	8001b74 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2208      	movs	r2, #8
 8001b6c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f8f5 	bl	8001d5e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d07b      	beq.n	8001c76 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d072      	beq.n	8001c6e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b88:	6a3b      	ldr	r3, [r7, #32]
 8001b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d008      	beq.n	8001ba4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d003      	beq.n	8001ba4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ba4:	6a3b      	ldr	r3, [r7, #32]
 8001ba6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d008      	beq.n	8001bc0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bba:	f043 0302 	orr.w	r3, r3, #2
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001bc0:	6a3b      	ldr	r3, [r7, #32]
 8001bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d008      	beq.n	8001bdc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	f043 0304 	orr.w	r3, r3, #4
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001bdc:	6a3b      	ldr	r3, [r7, #32]
 8001bde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d043      	beq.n	8001c6e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d03e      	beq.n	8001c6e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bf6:	2b60      	cmp	r3, #96	; 0x60
 8001bf8:	d02b      	beq.n	8001c52 <HAL_CAN_IRQHandler+0x32a>
 8001bfa:	2b60      	cmp	r3, #96	; 0x60
 8001bfc:	d82e      	bhi.n	8001c5c <HAL_CAN_IRQHandler+0x334>
 8001bfe:	2b50      	cmp	r3, #80	; 0x50
 8001c00:	d022      	beq.n	8001c48 <HAL_CAN_IRQHandler+0x320>
 8001c02:	2b50      	cmp	r3, #80	; 0x50
 8001c04:	d82a      	bhi.n	8001c5c <HAL_CAN_IRQHandler+0x334>
 8001c06:	2b40      	cmp	r3, #64	; 0x40
 8001c08:	d019      	beq.n	8001c3e <HAL_CAN_IRQHandler+0x316>
 8001c0a:	2b40      	cmp	r3, #64	; 0x40
 8001c0c:	d826      	bhi.n	8001c5c <HAL_CAN_IRQHandler+0x334>
 8001c0e:	2b30      	cmp	r3, #48	; 0x30
 8001c10:	d010      	beq.n	8001c34 <HAL_CAN_IRQHandler+0x30c>
 8001c12:	2b30      	cmp	r3, #48	; 0x30
 8001c14:	d822      	bhi.n	8001c5c <HAL_CAN_IRQHandler+0x334>
 8001c16:	2b10      	cmp	r3, #16
 8001c18:	d002      	beq.n	8001c20 <HAL_CAN_IRQHandler+0x2f8>
 8001c1a:	2b20      	cmp	r3, #32
 8001c1c:	d005      	beq.n	8001c2a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001c1e:	e01d      	b.n	8001c5c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	f043 0308 	orr.w	r3, r3, #8
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c28:	e019      	b.n	8001c5e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	f043 0310 	orr.w	r3, r3, #16
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c32:	e014      	b.n	8001c5e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	f043 0320 	orr.w	r3, r3, #32
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c3c:	e00f      	b.n	8001c5e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c46:	e00a      	b.n	8001c5e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c50:	e005      	b.n	8001c5e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c5a:	e000      	b.n	8001c5e <HAL_CAN_IRQHandler+0x336>
            break;
 8001c5c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	699a      	ldr	r2, [r3, #24]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c6c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2204      	movs	r2, #4
 8001c74:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d008      	beq.n	8001c8e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 f872 	bl	8001d72 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001c8e:	bf00      	nop
 8001c90:	3728      	adds	r7, #40	; 0x28
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
	...

08001d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d98:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <__NVIC_SetPriorityGrouping+0x44>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d9e:	68ba      	ldr	r2, [r7, #8]
 8001da0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001da4:	4013      	ands	r3, r2
 8001da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001db0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dba:	4a04      	ldr	r2, [pc, #16]	; (8001dcc <__NVIC_SetPriorityGrouping+0x44>)
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	60d3      	str	r3, [r2, #12]
}
 8001dc0:	bf00      	nop
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd4:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <__NVIC_GetPriorityGrouping+0x18>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	0a1b      	lsrs	r3, r3, #8
 8001dda:	f003 0307 	and.w	r3, r3, #7
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	db0b      	blt.n	8001e16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	f003 021f 	and.w	r2, r3, #31
 8001e04:	4907      	ldr	r1, [pc, #28]	; (8001e24 <__NVIC_EnableIRQ+0x38>)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	095b      	lsrs	r3, r3, #5
 8001e0c:	2001      	movs	r0, #1
 8001e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	e000e100 	.word	0xe000e100

08001e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	6039      	str	r1, [r7, #0]
 8001e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	db0a      	blt.n	8001e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	490c      	ldr	r1, [pc, #48]	; (8001e74 <__NVIC_SetPriority+0x4c>)
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	0112      	lsls	r2, r2, #4
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	440b      	add	r3, r1
 8001e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e50:	e00a      	b.n	8001e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	4908      	ldr	r1, [pc, #32]	; (8001e78 <__NVIC_SetPriority+0x50>)
 8001e58:	79fb      	ldrb	r3, [r7, #7]
 8001e5a:	f003 030f 	and.w	r3, r3, #15
 8001e5e:	3b04      	subs	r3, #4
 8001e60:	0112      	lsls	r2, r2, #4
 8001e62:	b2d2      	uxtb	r2, r2
 8001e64:	440b      	add	r3, r1
 8001e66:	761a      	strb	r2, [r3, #24]
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	e000e100 	.word	0xe000e100
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b089      	sub	sp, #36	; 0x24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	f1c3 0307 	rsb	r3, r3, #7
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	bf28      	it	cs
 8001e9a:	2304      	movcs	r3, #4
 8001e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	2b06      	cmp	r3, #6
 8001ea4:	d902      	bls.n	8001eac <NVIC_EncodePriority+0x30>
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	3b03      	subs	r3, #3
 8001eaa:	e000      	b.n	8001eae <NVIC_EncodePriority+0x32>
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43da      	mvns	r2, r3
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	401a      	ands	r2, r3
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ece:	43d9      	mvns	r1, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed4:	4313      	orrs	r3, r2
         );
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3724      	adds	r7, #36	; 0x24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
	...

08001ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ef4:	d301      	bcc.n	8001efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e00f      	b.n	8001f1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001efa:	4a0a      	ldr	r2, [pc, #40]	; (8001f24 <SysTick_Config+0x40>)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f02:	210f      	movs	r1, #15
 8001f04:	f04f 30ff 	mov.w	r0, #4294967295
 8001f08:	f7ff ff8e 	bl	8001e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f0c:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <SysTick_Config+0x40>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f12:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <SysTick_Config+0x40>)
 8001f14:	2207      	movs	r2, #7
 8001f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	e000e010 	.word	0xe000e010

08001f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7ff ff29 	bl	8001d88 <__NVIC_SetPriorityGrouping>
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b086      	sub	sp, #24
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	4603      	mov	r3, r0
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	607a      	str	r2, [r7, #4]
 8001f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f50:	f7ff ff3e 	bl	8001dd0 <__NVIC_GetPriorityGrouping>
 8001f54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	68b9      	ldr	r1, [r7, #8]
 8001f5a:	6978      	ldr	r0, [r7, #20]
 8001f5c:	f7ff ff8e 	bl	8001e7c <NVIC_EncodePriority>
 8001f60:	4602      	mov	r2, r0
 8001f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f66:	4611      	mov	r1, r2
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff ff5d 	bl	8001e28 <__NVIC_SetPriority>
}
 8001f6e:	bf00      	nop
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff ff31 	bl	8001dec <__NVIC_EnableIRQ>
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b082      	sub	sp, #8
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7ff ffa2 	bl	8001ee4 <SysTick_Config>
 8001fa0:	4603      	mov	r3, r0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
	...

08001fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b089      	sub	sp, #36	; 0x24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61fb      	str	r3, [r7, #28]
 8001fc6:	e165      	b.n	8002294 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fc8:	2201      	movs	r2, #1
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	f040 8154 	bne.w	800228e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d005      	beq.n	8001ffe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d130      	bne.n	8002060 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	2203      	movs	r2, #3
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43db      	mvns	r3, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4013      	ands	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	68da      	ldr	r2, [r3, #12]
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4313      	orrs	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002034:	2201      	movs	r2, #1
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4013      	ands	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	091b      	lsrs	r3, r3, #4
 800204a:	f003 0201 	and.w	r2, r3, #1
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4313      	orrs	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 0303 	and.w	r3, r3, #3
 8002068:	2b03      	cmp	r3, #3
 800206a:	d017      	beq.n	800209c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	2203      	movs	r2, #3
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4313      	orrs	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 0303 	and.w	r3, r3, #3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d123      	bne.n	80020f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	08da      	lsrs	r2, r3, #3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3208      	adds	r2, #8
 80020b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	220f      	movs	r2, #15
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	691a      	ldr	r2, [r3, #16]
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	08da      	lsrs	r2, r3, #3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3208      	adds	r2, #8
 80020ea:	69b9      	ldr	r1, [r7, #24]
 80020ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	2203      	movs	r2, #3
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 0203 	and.w	r2, r3, #3
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4313      	orrs	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 80ae 	beq.w	800228e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	4b5d      	ldr	r3, [pc, #372]	; (80022ac <HAL_GPIO_Init+0x300>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	4a5c      	ldr	r2, [pc, #368]	; (80022ac <HAL_GPIO_Init+0x300>)
 800213c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002140:	6453      	str	r3, [r2, #68]	; 0x44
 8002142:	4b5a      	ldr	r3, [pc, #360]	; (80022ac <HAL_GPIO_Init+0x300>)
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800214e:	4a58      	ldr	r2, [pc, #352]	; (80022b0 <HAL_GPIO_Init+0x304>)
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	089b      	lsrs	r3, r3, #2
 8002154:	3302      	adds	r3, #2
 8002156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800215a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	220f      	movs	r2, #15
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43db      	mvns	r3, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4013      	ands	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a4f      	ldr	r2, [pc, #316]	; (80022b4 <HAL_GPIO_Init+0x308>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d025      	beq.n	80021c6 <HAL_GPIO_Init+0x21a>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a4e      	ldr	r2, [pc, #312]	; (80022b8 <HAL_GPIO_Init+0x30c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d01f      	beq.n	80021c2 <HAL_GPIO_Init+0x216>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a4d      	ldr	r2, [pc, #308]	; (80022bc <HAL_GPIO_Init+0x310>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d019      	beq.n	80021be <HAL_GPIO_Init+0x212>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a4c      	ldr	r2, [pc, #304]	; (80022c0 <HAL_GPIO_Init+0x314>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d013      	beq.n	80021ba <HAL_GPIO_Init+0x20e>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a4b      	ldr	r2, [pc, #300]	; (80022c4 <HAL_GPIO_Init+0x318>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d00d      	beq.n	80021b6 <HAL_GPIO_Init+0x20a>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a4a      	ldr	r2, [pc, #296]	; (80022c8 <HAL_GPIO_Init+0x31c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d007      	beq.n	80021b2 <HAL_GPIO_Init+0x206>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a49      	ldr	r2, [pc, #292]	; (80022cc <HAL_GPIO_Init+0x320>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d101      	bne.n	80021ae <HAL_GPIO_Init+0x202>
 80021aa:	2306      	movs	r3, #6
 80021ac:	e00c      	b.n	80021c8 <HAL_GPIO_Init+0x21c>
 80021ae:	2307      	movs	r3, #7
 80021b0:	e00a      	b.n	80021c8 <HAL_GPIO_Init+0x21c>
 80021b2:	2305      	movs	r3, #5
 80021b4:	e008      	b.n	80021c8 <HAL_GPIO_Init+0x21c>
 80021b6:	2304      	movs	r3, #4
 80021b8:	e006      	b.n	80021c8 <HAL_GPIO_Init+0x21c>
 80021ba:	2303      	movs	r3, #3
 80021bc:	e004      	b.n	80021c8 <HAL_GPIO_Init+0x21c>
 80021be:	2302      	movs	r3, #2
 80021c0:	e002      	b.n	80021c8 <HAL_GPIO_Init+0x21c>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <HAL_GPIO_Init+0x21c>
 80021c6:	2300      	movs	r3, #0
 80021c8:	69fa      	ldr	r2, [r7, #28]
 80021ca:	f002 0203 	and.w	r2, r2, #3
 80021ce:	0092      	lsls	r2, r2, #2
 80021d0:	4093      	lsls	r3, r2
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021d8:	4935      	ldr	r1, [pc, #212]	; (80022b0 <HAL_GPIO_Init+0x304>)
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	089b      	lsrs	r3, r3, #2
 80021de:	3302      	adds	r3, #2
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021e6:	4b3a      	ldr	r3, [pc, #232]	; (80022d0 <HAL_GPIO_Init+0x324>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800220a:	4a31      	ldr	r2, [pc, #196]	; (80022d0 <HAL_GPIO_Init+0x324>)
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002210:	4b2f      	ldr	r3, [pc, #188]	; (80022d0 <HAL_GPIO_Init+0x324>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002234:	4a26      	ldr	r2, [pc, #152]	; (80022d0 <HAL_GPIO_Init+0x324>)
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800223a:	4b25      	ldr	r3, [pc, #148]	; (80022d0 <HAL_GPIO_Init+0x324>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800225e:	4a1c      	ldr	r2, [pc, #112]	; (80022d0 <HAL_GPIO_Init+0x324>)
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002264:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <HAL_GPIO_Init+0x324>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002288:	4a11      	ldr	r2, [pc, #68]	; (80022d0 <HAL_GPIO_Init+0x324>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3301      	adds	r3, #1
 8002292:	61fb      	str	r3, [r7, #28]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	2b0f      	cmp	r3, #15
 8002298:	f67f ae96 	bls.w	8001fc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800229c:	bf00      	nop
 800229e:	bf00      	nop
 80022a0:	3724      	adds	r7, #36	; 0x24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40023800 	.word	0x40023800
 80022b0:	40013800 	.word	0x40013800
 80022b4:	40020000 	.word	0x40020000
 80022b8:	40020400 	.word	0x40020400
 80022bc:	40020800 	.word	0x40020800
 80022c0:	40020c00 	.word	0x40020c00
 80022c4:	40021000 	.word	0x40021000
 80022c8:	40021400 	.word	0x40021400
 80022cc:	40021800 	.word	0x40021800
 80022d0:	40013c00 	.word	0x40013c00

080022d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e0cc      	b.n	8002482 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022e8:	4b68      	ldr	r3, [pc, #416]	; (800248c <HAL_RCC_ClockConfig+0x1b8>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 030f 	and.w	r3, r3, #15
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d90c      	bls.n	8002310 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f6:	4b65      	ldr	r3, [pc, #404]	; (800248c <HAL_RCC_ClockConfig+0x1b8>)
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fe:	4b63      	ldr	r3, [pc, #396]	; (800248c <HAL_RCC_ClockConfig+0x1b8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	429a      	cmp	r2, r3
 800230a:	d001      	beq.n	8002310 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e0b8      	b.n	8002482 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d020      	beq.n	800235e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b00      	cmp	r3, #0
 8002326:	d005      	beq.n	8002334 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002328:	4b59      	ldr	r3, [pc, #356]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	4a58      	ldr	r2, [pc, #352]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002332:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002340:	4b53      	ldr	r3, [pc, #332]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	4a52      	ldr	r2, [pc, #328]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800234a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800234c:	4b50      	ldr	r3, [pc, #320]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	494d      	ldr	r1, [pc, #308]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	4313      	orrs	r3, r2
 800235c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d044      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d107      	bne.n	8002382 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002372:	4b47      	ldr	r3, [pc, #284]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d119      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e07f      	b.n	8002482 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b02      	cmp	r3, #2
 8002388:	d003      	beq.n	8002392 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800238e:	2b03      	cmp	r3, #3
 8002390:	d107      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002392:	4b3f      	ldr	r3, [pc, #252]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d109      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e06f      	b.n	8002482 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a2:	4b3b      	ldr	r3, [pc, #236]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e067      	b.n	8002482 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023b2:	4b37      	ldr	r3, [pc, #220]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f023 0203 	bic.w	r2, r3, #3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	4934      	ldr	r1, [pc, #208]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023c4:	f7fe fcda 	bl	8000d7c <HAL_GetTick>
 80023c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ca:	e00a      	b.n	80023e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023cc:	f7fe fcd6 	bl	8000d7c <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023da:	4293      	cmp	r3, r2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e04f      	b.n	8002482 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e2:	4b2b      	ldr	r3, [pc, #172]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 020c 	and.w	r2, r3, #12
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d1eb      	bne.n	80023cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023f4:	4b25      	ldr	r3, [pc, #148]	; (800248c <HAL_RCC_ClockConfig+0x1b8>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 030f 	and.w	r3, r3, #15
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d20c      	bcs.n	800241c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002402:	4b22      	ldr	r3, [pc, #136]	; (800248c <HAL_RCC_ClockConfig+0x1b8>)
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800240a:	4b20      	ldr	r3, [pc, #128]	; (800248c <HAL_RCC_ClockConfig+0x1b8>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	429a      	cmp	r2, r3
 8002416:	d001      	beq.n	800241c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e032      	b.n	8002482 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b00      	cmp	r3, #0
 8002426:	d008      	beq.n	800243a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002428:	4b19      	ldr	r3, [pc, #100]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	4916      	ldr	r1, [pc, #88]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002436:	4313      	orrs	r3, r2
 8002438:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	2b00      	cmp	r3, #0
 8002444:	d009      	beq.n	800245a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002446:	4b12      	ldr	r3, [pc, #72]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	490e      	ldr	r1, [pc, #56]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	4313      	orrs	r3, r2
 8002458:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800245a:	f000 f821 	bl	80024a0 <HAL_RCC_GetSysClockFreq>
 800245e:	4602      	mov	r2, r0
 8002460:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	091b      	lsrs	r3, r3, #4
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	490a      	ldr	r1, [pc, #40]	; (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 800246c:	5ccb      	ldrb	r3, [r1, r3]
 800246e:	fa22 f303 	lsr.w	r3, r2, r3
 8002472:	4a09      	ldr	r2, [pc, #36]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 8002474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002476:	4b09      	ldr	r3, [pc, #36]	; (800249c <HAL_RCC_ClockConfig+0x1c8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f7fe fc3a 	bl	8000cf4 <HAL_InitTick>

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40023c00 	.word	0x40023c00
 8002490:	40023800 	.word	0x40023800
 8002494:	080038c0 	.word	0x080038c0
 8002498:	20000000 	.word	0x20000000
 800249c:	20000004 	.word	0x20000004

080024a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024a4:	b0ae      	sub	sp, #184	; 0xb8
 80024a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024c6:	4bcb      	ldr	r3, [pc, #812]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x354>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 030c 	and.w	r3, r3, #12
 80024ce:	2b0c      	cmp	r3, #12
 80024d0:	f200 8206 	bhi.w	80028e0 <HAL_RCC_GetSysClockFreq+0x440>
 80024d4:	a201      	add	r2, pc, #4	; (adr r2, 80024dc <HAL_RCC_GetSysClockFreq+0x3c>)
 80024d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024da:	bf00      	nop
 80024dc:	08002511 	.word	0x08002511
 80024e0:	080028e1 	.word	0x080028e1
 80024e4:	080028e1 	.word	0x080028e1
 80024e8:	080028e1 	.word	0x080028e1
 80024ec:	08002519 	.word	0x08002519
 80024f0:	080028e1 	.word	0x080028e1
 80024f4:	080028e1 	.word	0x080028e1
 80024f8:	080028e1 	.word	0x080028e1
 80024fc:	08002521 	.word	0x08002521
 8002500:	080028e1 	.word	0x080028e1
 8002504:	080028e1 	.word	0x080028e1
 8002508:	080028e1 	.word	0x080028e1
 800250c:	08002711 	.word	0x08002711
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002510:	4bb9      	ldr	r3, [pc, #740]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002512:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002516:	e1e7      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002518:	4bb8      	ldr	r3, [pc, #736]	; (80027fc <HAL_RCC_GetSysClockFreq+0x35c>)
 800251a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800251e:	e1e3      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002520:	4bb4      	ldr	r3, [pc, #720]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002528:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800252c:	4bb1      	ldr	r3, [pc, #708]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d071      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002538:	4bae      	ldr	r3, [pc, #696]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	099b      	lsrs	r3, r3, #6
 800253e:	2200      	movs	r2, #0
 8002540:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002544:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002548:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800254c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002550:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002554:	2300      	movs	r3, #0
 8002556:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800255a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800255e:	4622      	mov	r2, r4
 8002560:	462b      	mov	r3, r5
 8002562:	f04f 0000 	mov.w	r0, #0
 8002566:	f04f 0100 	mov.w	r1, #0
 800256a:	0159      	lsls	r1, r3, #5
 800256c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002570:	0150      	lsls	r0, r2, #5
 8002572:	4602      	mov	r2, r0
 8002574:	460b      	mov	r3, r1
 8002576:	4621      	mov	r1, r4
 8002578:	1a51      	subs	r1, r2, r1
 800257a:	6439      	str	r1, [r7, #64]	; 0x40
 800257c:	4629      	mov	r1, r5
 800257e:	eb63 0301 	sbc.w	r3, r3, r1
 8002582:	647b      	str	r3, [r7, #68]	; 0x44
 8002584:	f04f 0200 	mov.w	r2, #0
 8002588:	f04f 0300 	mov.w	r3, #0
 800258c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002590:	4649      	mov	r1, r9
 8002592:	018b      	lsls	r3, r1, #6
 8002594:	4641      	mov	r1, r8
 8002596:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800259a:	4641      	mov	r1, r8
 800259c:	018a      	lsls	r2, r1, #6
 800259e:	4641      	mov	r1, r8
 80025a0:	1a51      	subs	r1, r2, r1
 80025a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80025a4:	4649      	mov	r1, r9
 80025a6:	eb63 0301 	sbc.w	r3, r3, r1
 80025aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025ac:	f04f 0200 	mov.w	r2, #0
 80025b0:	f04f 0300 	mov.w	r3, #0
 80025b4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80025b8:	4649      	mov	r1, r9
 80025ba:	00cb      	lsls	r3, r1, #3
 80025bc:	4641      	mov	r1, r8
 80025be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025c2:	4641      	mov	r1, r8
 80025c4:	00ca      	lsls	r2, r1, #3
 80025c6:	4610      	mov	r0, r2
 80025c8:	4619      	mov	r1, r3
 80025ca:	4603      	mov	r3, r0
 80025cc:	4622      	mov	r2, r4
 80025ce:	189b      	adds	r3, r3, r2
 80025d0:	633b      	str	r3, [r7, #48]	; 0x30
 80025d2:	462b      	mov	r3, r5
 80025d4:	460a      	mov	r2, r1
 80025d6:	eb42 0303 	adc.w	r3, r2, r3
 80025da:	637b      	str	r3, [r7, #52]	; 0x34
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	f04f 0300 	mov.w	r3, #0
 80025e4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80025e8:	4629      	mov	r1, r5
 80025ea:	024b      	lsls	r3, r1, #9
 80025ec:	4621      	mov	r1, r4
 80025ee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025f2:	4621      	mov	r1, r4
 80025f4:	024a      	lsls	r2, r1, #9
 80025f6:	4610      	mov	r0, r2
 80025f8:	4619      	mov	r1, r3
 80025fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025fe:	2200      	movs	r2, #0
 8002600:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002604:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002608:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800260c:	f7fd fe50 	bl	80002b0 <__aeabi_uldivmod>
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	4613      	mov	r3, r2
 8002616:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800261a:	e067      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800261c:	4b75      	ldr	r3, [pc, #468]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	099b      	lsrs	r3, r3, #6
 8002622:	2200      	movs	r2, #0
 8002624:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002628:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800262c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002634:	67bb      	str	r3, [r7, #120]	; 0x78
 8002636:	2300      	movs	r3, #0
 8002638:	67fb      	str	r3, [r7, #124]	; 0x7c
 800263a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800263e:	4622      	mov	r2, r4
 8002640:	462b      	mov	r3, r5
 8002642:	f04f 0000 	mov.w	r0, #0
 8002646:	f04f 0100 	mov.w	r1, #0
 800264a:	0159      	lsls	r1, r3, #5
 800264c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002650:	0150      	lsls	r0, r2, #5
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4621      	mov	r1, r4
 8002658:	1a51      	subs	r1, r2, r1
 800265a:	62b9      	str	r1, [r7, #40]	; 0x28
 800265c:	4629      	mov	r1, r5
 800265e:	eb63 0301 	sbc.w	r3, r3, r1
 8002662:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002664:	f04f 0200 	mov.w	r2, #0
 8002668:	f04f 0300 	mov.w	r3, #0
 800266c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002670:	4649      	mov	r1, r9
 8002672:	018b      	lsls	r3, r1, #6
 8002674:	4641      	mov	r1, r8
 8002676:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800267a:	4641      	mov	r1, r8
 800267c:	018a      	lsls	r2, r1, #6
 800267e:	4641      	mov	r1, r8
 8002680:	ebb2 0a01 	subs.w	sl, r2, r1
 8002684:	4649      	mov	r1, r9
 8002686:	eb63 0b01 	sbc.w	fp, r3, r1
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	f04f 0300 	mov.w	r3, #0
 8002692:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002696:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800269a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800269e:	4692      	mov	sl, r2
 80026a0:	469b      	mov	fp, r3
 80026a2:	4623      	mov	r3, r4
 80026a4:	eb1a 0303 	adds.w	r3, sl, r3
 80026a8:	623b      	str	r3, [r7, #32]
 80026aa:	462b      	mov	r3, r5
 80026ac:	eb4b 0303 	adc.w	r3, fp, r3
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	f04f 0300 	mov.w	r3, #0
 80026ba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80026be:	4629      	mov	r1, r5
 80026c0:	028b      	lsls	r3, r1, #10
 80026c2:	4621      	mov	r1, r4
 80026c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026c8:	4621      	mov	r1, r4
 80026ca:	028a      	lsls	r2, r1, #10
 80026cc:	4610      	mov	r0, r2
 80026ce:	4619      	mov	r1, r3
 80026d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026d4:	2200      	movs	r2, #0
 80026d6:	673b      	str	r3, [r7, #112]	; 0x70
 80026d8:	677a      	str	r2, [r7, #116]	; 0x74
 80026da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80026de:	f7fd fde7 	bl	80002b0 <__aeabi_uldivmod>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	4613      	mov	r3, r2
 80026e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026ec:	4b41      	ldr	r3, [pc, #260]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x354>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	0c1b      	lsrs	r3, r3, #16
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	3301      	adds	r3, #1
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80026fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002702:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002706:	fbb2 f3f3 	udiv	r3, r2, r3
 800270a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800270e:	e0eb      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002710:	4b38      	ldr	r3, [pc, #224]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002718:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800271c:	4b35      	ldr	r3, [pc, #212]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d06b      	beq.n	8002800 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002728:	4b32      	ldr	r3, [pc, #200]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	099b      	lsrs	r3, r3, #6
 800272e:	2200      	movs	r2, #0
 8002730:	66bb      	str	r3, [r7, #104]	; 0x68
 8002732:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002734:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800273a:	663b      	str	r3, [r7, #96]	; 0x60
 800273c:	2300      	movs	r3, #0
 800273e:	667b      	str	r3, [r7, #100]	; 0x64
 8002740:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002744:	4622      	mov	r2, r4
 8002746:	462b      	mov	r3, r5
 8002748:	f04f 0000 	mov.w	r0, #0
 800274c:	f04f 0100 	mov.w	r1, #0
 8002750:	0159      	lsls	r1, r3, #5
 8002752:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002756:	0150      	lsls	r0, r2, #5
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4621      	mov	r1, r4
 800275e:	1a51      	subs	r1, r2, r1
 8002760:	61b9      	str	r1, [r7, #24]
 8002762:	4629      	mov	r1, r5
 8002764:	eb63 0301 	sbc.w	r3, r3, r1
 8002768:	61fb      	str	r3, [r7, #28]
 800276a:	f04f 0200 	mov.w	r2, #0
 800276e:	f04f 0300 	mov.w	r3, #0
 8002772:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002776:	4659      	mov	r1, fp
 8002778:	018b      	lsls	r3, r1, #6
 800277a:	4651      	mov	r1, sl
 800277c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002780:	4651      	mov	r1, sl
 8002782:	018a      	lsls	r2, r1, #6
 8002784:	4651      	mov	r1, sl
 8002786:	ebb2 0801 	subs.w	r8, r2, r1
 800278a:	4659      	mov	r1, fp
 800278c:	eb63 0901 	sbc.w	r9, r3, r1
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	f04f 0300 	mov.w	r3, #0
 8002798:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800279c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027a4:	4690      	mov	r8, r2
 80027a6:	4699      	mov	r9, r3
 80027a8:	4623      	mov	r3, r4
 80027aa:	eb18 0303 	adds.w	r3, r8, r3
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	462b      	mov	r3, r5
 80027b2:	eb49 0303 	adc.w	r3, r9, r3
 80027b6:	617b      	str	r3, [r7, #20]
 80027b8:	f04f 0200 	mov.w	r2, #0
 80027bc:	f04f 0300 	mov.w	r3, #0
 80027c0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80027c4:	4629      	mov	r1, r5
 80027c6:	024b      	lsls	r3, r1, #9
 80027c8:	4621      	mov	r1, r4
 80027ca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027ce:	4621      	mov	r1, r4
 80027d0:	024a      	lsls	r2, r1, #9
 80027d2:	4610      	mov	r0, r2
 80027d4:	4619      	mov	r1, r3
 80027d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027da:	2200      	movs	r2, #0
 80027dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80027de:	65fa      	str	r2, [r7, #92]	; 0x5c
 80027e0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80027e4:	f7fd fd64 	bl	80002b0 <__aeabi_uldivmod>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	4613      	mov	r3, r2
 80027ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027f2:	e065      	b.n	80028c0 <HAL_RCC_GetSysClockFreq+0x420>
 80027f4:	40023800 	.word	0x40023800
 80027f8:	00f42400 	.word	0x00f42400
 80027fc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002800:	4b3d      	ldr	r3, [pc, #244]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	099b      	lsrs	r3, r3, #6
 8002806:	2200      	movs	r2, #0
 8002808:	4618      	mov	r0, r3
 800280a:	4611      	mov	r1, r2
 800280c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002810:	653b      	str	r3, [r7, #80]	; 0x50
 8002812:	2300      	movs	r3, #0
 8002814:	657b      	str	r3, [r7, #84]	; 0x54
 8002816:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800281a:	4642      	mov	r2, r8
 800281c:	464b      	mov	r3, r9
 800281e:	f04f 0000 	mov.w	r0, #0
 8002822:	f04f 0100 	mov.w	r1, #0
 8002826:	0159      	lsls	r1, r3, #5
 8002828:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800282c:	0150      	lsls	r0, r2, #5
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	4641      	mov	r1, r8
 8002834:	1a51      	subs	r1, r2, r1
 8002836:	60b9      	str	r1, [r7, #8]
 8002838:	4649      	mov	r1, r9
 800283a:	eb63 0301 	sbc.w	r3, r3, r1
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	f04f 0200 	mov.w	r2, #0
 8002844:	f04f 0300 	mov.w	r3, #0
 8002848:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800284c:	4659      	mov	r1, fp
 800284e:	018b      	lsls	r3, r1, #6
 8002850:	4651      	mov	r1, sl
 8002852:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002856:	4651      	mov	r1, sl
 8002858:	018a      	lsls	r2, r1, #6
 800285a:	4651      	mov	r1, sl
 800285c:	1a54      	subs	r4, r2, r1
 800285e:	4659      	mov	r1, fp
 8002860:	eb63 0501 	sbc.w	r5, r3, r1
 8002864:	f04f 0200 	mov.w	r2, #0
 8002868:	f04f 0300 	mov.w	r3, #0
 800286c:	00eb      	lsls	r3, r5, #3
 800286e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002872:	00e2      	lsls	r2, r4, #3
 8002874:	4614      	mov	r4, r2
 8002876:	461d      	mov	r5, r3
 8002878:	4643      	mov	r3, r8
 800287a:	18e3      	adds	r3, r4, r3
 800287c:	603b      	str	r3, [r7, #0]
 800287e:	464b      	mov	r3, r9
 8002880:	eb45 0303 	adc.w	r3, r5, r3
 8002884:	607b      	str	r3, [r7, #4]
 8002886:	f04f 0200 	mov.w	r2, #0
 800288a:	f04f 0300 	mov.w	r3, #0
 800288e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002892:	4629      	mov	r1, r5
 8002894:	028b      	lsls	r3, r1, #10
 8002896:	4621      	mov	r1, r4
 8002898:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800289c:	4621      	mov	r1, r4
 800289e:	028a      	lsls	r2, r1, #10
 80028a0:	4610      	mov	r0, r2
 80028a2:	4619      	mov	r1, r3
 80028a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028a8:	2200      	movs	r2, #0
 80028aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80028ac:	64fa      	str	r2, [r7, #76]	; 0x4c
 80028ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80028b2:	f7fd fcfd 	bl	80002b0 <__aeabi_uldivmod>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	4613      	mov	r3, r2
 80028bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80028c0:	4b0d      	ldr	r3, [pc, #52]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x458>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	0f1b      	lsrs	r3, r3, #28
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80028ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80028d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80028d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80028de:	e003      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028e0:	4b06      	ldr	r3, [pc, #24]	; (80028fc <HAL_RCC_GetSysClockFreq+0x45c>)
 80028e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80028e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	37b8      	adds	r7, #184	; 0xb8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028f6:	bf00      	nop
 80028f8:	40023800 	.word	0x40023800
 80028fc:	00f42400 	.word	0x00f42400

08002900 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e28d      	b.n	8002e2e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b00      	cmp	r3, #0
 800291c:	f000 8083 	beq.w	8002a26 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002920:	4b94      	ldr	r3, [pc, #592]	; (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 030c 	and.w	r3, r3, #12
 8002928:	2b04      	cmp	r3, #4
 800292a:	d019      	beq.n	8002960 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800292c:	4b91      	ldr	r3, [pc, #580]	; (8002b74 <HAL_RCC_OscConfig+0x274>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002934:	2b08      	cmp	r3, #8
 8002936:	d106      	bne.n	8002946 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002938:	4b8e      	ldr	r3, [pc, #568]	; (8002b74 <HAL_RCC_OscConfig+0x274>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002940:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002944:	d00c      	beq.n	8002960 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002946:	4b8b      	ldr	r3, [pc, #556]	; (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800294e:	2b0c      	cmp	r3, #12
 8002950:	d112      	bne.n	8002978 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002952:	4b88      	ldr	r3, [pc, #544]	; (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800295a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800295e:	d10b      	bne.n	8002978 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002960:	4b84      	ldr	r3, [pc, #528]	; (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d05b      	beq.n	8002a24 <HAL_RCC_OscConfig+0x124>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d157      	bne.n	8002a24 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e25a      	b.n	8002e2e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002980:	d106      	bne.n	8002990 <HAL_RCC_OscConfig+0x90>
 8002982:	4b7c      	ldr	r3, [pc, #496]	; (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a7b      	ldr	r2, [pc, #492]	; (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	e01d      	b.n	80029cc <HAL_RCC_OscConfig+0xcc>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002998:	d10c      	bne.n	80029b4 <HAL_RCC_OscConfig+0xb4>
 800299a:	4b76      	ldr	r3, [pc, #472]	; (8002b74 <HAL_RCC_OscConfig+0x274>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a75      	ldr	r2, [pc, #468]	; (8002b74 <HAL_RCC_OscConfig+0x274>)
 80029a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	4b73      	ldr	r3, [pc, #460]	; (8002b74 <HAL_RCC_OscConfig+0x274>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a72      	ldr	r2, [pc, #456]	; (8002b74 <HAL_RCC_OscConfig+0x274>)
 80029ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	e00b      	b.n	80029cc <HAL_RCC_OscConfig+0xcc>
 80029b4:	4b6f      	ldr	r3, [pc, #444]	; (8002b74 <HAL_RCC_OscConfig+0x274>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a6e      	ldr	r2, [pc, #440]	; (8002b74 <HAL_RCC_OscConfig+0x274>)
 80029ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029be:	6013      	str	r3, [r2, #0]
 80029c0:	4b6c      	ldr	r3, [pc, #432]	; (8002b74 <HAL_RCC_OscConfig+0x274>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a6b      	ldr	r2, [pc, #428]	; (8002b74 <HAL_RCC_OscConfig+0x274>)
 80029c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d013      	beq.n	80029fc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d4:	f7fe f9d2 	bl	8000d7c <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029dc:	f7fe f9ce 	bl	8000d7c <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b64      	cmp	r3, #100	; 0x64
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e21f      	b.n	8002e2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ee:	4b61      	ldr	r3, [pc, #388]	; (8002b74 <HAL_RCC_OscConfig+0x274>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0f0      	beq.n	80029dc <HAL_RCC_OscConfig+0xdc>
 80029fa:	e014      	b.n	8002a26 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fc:	f7fe f9be 	bl	8000d7c <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a04:	f7fe f9ba 	bl	8000d7c <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b64      	cmp	r3, #100	; 0x64
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e20b      	b.n	8002e2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a16:	4b57      	ldr	r3, [pc, #348]	; (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1f0      	bne.n	8002a04 <HAL_RCC_OscConfig+0x104>
 8002a22:	e000      	b.n	8002a26 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d06f      	beq.n	8002b12 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a32:	4b50      	ldr	r3, [pc, #320]	; (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 030c 	and.w	r3, r3, #12
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d017      	beq.n	8002a6e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a3e:	4b4d      	ldr	r3, [pc, #308]	; (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a46:	2b08      	cmp	r3, #8
 8002a48:	d105      	bne.n	8002a56 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a4a:	4b4a      	ldr	r3, [pc, #296]	; (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00b      	beq.n	8002a6e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a56:	4b47      	ldr	r3, [pc, #284]	; (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a5e:	2b0c      	cmp	r3, #12
 8002a60:	d11c      	bne.n	8002a9c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a62:	4b44      	ldr	r3, [pc, #272]	; (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d116      	bne.n	8002a9c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a6e:	4b41      	ldr	r3, [pc, #260]	; (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d005      	beq.n	8002a86 <HAL_RCC_OscConfig+0x186>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d001      	beq.n	8002a86 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e1d3      	b.n	8002e2e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a86:	4b3b      	ldr	r3, [pc, #236]	; (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	4937      	ldr	r1, [pc, #220]	; (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a9a:	e03a      	b.n	8002b12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d020      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aa4:	4b34      	ldr	r3, [pc, #208]	; (8002b78 <HAL_RCC_OscConfig+0x278>)
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aaa:	f7fe f967 	bl	8000d7c <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ab2:	f7fe f963 	bl	8000d7c <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e1b4      	b.n	8002e2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac4:	4b2b      	ldr	r3, [pc, #172]	; (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0f0      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad0:	4b28      	ldr	r3, [pc, #160]	; (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	4925      	ldr	r1, [pc, #148]	; (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	600b      	str	r3, [r1, #0]
 8002ae4:	e015      	b.n	8002b12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ae6:	4b24      	ldr	r3, [pc, #144]	; (8002b78 <HAL_RCC_OscConfig+0x278>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aec:	f7fe f946 	bl	8000d7c <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002af4:	f7fe f942 	bl	8000d7c <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e193      	b.n	8002e2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b06:	4b1b      	ldr	r3, [pc, #108]	; (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f0      	bne.n	8002af4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d036      	beq.n	8002b8c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d016      	beq.n	8002b54 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b26:	4b15      	ldr	r3, [pc, #84]	; (8002b7c <HAL_RCC_OscConfig+0x27c>)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2c:	f7fe f926 	bl	8000d7c <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b34:	f7fe f922 	bl	8000d7c <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e173      	b.n	8002e2e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b46:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0f0      	beq.n	8002b34 <HAL_RCC_OscConfig+0x234>
 8002b52:	e01b      	b.n	8002b8c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b54:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <HAL_RCC_OscConfig+0x27c>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b5a:	f7fe f90f 	bl	8000d7c <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b60:	e00e      	b.n	8002b80 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b62:	f7fe f90b 	bl	8000d7c <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d907      	bls.n	8002b80 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e15c      	b.n	8002e2e <HAL_RCC_OscConfig+0x52e>
 8002b74:	40023800 	.word	0x40023800
 8002b78:	42470000 	.word	0x42470000
 8002b7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b80:	4b8a      	ldr	r3, [pc, #552]	; (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1ea      	bne.n	8002b62 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 8097 	beq.w	8002cc8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b9e:	4b83      	ldr	r3, [pc, #524]	; (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10f      	bne.n	8002bca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002baa:	2300      	movs	r3, #0
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	4b7f      	ldr	r3, [pc, #508]	; (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	4a7e      	ldr	r2, [pc, #504]	; (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bba:	4b7c      	ldr	r3, [pc, #496]	; (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc2:	60bb      	str	r3, [r7, #8]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bca:	4b79      	ldr	r3, [pc, #484]	; (8002db0 <HAL_RCC_OscConfig+0x4b0>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d118      	bne.n	8002c08 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bd6:	4b76      	ldr	r3, [pc, #472]	; (8002db0 <HAL_RCC_OscConfig+0x4b0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a75      	ldr	r2, [pc, #468]	; (8002db0 <HAL_RCC_OscConfig+0x4b0>)
 8002bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002be2:	f7fe f8cb 	bl	8000d7c <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bea:	f7fe f8c7 	bl	8000d7c <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e118      	b.n	8002e2e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bfc:	4b6c      	ldr	r3, [pc, #432]	; (8002db0 <HAL_RCC_OscConfig+0x4b0>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0f0      	beq.n	8002bea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d106      	bne.n	8002c1e <HAL_RCC_OscConfig+0x31e>
 8002c10:	4b66      	ldr	r3, [pc, #408]	; (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c14:	4a65      	ldr	r2, [pc, #404]	; (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002c16:	f043 0301 	orr.w	r3, r3, #1
 8002c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c1c:	e01c      	b.n	8002c58 <HAL_RCC_OscConfig+0x358>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	2b05      	cmp	r3, #5
 8002c24:	d10c      	bne.n	8002c40 <HAL_RCC_OscConfig+0x340>
 8002c26:	4b61      	ldr	r3, [pc, #388]	; (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2a:	4a60      	ldr	r2, [pc, #384]	; (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002c2c:	f043 0304 	orr.w	r3, r3, #4
 8002c30:	6713      	str	r3, [r2, #112]	; 0x70
 8002c32:	4b5e      	ldr	r3, [pc, #376]	; (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c36:	4a5d      	ldr	r2, [pc, #372]	; (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c3e:	e00b      	b.n	8002c58 <HAL_RCC_OscConfig+0x358>
 8002c40:	4b5a      	ldr	r3, [pc, #360]	; (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c44:	4a59      	ldr	r2, [pc, #356]	; (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002c46:	f023 0301 	bic.w	r3, r3, #1
 8002c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c4c:	4b57      	ldr	r3, [pc, #348]	; (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c50:	4a56      	ldr	r2, [pc, #344]	; (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002c52:	f023 0304 	bic.w	r3, r3, #4
 8002c56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d015      	beq.n	8002c8c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c60:	f7fe f88c 	bl	8000d7c <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c66:	e00a      	b.n	8002c7e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c68:	f7fe f888 	bl	8000d7c <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e0d7      	b.n	8002e2e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c7e:	4b4b      	ldr	r3, [pc, #300]	; (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0ee      	beq.n	8002c68 <HAL_RCC_OscConfig+0x368>
 8002c8a:	e014      	b.n	8002cb6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8c:	f7fe f876 	bl	8000d7c <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c92:	e00a      	b.n	8002caa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c94:	f7fe f872 	bl	8000d7c <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e0c1      	b.n	8002e2e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002caa:	4b40      	ldr	r3, [pc, #256]	; (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1ee      	bne.n	8002c94 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cb6:	7dfb      	ldrb	r3, [r7, #23]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d105      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cbc:	4b3b      	ldr	r3, [pc, #236]	; (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc0:	4a3a      	ldr	r2, [pc, #232]	; (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002cc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cc6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 80ad 	beq.w	8002e2c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cd2:	4b36      	ldr	r3, [pc, #216]	; (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
 8002cda:	2b08      	cmp	r3, #8
 8002cdc:	d060      	beq.n	8002da0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d145      	bne.n	8002d72 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce6:	4b33      	ldr	r3, [pc, #204]	; (8002db4 <HAL_RCC_OscConfig+0x4b4>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cec:	f7fe f846 	bl	8000d7c <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cf4:	f7fe f842 	bl	8000d7c <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e093      	b.n	8002e2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d06:	4b29      	ldr	r3, [pc, #164]	; (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1f0      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69da      	ldr	r2, [r3, #28]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	019b      	lsls	r3, r3, #6
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d28:	085b      	lsrs	r3, r3, #1
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	041b      	lsls	r3, r3, #16
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d34:	061b      	lsls	r3, r3, #24
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3c:	071b      	lsls	r3, r3, #28
 8002d3e:	491b      	ldr	r1, [pc, #108]	; (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d44:	4b1b      	ldr	r3, [pc, #108]	; (8002db4 <HAL_RCC_OscConfig+0x4b4>)
 8002d46:	2201      	movs	r2, #1
 8002d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4a:	f7fe f817 	bl	8000d7c <HAL_GetTick>
 8002d4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d50:	e008      	b.n	8002d64 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d52:	f7fe f813 	bl	8000d7c <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e064      	b.n	8002e2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d64:	4b11      	ldr	r3, [pc, #68]	; (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0f0      	beq.n	8002d52 <HAL_RCC_OscConfig+0x452>
 8002d70:	e05c      	b.n	8002e2c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d72:	4b10      	ldr	r3, [pc, #64]	; (8002db4 <HAL_RCC_OscConfig+0x4b4>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d78:	f7fe f800 	bl	8000d7c <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d80:	f7fd fffc 	bl	8000d7c <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e04d      	b.n	8002e2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d92:	4b06      	ldr	r3, [pc, #24]	; (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f0      	bne.n	8002d80 <HAL_RCC_OscConfig+0x480>
 8002d9e:	e045      	b.n	8002e2c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d107      	bne.n	8002db8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e040      	b.n	8002e2e <HAL_RCC_OscConfig+0x52e>
 8002dac:	40023800 	.word	0x40023800
 8002db0:	40007000 	.word	0x40007000
 8002db4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002db8:	4b1f      	ldr	r3, [pc, #124]	; (8002e38 <HAL_RCC_OscConfig+0x538>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d030      	beq.n	8002e28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d129      	bne.n	8002e28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d122      	bne.n	8002e28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002de8:	4013      	ands	r3, r2
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d119      	bne.n	8002e28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfe:	085b      	lsrs	r3, r3, #1
 8002e00:	3b01      	subs	r3, #1
 8002e02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d10f      	bne.n	8002e28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d107      	bne.n	8002e28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d001      	beq.n	8002e2c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e000      	b.n	8002e2e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3718      	adds	r7, #24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	40023800 	.word	0x40023800

08002e3c <atoi>:
 8002e3c:	220a      	movs	r2, #10
 8002e3e:	2100      	movs	r1, #0
 8002e40:	f000 b882 	b.w	8002f48 <strtol>

08002e44 <_strtol_l.constprop.0>:
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e4a:	d001      	beq.n	8002e50 <_strtol_l.constprop.0+0xc>
 8002e4c:	2b24      	cmp	r3, #36	; 0x24
 8002e4e:	d906      	bls.n	8002e5e <_strtol_l.constprop.0+0x1a>
 8002e50:	f000 f8ac 	bl	8002fac <__errno>
 8002e54:	2316      	movs	r3, #22
 8002e56:	6003      	str	r3, [r0, #0]
 8002e58:	2000      	movs	r0, #0
 8002e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e5e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8002f44 <_strtol_l.constprop.0+0x100>
 8002e62:	460d      	mov	r5, r1
 8002e64:	462e      	mov	r6, r5
 8002e66:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002e6a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8002e6e:	f017 0708 	ands.w	r7, r7, #8
 8002e72:	d1f7      	bne.n	8002e64 <_strtol_l.constprop.0+0x20>
 8002e74:	2c2d      	cmp	r4, #45	; 0x2d
 8002e76:	d132      	bne.n	8002ede <_strtol_l.constprop.0+0x9a>
 8002e78:	782c      	ldrb	r4, [r5, #0]
 8002e7a:	2701      	movs	r7, #1
 8002e7c:	1cb5      	adds	r5, r6, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d05b      	beq.n	8002f3a <_strtol_l.constprop.0+0xf6>
 8002e82:	2b10      	cmp	r3, #16
 8002e84:	d109      	bne.n	8002e9a <_strtol_l.constprop.0+0x56>
 8002e86:	2c30      	cmp	r4, #48	; 0x30
 8002e88:	d107      	bne.n	8002e9a <_strtol_l.constprop.0+0x56>
 8002e8a:	782c      	ldrb	r4, [r5, #0]
 8002e8c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8002e90:	2c58      	cmp	r4, #88	; 0x58
 8002e92:	d14d      	bne.n	8002f30 <_strtol_l.constprop.0+0xec>
 8002e94:	786c      	ldrb	r4, [r5, #1]
 8002e96:	2310      	movs	r3, #16
 8002e98:	3502      	adds	r5, #2
 8002e9a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8002e9e:	f108 38ff 	add.w	r8, r8, #4294967295
 8002ea2:	f04f 0e00 	mov.w	lr, #0
 8002ea6:	fbb8 f9f3 	udiv	r9, r8, r3
 8002eaa:	4676      	mov	r6, lr
 8002eac:	fb03 8a19 	mls	sl, r3, r9, r8
 8002eb0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8002eb4:	f1bc 0f09 	cmp.w	ip, #9
 8002eb8:	d816      	bhi.n	8002ee8 <_strtol_l.constprop.0+0xa4>
 8002eba:	4664      	mov	r4, ip
 8002ebc:	42a3      	cmp	r3, r4
 8002ebe:	dd24      	ble.n	8002f0a <_strtol_l.constprop.0+0xc6>
 8002ec0:	f1be 3fff 	cmp.w	lr, #4294967295
 8002ec4:	d008      	beq.n	8002ed8 <_strtol_l.constprop.0+0x94>
 8002ec6:	45b1      	cmp	r9, r6
 8002ec8:	d31c      	bcc.n	8002f04 <_strtol_l.constprop.0+0xc0>
 8002eca:	d101      	bne.n	8002ed0 <_strtol_l.constprop.0+0x8c>
 8002ecc:	45a2      	cmp	sl, r4
 8002ece:	db19      	blt.n	8002f04 <_strtol_l.constprop.0+0xc0>
 8002ed0:	fb06 4603 	mla	r6, r6, r3, r4
 8002ed4:	f04f 0e01 	mov.w	lr, #1
 8002ed8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002edc:	e7e8      	b.n	8002eb0 <_strtol_l.constprop.0+0x6c>
 8002ede:	2c2b      	cmp	r4, #43	; 0x2b
 8002ee0:	bf04      	itt	eq
 8002ee2:	782c      	ldrbeq	r4, [r5, #0]
 8002ee4:	1cb5      	addeq	r5, r6, #2
 8002ee6:	e7ca      	b.n	8002e7e <_strtol_l.constprop.0+0x3a>
 8002ee8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8002eec:	f1bc 0f19 	cmp.w	ip, #25
 8002ef0:	d801      	bhi.n	8002ef6 <_strtol_l.constprop.0+0xb2>
 8002ef2:	3c37      	subs	r4, #55	; 0x37
 8002ef4:	e7e2      	b.n	8002ebc <_strtol_l.constprop.0+0x78>
 8002ef6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8002efa:	f1bc 0f19 	cmp.w	ip, #25
 8002efe:	d804      	bhi.n	8002f0a <_strtol_l.constprop.0+0xc6>
 8002f00:	3c57      	subs	r4, #87	; 0x57
 8002f02:	e7db      	b.n	8002ebc <_strtol_l.constprop.0+0x78>
 8002f04:	f04f 3eff 	mov.w	lr, #4294967295
 8002f08:	e7e6      	b.n	8002ed8 <_strtol_l.constprop.0+0x94>
 8002f0a:	f1be 3fff 	cmp.w	lr, #4294967295
 8002f0e:	d105      	bne.n	8002f1c <_strtol_l.constprop.0+0xd8>
 8002f10:	2322      	movs	r3, #34	; 0x22
 8002f12:	6003      	str	r3, [r0, #0]
 8002f14:	4646      	mov	r6, r8
 8002f16:	b942      	cbnz	r2, 8002f2a <_strtol_l.constprop.0+0xe6>
 8002f18:	4630      	mov	r0, r6
 8002f1a:	e79e      	b.n	8002e5a <_strtol_l.constprop.0+0x16>
 8002f1c:	b107      	cbz	r7, 8002f20 <_strtol_l.constprop.0+0xdc>
 8002f1e:	4276      	negs	r6, r6
 8002f20:	2a00      	cmp	r2, #0
 8002f22:	d0f9      	beq.n	8002f18 <_strtol_l.constprop.0+0xd4>
 8002f24:	f1be 0f00 	cmp.w	lr, #0
 8002f28:	d000      	beq.n	8002f2c <_strtol_l.constprop.0+0xe8>
 8002f2a:	1e69      	subs	r1, r5, #1
 8002f2c:	6011      	str	r1, [r2, #0]
 8002f2e:	e7f3      	b.n	8002f18 <_strtol_l.constprop.0+0xd4>
 8002f30:	2430      	movs	r4, #48	; 0x30
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1b1      	bne.n	8002e9a <_strtol_l.constprop.0+0x56>
 8002f36:	2308      	movs	r3, #8
 8002f38:	e7af      	b.n	8002e9a <_strtol_l.constprop.0+0x56>
 8002f3a:	2c30      	cmp	r4, #48	; 0x30
 8002f3c:	d0a5      	beq.n	8002e8a <_strtol_l.constprop.0+0x46>
 8002f3e:	230a      	movs	r3, #10
 8002f40:	e7ab      	b.n	8002e9a <_strtol_l.constprop.0+0x56>
 8002f42:	bf00      	nop
 8002f44:	080038d1 	.word	0x080038d1

08002f48 <strtol>:
 8002f48:	4613      	mov	r3, r2
 8002f4a:	460a      	mov	r2, r1
 8002f4c:	4601      	mov	r1, r0
 8002f4e:	4802      	ldr	r0, [pc, #8]	; (8002f58 <strtol+0x10>)
 8002f50:	6800      	ldr	r0, [r0, #0]
 8002f52:	f7ff bf77 	b.w	8002e44 <_strtol_l.constprop.0>
 8002f56:	bf00      	nop
 8002f58:	20000058 	.word	0x20000058

08002f5c <siprintf>:
 8002f5c:	b40e      	push	{r1, r2, r3}
 8002f5e:	b500      	push	{lr}
 8002f60:	b09c      	sub	sp, #112	; 0x70
 8002f62:	ab1d      	add	r3, sp, #116	; 0x74
 8002f64:	9002      	str	r0, [sp, #8]
 8002f66:	9006      	str	r0, [sp, #24]
 8002f68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002f6c:	4809      	ldr	r0, [pc, #36]	; (8002f94 <siprintf+0x38>)
 8002f6e:	9107      	str	r1, [sp, #28]
 8002f70:	9104      	str	r1, [sp, #16]
 8002f72:	4909      	ldr	r1, [pc, #36]	; (8002f98 <siprintf+0x3c>)
 8002f74:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f78:	9105      	str	r1, [sp, #20]
 8002f7a:	6800      	ldr	r0, [r0, #0]
 8002f7c:	9301      	str	r3, [sp, #4]
 8002f7e:	a902      	add	r1, sp, #8
 8002f80:	f000 f992 	bl	80032a8 <_svfiprintf_r>
 8002f84:	9b02      	ldr	r3, [sp, #8]
 8002f86:	2200      	movs	r2, #0
 8002f88:	701a      	strb	r2, [r3, #0]
 8002f8a:	b01c      	add	sp, #112	; 0x70
 8002f8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f90:	b003      	add	sp, #12
 8002f92:	4770      	bx	lr
 8002f94:	20000058 	.word	0x20000058
 8002f98:	ffff0208 	.word	0xffff0208

08002f9c <memset>:
 8002f9c:	4402      	add	r2, r0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d100      	bne.n	8002fa6 <memset+0xa>
 8002fa4:	4770      	bx	lr
 8002fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8002faa:	e7f9      	b.n	8002fa0 <memset+0x4>

08002fac <__errno>:
 8002fac:	4b01      	ldr	r3, [pc, #4]	; (8002fb4 <__errno+0x8>)
 8002fae:	6818      	ldr	r0, [r3, #0]
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	20000058 	.word	0x20000058

08002fb8 <__libc_init_array>:
 8002fb8:	b570      	push	{r4, r5, r6, lr}
 8002fba:	4d0d      	ldr	r5, [pc, #52]	; (8002ff0 <__libc_init_array+0x38>)
 8002fbc:	4c0d      	ldr	r4, [pc, #52]	; (8002ff4 <__libc_init_array+0x3c>)
 8002fbe:	1b64      	subs	r4, r4, r5
 8002fc0:	10a4      	asrs	r4, r4, #2
 8002fc2:	2600      	movs	r6, #0
 8002fc4:	42a6      	cmp	r6, r4
 8002fc6:	d109      	bne.n	8002fdc <__libc_init_array+0x24>
 8002fc8:	4d0b      	ldr	r5, [pc, #44]	; (8002ff8 <__libc_init_array+0x40>)
 8002fca:	4c0c      	ldr	r4, [pc, #48]	; (8002ffc <__libc_init_array+0x44>)
 8002fcc:	f000 fc6a 	bl	80038a4 <_init>
 8002fd0:	1b64      	subs	r4, r4, r5
 8002fd2:	10a4      	asrs	r4, r4, #2
 8002fd4:	2600      	movs	r6, #0
 8002fd6:	42a6      	cmp	r6, r4
 8002fd8:	d105      	bne.n	8002fe6 <__libc_init_array+0x2e>
 8002fda:	bd70      	pop	{r4, r5, r6, pc}
 8002fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fe0:	4798      	blx	r3
 8002fe2:	3601      	adds	r6, #1
 8002fe4:	e7ee      	b.n	8002fc4 <__libc_init_array+0xc>
 8002fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fea:	4798      	blx	r3
 8002fec:	3601      	adds	r6, #1
 8002fee:	e7f2      	b.n	8002fd6 <__libc_init_array+0x1e>
 8002ff0:	08003a0c 	.word	0x08003a0c
 8002ff4:	08003a0c 	.word	0x08003a0c
 8002ff8:	08003a0c 	.word	0x08003a0c
 8002ffc:	08003a10 	.word	0x08003a10

08003000 <__retarget_lock_acquire_recursive>:
 8003000:	4770      	bx	lr

08003002 <__retarget_lock_release_recursive>:
 8003002:	4770      	bx	lr

08003004 <_free_r>:
 8003004:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003006:	2900      	cmp	r1, #0
 8003008:	d044      	beq.n	8003094 <_free_r+0x90>
 800300a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800300e:	9001      	str	r0, [sp, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	f1a1 0404 	sub.w	r4, r1, #4
 8003016:	bfb8      	it	lt
 8003018:	18e4      	addlt	r4, r4, r3
 800301a:	f000 f8df 	bl	80031dc <__malloc_lock>
 800301e:	4a1e      	ldr	r2, [pc, #120]	; (8003098 <_free_r+0x94>)
 8003020:	9801      	ldr	r0, [sp, #4]
 8003022:	6813      	ldr	r3, [r2, #0]
 8003024:	b933      	cbnz	r3, 8003034 <_free_r+0x30>
 8003026:	6063      	str	r3, [r4, #4]
 8003028:	6014      	str	r4, [r2, #0]
 800302a:	b003      	add	sp, #12
 800302c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003030:	f000 b8da 	b.w	80031e8 <__malloc_unlock>
 8003034:	42a3      	cmp	r3, r4
 8003036:	d908      	bls.n	800304a <_free_r+0x46>
 8003038:	6825      	ldr	r5, [r4, #0]
 800303a:	1961      	adds	r1, r4, r5
 800303c:	428b      	cmp	r3, r1
 800303e:	bf01      	itttt	eq
 8003040:	6819      	ldreq	r1, [r3, #0]
 8003042:	685b      	ldreq	r3, [r3, #4]
 8003044:	1949      	addeq	r1, r1, r5
 8003046:	6021      	streq	r1, [r4, #0]
 8003048:	e7ed      	b.n	8003026 <_free_r+0x22>
 800304a:	461a      	mov	r2, r3
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	b10b      	cbz	r3, 8003054 <_free_r+0x50>
 8003050:	42a3      	cmp	r3, r4
 8003052:	d9fa      	bls.n	800304a <_free_r+0x46>
 8003054:	6811      	ldr	r1, [r2, #0]
 8003056:	1855      	adds	r5, r2, r1
 8003058:	42a5      	cmp	r5, r4
 800305a:	d10b      	bne.n	8003074 <_free_r+0x70>
 800305c:	6824      	ldr	r4, [r4, #0]
 800305e:	4421      	add	r1, r4
 8003060:	1854      	adds	r4, r2, r1
 8003062:	42a3      	cmp	r3, r4
 8003064:	6011      	str	r1, [r2, #0]
 8003066:	d1e0      	bne.n	800302a <_free_r+0x26>
 8003068:	681c      	ldr	r4, [r3, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	6053      	str	r3, [r2, #4]
 800306e:	440c      	add	r4, r1
 8003070:	6014      	str	r4, [r2, #0]
 8003072:	e7da      	b.n	800302a <_free_r+0x26>
 8003074:	d902      	bls.n	800307c <_free_r+0x78>
 8003076:	230c      	movs	r3, #12
 8003078:	6003      	str	r3, [r0, #0]
 800307a:	e7d6      	b.n	800302a <_free_r+0x26>
 800307c:	6825      	ldr	r5, [r4, #0]
 800307e:	1961      	adds	r1, r4, r5
 8003080:	428b      	cmp	r3, r1
 8003082:	bf04      	itt	eq
 8003084:	6819      	ldreq	r1, [r3, #0]
 8003086:	685b      	ldreq	r3, [r3, #4]
 8003088:	6063      	str	r3, [r4, #4]
 800308a:	bf04      	itt	eq
 800308c:	1949      	addeq	r1, r1, r5
 800308e:	6021      	streq	r1, [r4, #0]
 8003090:	6054      	str	r4, [r2, #4]
 8003092:	e7ca      	b.n	800302a <_free_r+0x26>
 8003094:	b003      	add	sp, #12
 8003096:	bd30      	pop	{r4, r5, pc}
 8003098:	200002b4 	.word	0x200002b4

0800309c <sbrk_aligned>:
 800309c:	b570      	push	{r4, r5, r6, lr}
 800309e:	4e0e      	ldr	r6, [pc, #56]	; (80030d8 <sbrk_aligned+0x3c>)
 80030a0:	460c      	mov	r4, r1
 80030a2:	6831      	ldr	r1, [r6, #0]
 80030a4:	4605      	mov	r5, r0
 80030a6:	b911      	cbnz	r1, 80030ae <sbrk_aligned+0x12>
 80030a8:	f000 fba6 	bl	80037f8 <_sbrk_r>
 80030ac:	6030      	str	r0, [r6, #0]
 80030ae:	4621      	mov	r1, r4
 80030b0:	4628      	mov	r0, r5
 80030b2:	f000 fba1 	bl	80037f8 <_sbrk_r>
 80030b6:	1c43      	adds	r3, r0, #1
 80030b8:	d00a      	beq.n	80030d0 <sbrk_aligned+0x34>
 80030ba:	1cc4      	adds	r4, r0, #3
 80030bc:	f024 0403 	bic.w	r4, r4, #3
 80030c0:	42a0      	cmp	r0, r4
 80030c2:	d007      	beq.n	80030d4 <sbrk_aligned+0x38>
 80030c4:	1a21      	subs	r1, r4, r0
 80030c6:	4628      	mov	r0, r5
 80030c8:	f000 fb96 	bl	80037f8 <_sbrk_r>
 80030cc:	3001      	adds	r0, #1
 80030ce:	d101      	bne.n	80030d4 <sbrk_aligned+0x38>
 80030d0:	f04f 34ff 	mov.w	r4, #4294967295
 80030d4:	4620      	mov	r0, r4
 80030d6:	bd70      	pop	{r4, r5, r6, pc}
 80030d8:	200002b8 	.word	0x200002b8

080030dc <_malloc_r>:
 80030dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030e0:	1ccd      	adds	r5, r1, #3
 80030e2:	f025 0503 	bic.w	r5, r5, #3
 80030e6:	3508      	adds	r5, #8
 80030e8:	2d0c      	cmp	r5, #12
 80030ea:	bf38      	it	cc
 80030ec:	250c      	movcc	r5, #12
 80030ee:	2d00      	cmp	r5, #0
 80030f0:	4607      	mov	r7, r0
 80030f2:	db01      	blt.n	80030f8 <_malloc_r+0x1c>
 80030f4:	42a9      	cmp	r1, r5
 80030f6:	d905      	bls.n	8003104 <_malloc_r+0x28>
 80030f8:	230c      	movs	r3, #12
 80030fa:	603b      	str	r3, [r7, #0]
 80030fc:	2600      	movs	r6, #0
 80030fe:	4630      	mov	r0, r6
 8003100:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003104:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80031d8 <_malloc_r+0xfc>
 8003108:	f000 f868 	bl	80031dc <__malloc_lock>
 800310c:	f8d8 3000 	ldr.w	r3, [r8]
 8003110:	461c      	mov	r4, r3
 8003112:	bb5c      	cbnz	r4, 800316c <_malloc_r+0x90>
 8003114:	4629      	mov	r1, r5
 8003116:	4638      	mov	r0, r7
 8003118:	f7ff ffc0 	bl	800309c <sbrk_aligned>
 800311c:	1c43      	adds	r3, r0, #1
 800311e:	4604      	mov	r4, r0
 8003120:	d155      	bne.n	80031ce <_malloc_r+0xf2>
 8003122:	f8d8 4000 	ldr.w	r4, [r8]
 8003126:	4626      	mov	r6, r4
 8003128:	2e00      	cmp	r6, #0
 800312a:	d145      	bne.n	80031b8 <_malloc_r+0xdc>
 800312c:	2c00      	cmp	r4, #0
 800312e:	d048      	beq.n	80031c2 <_malloc_r+0xe6>
 8003130:	6823      	ldr	r3, [r4, #0]
 8003132:	4631      	mov	r1, r6
 8003134:	4638      	mov	r0, r7
 8003136:	eb04 0903 	add.w	r9, r4, r3
 800313a:	f000 fb5d 	bl	80037f8 <_sbrk_r>
 800313e:	4581      	cmp	r9, r0
 8003140:	d13f      	bne.n	80031c2 <_malloc_r+0xe6>
 8003142:	6821      	ldr	r1, [r4, #0]
 8003144:	1a6d      	subs	r5, r5, r1
 8003146:	4629      	mov	r1, r5
 8003148:	4638      	mov	r0, r7
 800314a:	f7ff ffa7 	bl	800309c <sbrk_aligned>
 800314e:	3001      	adds	r0, #1
 8003150:	d037      	beq.n	80031c2 <_malloc_r+0xe6>
 8003152:	6823      	ldr	r3, [r4, #0]
 8003154:	442b      	add	r3, r5
 8003156:	6023      	str	r3, [r4, #0]
 8003158:	f8d8 3000 	ldr.w	r3, [r8]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d038      	beq.n	80031d2 <_malloc_r+0xf6>
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	42a2      	cmp	r2, r4
 8003164:	d12b      	bne.n	80031be <_malloc_r+0xe2>
 8003166:	2200      	movs	r2, #0
 8003168:	605a      	str	r2, [r3, #4]
 800316a:	e00f      	b.n	800318c <_malloc_r+0xb0>
 800316c:	6822      	ldr	r2, [r4, #0]
 800316e:	1b52      	subs	r2, r2, r5
 8003170:	d41f      	bmi.n	80031b2 <_malloc_r+0xd6>
 8003172:	2a0b      	cmp	r2, #11
 8003174:	d917      	bls.n	80031a6 <_malloc_r+0xca>
 8003176:	1961      	adds	r1, r4, r5
 8003178:	42a3      	cmp	r3, r4
 800317a:	6025      	str	r5, [r4, #0]
 800317c:	bf18      	it	ne
 800317e:	6059      	strne	r1, [r3, #4]
 8003180:	6863      	ldr	r3, [r4, #4]
 8003182:	bf08      	it	eq
 8003184:	f8c8 1000 	streq.w	r1, [r8]
 8003188:	5162      	str	r2, [r4, r5]
 800318a:	604b      	str	r3, [r1, #4]
 800318c:	4638      	mov	r0, r7
 800318e:	f104 060b 	add.w	r6, r4, #11
 8003192:	f000 f829 	bl	80031e8 <__malloc_unlock>
 8003196:	f026 0607 	bic.w	r6, r6, #7
 800319a:	1d23      	adds	r3, r4, #4
 800319c:	1af2      	subs	r2, r6, r3
 800319e:	d0ae      	beq.n	80030fe <_malloc_r+0x22>
 80031a0:	1b9b      	subs	r3, r3, r6
 80031a2:	50a3      	str	r3, [r4, r2]
 80031a4:	e7ab      	b.n	80030fe <_malloc_r+0x22>
 80031a6:	42a3      	cmp	r3, r4
 80031a8:	6862      	ldr	r2, [r4, #4]
 80031aa:	d1dd      	bne.n	8003168 <_malloc_r+0x8c>
 80031ac:	f8c8 2000 	str.w	r2, [r8]
 80031b0:	e7ec      	b.n	800318c <_malloc_r+0xb0>
 80031b2:	4623      	mov	r3, r4
 80031b4:	6864      	ldr	r4, [r4, #4]
 80031b6:	e7ac      	b.n	8003112 <_malloc_r+0x36>
 80031b8:	4634      	mov	r4, r6
 80031ba:	6876      	ldr	r6, [r6, #4]
 80031bc:	e7b4      	b.n	8003128 <_malloc_r+0x4c>
 80031be:	4613      	mov	r3, r2
 80031c0:	e7cc      	b.n	800315c <_malloc_r+0x80>
 80031c2:	230c      	movs	r3, #12
 80031c4:	603b      	str	r3, [r7, #0]
 80031c6:	4638      	mov	r0, r7
 80031c8:	f000 f80e 	bl	80031e8 <__malloc_unlock>
 80031cc:	e797      	b.n	80030fe <_malloc_r+0x22>
 80031ce:	6025      	str	r5, [r4, #0]
 80031d0:	e7dc      	b.n	800318c <_malloc_r+0xb0>
 80031d2:	605b      	str	r3, [r3, #4]
 80031d4:	deff      	udf	#255	; 0xff
 80031d6:	bf00      	nop
 80031d8:	200002b4 	.word	0x200002b4

080031dc <__malloc_lock>:
 80031dc:	4801      	ldr	r0, [pc, #4]	; (80031e4 <__malloc_lock+0x8>)
 80031de:	f7ff bf0f 	b.w	8003000 <__retarget_lock_acquire_recursive>
 80031e2:	bf00      	nop
 80031e4:	200002b0 	.word	0x200002b0

080031e8 <__malloc_unlock>:
 80031e8:	4801      	ldr	r0, [pc, #4]	; (80031f0 <__malloc_unlock+0x8>)
 80031ea:	f7ff bf0a 	b.w	8003002 <__retarget_lock_release_recursive>
 80031ee:	bf00      	nop
 80031f0:	200002b0 	.word	0x200002b0

080031f4 <__ssputs_r>:
 80031f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031f8:	688e      	ldr	r6, [r1, #8]
 80031fa:	461f      	mov	r7, r3
 80031fc:	42be      	cmp	r6, r7
 80031fe:	680b      	ldr	r3, [r1, #0]
 8003200:	4682      	mov	sl, r0
 8003202:	460c      	mov	r4, r1
 8003204:	4690      	mov	r8, r2
 8003206:	d82c      	bhi.n	8003262 <__ssputs_r+0x6e>
 8003208:	898a      	ldrh	r2, [r1, #12]
 800320a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800320e:	d026      	beq.n	800325e <__ssputs_r+0x6a>
 8003210:	6965      	ldr	r5, [r4, #20]
 8003212:	6909      	ldr	r1, [r1, #16]
 8003214:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003218:	eba3 0901 	sub.w	r9, r3, r1
 800321c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003220:	1c7b      	adds	r3, r7, #1
 8003222:	444b      	add	r3, r9
 8003224:	106d      	asrs	r5, r5, #1
 8003226:	429d      	cmp	r5, r3
 8003228:	bf38      	it	cc
 800322a:	461d      	movcc	r5, r3
 800322c:	0553      	lsls	r3, r2, #21
 800322e:	d527      	bpl.n	8003280 <__ssputs_r+0x8c>
 8003230:	4629      	mov	r1, r5
 8003232:	f7ff ff53 	bl	80030dc <_malloc_r>
 8003236:	4606      	mov	r6, r0
 8003238:	b360      	cbz	r0, 8003294 <__ssputs_r+0xa0>
 800323a:	6921      	ldr	r1, [r4, #16]
 800323c:	464a      	mov	r2, r9
 800323e:	f000 faeb 	bl	8003818 <memcpy>
 8003242:	89a3      	ldrh	r3, [r4, #12]
 8003244:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800324c:	81a3      	strh	r3, [r4, #12]
 800324e:	6126      	str	r6, [r4, #16]
 8003250:	6165      	str	r5, [r4, #20]
 8003252:	444e      	add	r6, r9
 8003254:	eba5 0509 	sub.w	r5, r5, r9
 8003258:	6026      	str	r6, [r4, #0]
 800325a:	60a5      	str	r5, [r4, #8]
 800325c:	463e      	mov	r6, r7
 800325e:	42be      	cmp	r6, r7
 8003260:	d900      	bls.n	8003264 <__ssputs_r+0x70>
 8003262:	463e      	mov	r6, r7
 8003264:	6820      	ldr	r0, [r4, #0]
 8003266:	4632      	mov	r2, r6
 8003268:	4641      	mov	r1, r8
 800326a:	f000 faab 	bl	80037c4 <memmove>
 800326e:	68a3      	ldr	r3, [r4, #8]
 8003270:	1b9b      	subs	r3, r3, r6
 8003272:	60a3      	str	r3, [r4, #8]
 8003274:	6823      	ldr	r3, [r4, #0]
 8003276:	4433      	add	r3, r6
 8003278:	6023      	str	r3, [r4, #0]
 800327a:	2000      	movs	r0, #0
 800327c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003280:	462a      	mov	r2, r5
 8003282:	f000 fad7 	bl	8003834 <_realloc_r>
 8003286:	4606      	mov	r6, r0
 8003288:	2800      	cmp	r0, #0
 800328a:	d1e0      	bne.n	800324e <__ssputs_r+0x5a>
 800328c:	6921      	ldr	r1, [r4, #16]
 800328e:	4650      	mov	r0, sl
 8003290:	f7ff feb8 	bl	8003004 <_free_r>
 8003294:	230c      	movs	r3, #12
 8003296:	f8ca 3000 	str.w	r3, [sl]
 800329a:	89a3      	ldrh	r3, [r4, #12]
 800329c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032a0:	81a3      	strh	r3, [r4, #12]
 80032a2:	f04f 30ff 	mov.w	r0, #4294967295
 80032a6:	e7e9      	b.n	800327c <__ssputs_r+0x88>

080032a8 <_svfiprintf_r>:
 80032a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032ac:	4698      	mov	r8, r3
 80032ae:	898b      	ldrh	r3, [r1, #12]
 80032b0:	061b      	lsls	r3, r3, #24
 80032b2:	b09d      	sub	sp, #116	; 0x74
 80032b4:	4607      	mov	r7, r0
 80032b6:	460d      	mov	r5, r1
 80032b8:	4614      	mov	r4, r2
 80032ba:	d50e      	bpl.n	80032da <_svfiprintf_r+0x32>
 80032bc:	690b      	ldr	r3, [r1, #16]
 80032be:	b963      	cbnz	r3, 80032da <_svfiprintf_r+0x32>
 80032c0:	2140      	movs	r1, #64	; 0x40
 80032c2:	f7ff ff0b 	bl	80030dc <_malloc_r>
 80032c6:	6028      	str	r0, [r5, #0]
 80032c8:	6128      	str	r0, [r5, #16]
 80032ca:	b920      	cbnz	r0, 80032d6 <_svfiprintf_r+0x2e>
 80032cc:	230c      	movs	r3, #12
 80032ce:	603b      	str	r3, [r7, #0]
 80032d0:	f04f 30ff 	mov.w	r0, #4294967295
 80032d4:	e0d0      	b.n	8003478 <_svfiprintf_r+0x1d0>
 80032d6:	2340      	movs	r3, #64	; 0x40
 80032d8:	616b      	str	r3, [r5, #20]
 80032da:	2300      	movs	r3, #0
 80032dc:	9309      	str	r3, [sp, #36]	; 0x24
 80032de:	2320      	movs	r3, #32
 80032e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80032e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80032e8:	2330      	movs	r3, #48	; 0x30
 80032ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003490 <_svfiprintf_r+0x1e8>
 80032ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032f2:	f04f 0901 	mov.w	r9, #1
 80032f6:	4623      	mov	r3, r4
 80032f8:	469a      	mov	sl, r3
 80032fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032fe:	b10a      	cbz	r2, 8003304 <_svfiprintf_r+0x5c>
 8003300:	2a25      	cmp	r2, #37	; 0x25
 8003302:	d1f9      	bne.n	80032f8 <_svfiprintf_r+0x50>
 8003304:	ebba 0b04 	subs.w	fp, sl, r4
 8003308:	d00b      	beq.n	8003322 <_svfiprintf_r+0x7a>
 800330a:	465b      	mov	r3, fp
 800330c:	4622      	mov	r2, r4
 800330e:	4629      	mov	r1, r5
 8003310:	4638      	mov	r0, r7
 8003312:	f7ff ff6f 	bl	80031f4 <__ssputs_r>
 8003316:	3001      	adds	r0, #1
 8003318:	f000 80a9 	beq.w	800346e <_svfiprintf_r+0x1c6>
 800331c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800331e:	445a      	add	r2, fp
 8003320:	9209      	str	r2, [sp, #36]	; 0x24
 8003322:	f89a 3000 	ldrb.w	r3, [sl]
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 80a1 	beq.w	800346e <_svfiprintf_r+0x1c6>
 800332c:	2300      	movs	r3, #0
 800332e:	f04f 32ff 	mov.w	r2, #4294967295
 8003332:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003336:	f10a 0a01 	add.w	sl, sl, #1
 800333a:	9304      	str	r3, [sp, #16]
 800333c:	9307      	str	r3, [sp, #28]
 800333e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003342:	931a      	str	r3, [sp, #104]	; 0x68
 8003344:	4654      	mov	r4, sl
 8003346:	2205      	movs	r2, #5
 8003348:	f814 1b01 	ldrb.w	r1, [r4], #1
 800334c:	4850      	ldr	r0, [pc, #320]	; (8003490 <_svfiprintf_r+0x1e8>)
 800334e:	f7fc ff5f 	bl	8000210 <memchr>
 8003352:	9a04      	ldr	r2, [sp, #16]
 8003354:	b9d8      	cbnz	r0, 800338e <_svfiprintf_r+0xe6>
 8003356:	06d0      	lsls	r0, r2, #27
 8003358:	bf44      	itt	mi
 800335a:	2320      	movmi	r3, #32
 800335c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003360:	0711      	lsls	r1, r2, #28
 8003362:	bf44      	itt	mi
 8003364:	232b      	movmi	r3, #43	; 0x2b
 8003366:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800336a:	f89a 3000 	ldrb.w	r3, [sl]
 800336e:	2b2a      	cmp	r3, #42	; 0x2a
 8003370:	d015      	beq.n	800339e <_svfiprintf_r+0xf6>
 8003372:	9a07      	ldr	r2, [sp, #28]
 8003374:	4654      	mov	r4, sl
 8003376:	2000      	movs	r0, #0
 8003378:	f04f 0c0a 	mov.w	ip, #10
 800337c:	4621      	mov	r1, r4
 800337e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003382:	3b30      	subs	r3, #48	; 0x30
 8003384:	2b09      	cmp	r3, #9
 8003386:	d94d      	bls.n	8003424 <_svfiprintf_r+0x17c>
 8003388:	b1b0      	cbz	r0, 80033b8 <_svfiprintf_r+0x110>
 800338a:	9207      	str	r2, [sp, #28]
 800338c:	e014      	b.n	80033b8 <_svfiprintf_r+0x110>
 800338e:	eba0 0308 	sub.w	r3, r0, r8
 8003392:	fa09 f303 	lsl.w	r3, r9, r3
 8003396:	4313      	orrs	r3, r2
 8003398:	9304      	str	r3, [sp, #16]
 800339a:	46a2      	mov	sl, r4
 800339c:	e7d2      	b.n	8003344 <_svfiprintf_r+0x9c>
 800339e:	9b03      	ldr	r3, [sp, #12]
 80033a0:	1d19      	adds	r1, r3, #4
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	9103      	str	r1, [sp, #12]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	bfbb      	ittet	lt
 80033aa:	425b      	neglt	r3, r3
 80033ac:	f042 0202 	orrlt.w	r2, r2, #2
 80033b0:	9307      	strge	r3, [sp, #28]
 80033b2:	9307      	strlt	r3, [sp, #28]
 80033b4:	bfb8      	it	lt
 80033b6:	9204      	strlt	r2, [sp, #16]
 80033b8:	7823      	ldrb	r3, [r4, #0]
 80033ba:	2b2e      	cmp	r3, #46	; 0x2e
 80033bc:	d10c      	bne.n	80033d8 <_svfiprintf_r+0x130>
 80033be:	7863      	ldrb	r3, [r4, #1]
 80033c0:	2b2a      	cmp	r3, #42	; 0x2a
 80033c2:	d134      	bne.n	800342e <_svfiprintf_r+0x186>
 80033c4:	9b03      	ldr	r3, [sp, #12]
 80033c6:	1d1a      	adds	r2, r3, #4
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	9203      	str	r2, [sp, #12]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	bfb8      	it	lt
 80033d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80033d4:	3402      	adds	r4, #2
 80033d6:	9305      	str	r3, [sp, #20]
 80033d8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80034a0 <_svfiprintf_r+0x1f8>
 80033dc:	7821      	ldrb	r1, [r4, #0]
 80033de:	2203      	movs	r2, #3
 80033e0:	4650      	mov	r0, sl
 80033e2:	f7fc ff15 	bl	8000210 <memchr>
 80033e6:	b138      	cbz	r0, 80033f8 <_svfiprintf_r+0x150>
 80033e8:	9b04      	ldr	r3, [sp, #16]
 80033ea:	eba0 000a 	sub.w	r0, r0, sl
 80033ee:	2240      	movs	r2, #64	; 0x40
 80033f0:	4082      	lsls	r2, r0
 80033f2:	4313      	orrs	r3, r2
 80033f4:	3401      	adds	r4, #1
 80033f6:	9304      	str	r3, [sp, #16]
 80033f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033fc:	4825      	ldr	r0, [pc, #148]	; (8003494 <_svfiprintf_r+0x1ec>)
 80033fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003402:	2206      	movs	r2, #6
 8003404:	f7fc ff04 	bl	8000210 <memchr>
 8003408:	2800      	cmp	r0, #0
 800340a:	d038      	beq.n	800347e <_svfiprintf_r+0x1d6>
 800340c:	4b22      	ldr	r3, [pc, #136]	; (8003498 <_svfiprintf_r+0x1f0>)
 800340e:	bb1b      	cbnz	r3, 8003458 <_svfiprintf_r+0x1b0>
 8003410:	9b03      	ldr	r3, [sp, #12]
 8003412:	3307      	adds	r3, #7
 8003414:	f023 0307 	bic.w	r3, r3, #7
 8003418:	3308      	adds	r3, #8
 800341a:	9303      	str	r3, [sp, #12]
 800341c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800341e:	4433      	add	r3, r6
 8003420:	9309      	str	r3, [sp, #36]	; 0x24
 8003422:	e768      	b.n	80032f6 <_svfiprintf_r+0x4e>
 8003424:	fb0c 3202 	mla	r2, ip, r2, r3
 8003428:	460c      	mov	r4, r1
 800342a:	2001      	movs	r0, #1
 800342c:	e7a6      	b.n	800337c <_svfiprintf_r+0xd4>
 800342e:	2300      	movs	r3, #0
 8003430:	3401      	adds	r4, #1
 8003432:	9305      	str	r3, [sp, #20]
 8003434:	4619      	mov	r1, r3
 8003436:	f04f 0c0a 	mov.w	ip, #10
 800343a:	4620      	mov	r0, r4
 800343c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003440:	3a30      	subs	r2, #48	; 0x30
 8003442:	2a09      	cmp	r2, #9
 8003444:	d903      	bls.n	800344e <_svfiprintf_r+0x1a6>
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0c6      	beq.n	80033d8 <_svfiprintf_r+0x130>
 800344a:	9105      	str	r1, [sp, #20]
 800344c:	e7c4      	b.n	80033d8 <_svfiprintf_r+0x130>
 800344e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003452:	4604      	mov	r4, r0
 8003454:	2301      	movs	r3, #1
 8003456:	e7f0      	b.n	800343a <_svfiprintf_r+0x192>
 8003458:	ab03      	add	r3, sp, #12
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	462a      	mov	r2, r5
 800345e:	4b0f      	ldr	r3, [pc, #60]	; (800349c <_svfiprintf_r+0x1f4>)
 8003460:	a904      	add	r1, sp, #16
 8003462:	4638      	mov	r0, r7
 8003464:	f3af 8000 	nop.w
 8003468:	1c42      	adds	r2, r0, #1
 800346a:	4606      	mov	r6, r0
 800346c:	d1d6      	bne.n	800341c <_svfiprintf_r+0x174>
 800346e:	89ab      	ldrh	r3, [r5, #12]
 8003470:	065b      	lsls	r3, r3, #25
 8003472:	f53f af2d 	bmi.w	80032d0 <_svfiprintf_r+0x28>
 8003476:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003478:	b01d      	add	sp, #116	; 0x74
 800347a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800347e:	ab03      	add	r3, sp, #12
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	462a      	mov	r2, r5
 8003484:	4b05      	ldr	r3, [pc, #20]	; (800349c <_svfiprintf_r+0x1f4>)
 8003486:	a904      	add	r1, sp, #16
 8003488:	4638      	mov	r0, r7
 800348a:	f000 f879 	bl	8003580 <_printf_i>
 800348e:	e7eb      	b.n	8003468 <_svfiprintf_r+0x1c0>
 8003490:	080039d1 	.word	0x080039d1
 8003494:	080039db 	.word	0x080039db
 8003498:	00000000 	.word	0x00000000
 800349c:	080031f5 	.word	0x080031f5
 80034a0:	080039d7 	.word	0x080039d7

080034a4 <_printf_common>:
 80034a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034a8:	4616      	mov	r6, r2
 80034aa:	4699      	mov	r9, r3
 80034ac:	688a      	ldr	r2, [r1, #8]
 80034ae:	690b      	ldr	r3, [r1, #16]
 80034b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80034b4:	4293      	cmp	r3, r2
 80034b6:	bfb8      	it	lt
 80034b8:	4613      	movlt	r3, r2
 80034ba:	6033      	str	r3, [r6, #0]
 80034bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80034c0:	4607      	mov	r7, r0
 80034c2:	460c      	mov	r4, r1
 80034c4:	b10a      	cbz	r2, 80034ca <_printf_common+0x26>
 80034c6:	3301      	adds	r3, #1
 80034c8:	6033      	str	r3, [r6, #0]
 80034ca:	6823      	ldr	r3, [r4, #0]
 80034cc:	0699      	lsls	r1, r3, #26
 80034ce:	bf42      	ittt	mi
 80034d0:	6833      	ldrmi	r3, [r6, #0]
 80034d2:	3302      	addmi	r3, #2
 80034d4:	6033      	strmi	r3, [r6, #0]
 80034d6:	6825      	ldr	r5, [r4, #0]
 80034d8:	f015 0506 	ands.w	r5, r5, #6
 80034dc:	d106      	bne.n	80034ec <_printf_common+0x48>
 80034de:	f104 0a19 	add.w	sl, r4, #25
 80034e2:	68e3      	ldr	r3, [r4, #12]
 80034e4:	6832      	ldr	r2, [r6, #0]
 80034e6:	1a9b      	subs	r3, r3, r2
 80034e8:	42ab      	cmp	r3, r5
 80034ea:	dc26      	bgt.n	800353a <_printf_common+0x96>
 80034ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80034f0:	1e13      	subs	r3, r2, #0
 80034f2:	6822      	ldr	r2, [r4, #0]
 80034f4:	bf18      	it	ne
 80034f6:	2301      	movne	r3, #1
 80034f8:	0692      	lsls	r2, r2, #26
 80034fa:	d42b      	bmi.n	8003554 <_printf_common+0xb0>
 80034fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003500:	4649      	mov	r1, r9
 8003502:	4638      	mov	r0, r7
 8003504:	47c0      	blx	r8
 8003506:	3001      	adds	r0, #1
 8003508:	d01e      	beq.n	8003548 <_printf_common+0xa4>
 800350a:	6823      	ldr	r3, [r4, #0]
 800350c:	6922      	ldr	r2, [r4, #16]
 800350e:	f003 0306 	and.w	r3, r3, #6
 8003512:	2b04      	cmp	r3, #4
 8003514:	bf02      	ittt	eq
 8003516:	68e5      	ldreq	r5, [r4, #12]
 8003518:	6833      	ldreq	r3, [r6, #0]
 800351a:	1aed      	subeq	r5, r5, r3
 800351c:	68a3      	ldr	r3, [r4, #8]
 800351e:	bf0c      	ite	eq
 8003520:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003524:	2500      	movne	r5, #0
 8003526:	4293      	cmp	r3, r2
 8003528:	bfc4      	itt	gt
 800352a:	1a9b      	subgt	r3, r3, r2
 800352c:	18ed      	addgt	r5, r5, r3
 800352e:	2600      	movs	r6, #0
 8003530:	341a      	adds	r4, #26
 8003532:	42b5      	cmp	r5, r6
 8003534:	d11a      	bne.n	800356c <_printf_common+0xc8>
 8003536:	2000      	movs	r0, #0
 8003538:	e008      	b.n	800354c <_printf_common+0xa8>
 800353a:	2301      	movs	r3, #1
 800353c:	4652      	mov	r2, sl
 800353e:	4649      	mov	r1, r9
 8003540:	4638      	mov	r0, r7
 8003542:	47c0      	blx	r8
 8003544:	3001      	adds	r0, #1
 8003546:	d103      	bne.n	8003550 <_printf_common+0xac>
 8003548:	f04f 30ff 	mov.w	r0, #4294967295
 800354c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003550:	3501      	adds	r5, #1
 8003552:	e7c6      	b.n	80034e2 <_printf_common+0x3e>
 8003554:	18e1      	adds	r1, r4, r3
 8003556:	1c5a      	adds	r2, r3, #1
 8003558:	2030      	movs	r0, #48	; 0x30
 800355a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800355e:	4422      	add	r2, r4
 8003560:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003564:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003568:	3302      	adds	r3, #2
 800356a:	e7c7      	b.n	80034fc <_printf_common+0x58>
 800356c:	2301      	movs	r3, #1
 800356e:	4622      	mov	r2, r4
 8003570:	4649      	mov	r1, r9
 8003572:	4638      	mov	r0, r7
 8003574:	47c0      	blx	r8
 8003576:	3001      	adds	r0, #1
 8003578:	d0e6      	beq.n	8003548 <_printf_common+0xa4>
 800357a:	3601      	adds	r6, #1
 800357c:	e7d9      	b.n	8003532 <_printf_common+0x8e>
	...

08003580 <_printf_i>:
 8003580:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003584:	7e0f      	ldrb	r7, [r1, #24]
 8003586:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003588:	2f78      	cmp	r7, #120	; 0x78
 800358a:	4691      	mov	r9, r2
 800358c:	4680      	mov	r8, r0
 800358e:	460c      	mov	r4, r1
 8003590:	469a      	mov	sl, r3
 8003592:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003596:	d807      	bhi.n	80035a8 <_printf_i+0x28>
 8003598:	2f62      	cmp	r7, #98	; 0x62
 800359a:	d80a      	bhi.n	80035b2 <_printf_i+0x32>
 800359c:	2f00      	cmp	r7, #0
 800359e:	f000 80d4 	beq.w	800374a <_printf_i+0x1ca>
 80035a2:	2f58      	cmp	r7, #88	; 0x58
 80035a4:	f000 80c0 	beq.w	8003728 <_printf_i+0x1a8>
 80035a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80035b0:	e03a      	b.n	8003628 <_printf_i+0xa8>
 80035b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80035b6:	2b15      	cmp	r3, #21
 80035b8:	d8f6      	bhi.n	80035a8 <_printf_i+0x28>
 80035ba:	a101      	add	r1, pc, #4	; (adr r1, 80035c0 <_printf_i+0x40>)
 80035bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80035c0:	08003619 	.word	0x08003619
 80035c4:	0800362d 	.word	0x0800362d
 80035c8:	080035a9 	.word	0x080035a9
 80035cc:	080035a9 	.word	0x080035a9
 80035d0:	080035a9 	.word	0x080035a9
 80035d4:	080035a9 	.word	0x080035a9
 80035d8:	0800362d 	.word	0x0800362d
 80035dc:	080035a9 	.word	0x080035a9
 80035e0:	080035a9 	.word	0x080035a9
 80035e4:	080035a9 	.word	0x080035a9
 80035e8:	080035a9 	.word	0x080035a9
 80035ec:	08003731 	.word	0x08003731
 80035f0:	08003659 	.word	0x08003659
 80035f4:	080036eb 	.word	0x080036eb
 80035f8:	080035a9 	.word	0x080035a9
 80035fc:	080035a9 	.word	0x080035a9
 8003600:	08003753 	.word	0x08003753
 8003604:	080035a9 	.word	0x080035a9
 8003608:	08003659 	.word	0x08003659
 800360c:	080035a9 	.word	0x080035a9
 8003610:	080035a9 	.word	0x080035a9
 8003614:	080036f3 	.word	0x080036f3
 8003618:	682b      	ldr	r3, [r5, #0]
 800361a:	1d1a      	adds	r2, r3, #4
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	602a      	str	r2, [r5, #0]
 8003620:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003624:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003628:	2301      	movs	r3, #1
 800362a:	e09f      	b.n	800376c <_printf_i+0x1ec>
 800362c:	6820      	ldr	r0, [r4, #0]
 800362e:	682b      	ldr	r3, [r5, #0]
 8003630:	0607      	lsls	r7, r0, #24
 8003632:	f103 0104 	add.w	r1, r3, #4
 8003636:	6029      	str	r1, [r5, #0]
 8003638:	d501      	bpl.n	800363e <_printf_i+0xbe>
 800363a:	681e      	ldr	r6, [r3, #0]
 800363c:	e003      	b.n	8003646 <_printf_i+0xc6>
 800363e:	0646      	lsls	r6, r0, #25
 8003640:	d5fb      	bpl.n	800363a <_printf_i+0xba>
 8003642:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003646:	2e00      	cmp	r6, #0
 8003648:	da03      	bge.n	8003652 <_printf_i+0xd2>
 800364a:	232d      	movs	r3, #45	; 0x2d
 800364c:	4276      	negs	r6, r6
 800364e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003652:	485a      	ldr	r0, [pc, #360]	; (80037bc <_printf_i+0x23c>)
 8003654:	230a      	movs	r3, #10
 8003656:	e012      	b.n	800367e <_printf_i+0xfe>
 8003658:	682b      	ldr	r3, [r5, #0]
 800365a:	6820      	ldr	r0, [r4, #0]
 800365c:	1d19      	adds	r1, r3, #4
 800365e:	6029      	str	r1, [r5, #0]
 8003660:	0605      	lsls	r5, r0, #24
 8003662:	d501      	bpl.n	8003668 <_printf_i+0xe8>
 8003664:	681e      	ldr	r6, [r3, #0]
 8003666:	e002      	b.n	800366e <_printf_i+0xee>
 8003668:	0641      	lsls	r1, r0, #25
 800366a:	d5fb      	bpl.n	8003664 <_printf_i+0xe4>
 800366c:	881e      	ldrh	r6, [r3, #0]
 800366e:	4853      	ldr	r0, [pc, #332]	; (80037bc <_printf_i+0x23c>)
 8003670:	2f6f      	cmp	r7, #111	; 0x6f
 8003672:	bf0c      	ite	eq
 8003674:	2308      	moveq	r3, #8
 8003676:	230a      	movne	r3, #10
 8003678:	2100      	movs	r1, #0
 800367a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800367e:	6865      	ldr	r5, [r4, #4]
 8003680:	60a5      	str	r5, [r4, #8]
 8003682:	2d00      	cmp	r5, #0
 8003684:	bfa2      	ittt	ge
 8003686:	6821      	ldrge	r1, [r4, #0]
 8003688:	f021 0104 	bicge.w	r1, r1, #4
 800368c:	6021      	strge	r1, [r4, #0]
 800368e:	b90e      	cbnz	r6, 8003694 <_printf_i+0x114>
 8003690:	2d00      	cmp	r5, #0
 8003692:	d04b      	beq.n	800372c <_printf_i+0x1ac>
 8003694:	4615      	mov	r5, r2
 8003696:	fbb6 f1f3 	udiv	r1, r6, r3
 800369a:	fb03 6711 	mls	r7, r3, r1, r6
 800369e:	5dc7      	ldrb	r7, [r0, r7]
 80036a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80036a4:	4637      	mov	r7, r6
 80036a6:	42bb      	cmp	r3, r7
 80036a8:	460e      	mov	r6, r1
 80036aa:	d9f4      	bls.n	8003696 <_printf_i+0x116>
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d10b      	bne.n	80036c8 <_printf_i+0x148>
 80036b0:	6823      	ldr	r3, [r4, #0]
 80036b2:	07de      	lsls	r6, r3, #31
 80036b4:	d508      	bpl.n	80036c8 <_printf_i+0x148>
 80036b6:	6923      	ldr	r3, [r4, #16]
 80036b8:	6861      	ldr	r1, [r4, #4]
 80036ba:	4299      	cmp	r1, r3
 80036bc:	bfde      	ittt	le
 80036be:	2330      	movle	r3, #48	; 0x30
 80036c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80036c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80036c8:	1b52      	subs	r2, r2, r5
 80036ca:	6122      	str	r2, [r4, #16]
 80036cc:	f8cd a000 	str.w	sl, [sp]
 80036d0:	464b      	mov	r3, r9
 80036d2:	aa03      	add	r2, sp, #12
 80036d4:	4621      	mov	r1, r4
 80036d6:	4640      	mov	r0, r8
 80036d8:	f7ff fee4 	bl	80034a4 <_printf_common>
 80036dc:	3001      	adds	r0, #1
 80036de:	d14a      	bne.n	8003776 <_printf_i+0x1f6>
 80036e0:	f04f 30ff 	mov.w	r0, #4294967295
 80036e4:	b004      	add	sp, #16
 80036e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036ea:	6823      	ldr	r3, [r4, #0]
 80036ec:	f043 0320 	orr.w	r3, r3, #32
 80036f0:	6023      	str	r3, [r4, #0]
 80036f2:	4833      	ldr	r0, [pc, #204]	; (80037c0 <_printf_i+0x240>)
 80036f4:	2778      	movs	r7, #120	; 0x78
 80036f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80036fa:	6823      	ldr	r3, [r4, #0]
 80036fc:	6829      	ldr	r1, [r5, #0]
 80036fe:	061f      	lsls	r7, r3, #24
 8003700:	f851 6b04 	ldr.w	r6, [r1], #4
 8003704:	d402      	bmi.n	800370c <_printf_i+0x18c>
 8003706:	065f      	lsls	r7, r3, #25
 8003708:	bf48      	it	mi
 800370a:	b2b6      	uxthmi	r6, r6
 800370c:	07df      	lsls	r7, r3, #31
 800370e:	bf48      	it	mi
 8003710:	f043 0320 	orrmi.w	r3, r3, #32
 8003714:	6029      	str	r1, [r5, #0]
 8003716:	bf48      	it	mi
 8003718:	6023      	strmi	r3, [r4, #0]
 800371a:	b91e      	cbnz	r6, 8003724 <_printf_i+0x1a4>
 800371c:	6823      	ldr	r3, [r4, #0]
 800371e:	f023 0320 	bic.w	r3, r3, #32
 8003722:	6023      	str	r3, [r4, #0]
 8003724:	2310      	movs	r3, #16
 8003726:	e7a7      	b.n	8003678 <_printf_i+0xf8>
 8003728:	4824      	ldr	r0, [pc, #144]	; (80037bc <_printf_i+0x23c>)
 800372a:	e7e4      	b.n	80036f6 <_printf_i+0x176>
 800372c:	4615      	mov	r5, r2
 800372e:	e7bd      	b.n	80036ac <_printf_i+0x12c>
 8003730:	682b      	ldr	r3, [r5, #0]
 8003732:	6826      	ldr	r6, [r4, #0]
 8003734:	6961      	ldr	r1, [r4, #20]
 8003736:	1d18      	adds	r0, r3, #4
 8003738:	6028      	str	r0, [r5, #0]
 800373a:	0635      	lsls	r5, r6, #24
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	d501      	bpl.n	8003744 <_printf_i+0x1c4>
 8003740:	6019      	str	r1, [r3, #0]
 8003742:	e002      	b.n	800374a <_printf_i+0x1ca>
 8003744:	0670      	lsls	r0, r6, #25
 8003746:	d5fb      	bpl.n	8003740 <_printf_i+0x1c0>
 8003748:	8019      	strh	r1, [r3, #0]
 800374a:	2300      	movs	r3, #0
 800374c:	6123      	str	r3, [r4, #16]
 800374e:	4615      	mov	r5, r2
 8003750:	e7bc      	b.n	80036cc <_printf_i+0x14c>
 8003752:	682b      	ldr	r3, [r5, #0]
 8003754:	1d1a      	adds	r2, r3, #4
 8003756:	602a      	str	r2, [r5, #0]
 8003758:	681d      	ldr	r5, [r3, #0]
 800375a:	6862      	ldr	r2, [r4, #4]
 800375c:	2100      	movs	r1, #0
 800375e:	4628      	mov	r0, r5
 8003760:	f7fc fd56 	bl	8000210 <memchr>
 8003764:	b108      	cbz	r0, 800376a <_printf_i+0x1ea>
 8003766:	1b40      	subs	r0, r0, r5
 8003768:	6060      	str	r0, [r4, #4]
 800376a:	6863      	ldr	r3, [r4, #4]
 800376c:	6123      	str	r3, [r4, #16]
 800376e:	2300      	movs	r3, #0
 8003770:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003774:	e7aa      	b.n	80036cc <_printf_i+0x14c>
 8003776:	6923      	ldr	r3, [r4, #16]
 8003778:	462a      	mov	r2, r5
 800377a:	4649      	mov	r1, r9
 800377c:	4640      	mov	r0, r8
 800377e:	47d0      	blx	sl
 8003780:	3001      	adds	r0, #1
 8003782:	d0ad      	beq.n	80036e0 <_printf_i+0x160>
 8003784:	6823      	ldr	r3, [r4, #0]
 8003786:	079b      	lsls	r3, r3, #30
 8003788:	d413      	bmi.n	80037b2 <_printf_i+0x232>
 800378a:	68e0      	ldr	r0, [r4, #12]
 800378c:	9b03      	ldr	r3, [sp, #12]
 800378e:	4298      	cmp	r0, r3
 8003790:	bfb8      	it	lt
 8003792:	4618      	movlt	r0, r3
 8003794:	e7a6      	b.n	80036e4 <_printf_i+0x164>
 8003796:	2301      	movs	r3, #1
 8003798:	4632      	mov	r2, r6
 800379a:	4649      	mov	r1, r9
 800379c:	4640      	mov	r0, r8
 800379e:	47d0      	blx	sl
 80037a0:	3001      	adds	r0, #1
 80037a2:	d09d      	beq.n	80036e0 <_printf_i+0x160>
 80037a4:	3501      	adds	r5, #1
 80037a6:	68e3      	ldr	r3, [r4, #12]
 80037a8:	9903      	ldr	r1, [sp, #12]
 80037aa:	1a5b      	subs	r3, r3, r1
 80037ac:	42ab      	cmp	r3, r5
 80037ae:	dcf2      	bgt.n	8003796 <_printf_i+0x216>
 80037b0:	e7eb      	b.n	800378a <_printf_i+0x20a>
 80037b2:	2500      	movs	r5, #0
 80037b4:	f104 0619 	add.w	r6, r4, #25
 80037b8:	e7f5      	b.n	80037a6 <_printf_i+0x226>
 80037ba:	bf00      	nop
 80037bc:	080039e2 	.word	0x080039e2
 80037c0:	080039f3 	.word	0x080039f3

080037c4 <memmove>:
 80037c4:	4288      	cmp	r0, r1
 80037c6:	b510      	push	{r4, lr}
 80037c8:	eb01 0402 	add.w	r4, r1, r2
 80037cc:	d902      	bls.n	80037d4 <memmove+0x10>
 80037ce:	4284      	cmp	r4, r0
 80037d0:	4623      	mov	r3, r4
 80037d2:	d807      	bhi.n	80037e4 <memmove+0x20>
 80037d4:	1e43      	subs	r3, r0, #1
 80037d6:	42a1      	cmp	r1, r4
 80037d8:	d008      	beq.n	80037ec <memmove+0x28>
 80037da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80037de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80037e2:	e7f8      	b.n	80037d6 <memmove+0x12>
 80037e4:	4402      	add	r2, r0
 80037e6:	4601      	mov	r1, r0
 80037e8:	428a      	cmp	r2, r1
 80037ea:	d100      	bne.n	80037ee <memmove+0x2a>
 80037ec:	bd10      	pop	{r4, pc}
 80037ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80037f6:	e7f7      	b.n	80037e8 <memmove+0x24>

080037f8 <_sbrk_r>:
 80037f8:	b538      	push	{r3, r4, r5, lr}
 80037fa:	4d06      	ldr	r5, [pc, #24]	; (8003814 <_sbrk_r+0x1c>)
 80037fc:	2300      	movs	r3, #0
 80037fe:	4604      	mov	r4, r0
 8003800:	4608      	mov	r0, r1
 8003802:	602b      	str	r3, [r5, #0]
 8003804:	f7fd f9e2 	bl	8000bcc <_sbrk>
 8003808:	1c43      	adds	r3, r0, #1
 800380a:	d102      	bne.n	8003812 <_sbrk_r+0x1a>
 800380c:	682b      	ldr	r3, [r5, #0]
 800380e:	b103      	cbz	r3, 8003812 <_sbrk_r+0x1a>
 8003810:	6023      	str	r3, [r4, #0]
 8003812:	bd38      	pop	{r3, r4, r5, pc}
 8003814:	200002ac 	.word	0x200002ac

08003818 <memcpy>:
 8003818:	440a      	add	r2, r1
 800381a:	4291      	cmp	r1, r2
 800381c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003820:	d100      	bne.n	8003824 <memcpy+0xc>
 8003822:	4770      	bx	lr
 8003824:	b510      	push	{r4, lr}
 8003826:	f811 4b01 	ldrb.w	r4, [r1], #1
 800382a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800382e:	4291      	cmp	r1, r2
 8003830:	d1f9      	bne.n	8003826 <memcpy+0xe>
 8003832:	bd10      	pop	{r4, pc}

08003834 <_realloc_r>:
 8003834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003838:	4680      	mov	r8, r0
 800383a:	4614      	mov	r4, r2
 800383c:	460e      	mov	r6, r1
 800383e:	b921      	cbnz	r1, 800384a <_realloc_r+0x16>
 8003840:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003844:	4611      	mov	r1, r2
 8003846:	f7ff bc49 	b.w	80030dc <_malloc_r>
 800384a:	b92a      	cbnz	r2, 8003858 <_realloc_r+0x24>
 800384c:	f7ff fbda 	bl	8003004 <_free_r>
 8003850:	4625      	mov	r5, r4
 8003852:	4628      	mov	r0, r5
 8003854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003858:	f000 f81b 	bl	8003892 <_malloc_usable_size_r>
 800385c:	4284      	cmp	r4, r0
 800385e:	4607      	mov	r7, r0
 8003860:	d802      	bhi.n	8003868 <_realloc_r+0x34>
 8003862:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003866:	d812      	bhi.n	800388e <_realloc_r+0x5a>
 8003868:	4621      	mov	r1, r4
 800386a:	4640      	mov	r0, r8
 800386c:	f7ff fc36 	bl	80030dc <_malloc_r>
 8003870:	4605      	mov	r5, r0
 8003872:	2800      	cmp	r0, #0
 8003874:	d0ed      	beq.n	8003852 <_realloc_r+0x1e>
 8003876:	42bc      	cmp	r4, r7
 8003878:	4622      	mov	r2, r4
 800387a:	4631      	mov	r1, r6
 800387c:	bf28      	it	cs
 800387e:	463a      	movcs	r2, r7
 8003880:	f7ff ffca 	bl	8003818 <memcpy>
 8003884:	4631      	mov	r1, r6
 8003886:	4640      	mov	r0, r8
 8003888:	f7ff fbbc 	bl	8003004 <_free_r>
 800388c:	e7e1      	b.n	8003852 <_realloc_r+0x1e>
 800388e:	4635      	mov	r5, r6
 8003890:	e7df      	b.n	8003852 <_realloc_r+0x1e>

08003892 <_malloc_usable_size_r>:
 8003892:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003896:	1f18      	subs	r0, r3, #4
 8003898:	2b00      	cmp	r3, #0
 800389a:	bfbc      	itt	lt
 800389c:	580b      	ldrlt	r3, [r1, r0]
 800389e:	18c0      	addlt	r0, r0, r3
 80038a0:	4770      	bx	lr
	...

080038a4 <_init>:
 80038a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038a6:	bf00      	nop
 80038a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038aa:	bc08      	pop	{r3}
 80038ac:	469e      	mov	lr, r3
 80038ae:	4770      	bx	lr

080038b0 <_fini>:
 80038b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038b2:	bf00      	nop
 80038b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038b6:	bc08      	pop	{r3}
 80038b8:	469e      	mov	lr, r3
 80038ba:	4770      	bx	lr
