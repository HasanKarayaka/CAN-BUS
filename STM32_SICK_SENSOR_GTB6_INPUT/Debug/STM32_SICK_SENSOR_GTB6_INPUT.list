
STM32_SICK_SENSOR_GTB6_INPUT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ff8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080021bc  080021bc  000121bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021cc  080021cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080021cc  080021cc  000121cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080021d4  080021d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021d4  080021d4  000121d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021d8  080021d8  000121d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080021dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  2000000c  080021e8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  080021e8  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005b7f  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000013f8  00000000  00000000  00025bfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005c0  00000000  00000000  00026ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000043a  00000000  00000000  000275b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020272  00000000  00000000  000279f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007547  00000000  00000000  00047c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c444b  00000000  00000000  0004f1ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001628  00000000  00000000  001135f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00114c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080021a4 	.word	0x080021a4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080021a4 	.word	0x080021a4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fb36 	bl	8000b74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f894 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f982 	bl	8000814 <MX_GPIO_Init>
  MX_CAN2_Init();
 8000510:	f000 f932 	bl	8000778 <MX_CAN2_Init>
  MX_CAN1_Init();
 8000514:	f000 f8fa 	bl	800070c <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan2);
 8000518:	483f      	ldr	r0, [pc, #252]	; (8000618 <main+0x118>)
 800051a:	f000 fc98 	bl	8000e4e <HAL_CAN_Start>
  HAL_CAN_Start(&hcan1);
 800051e:	483f      	ldr	r0, [pc, #252]	; (800061c <main+0x11c>)
 8000520:	f000 fc95 	bl	8000e4e <HAL_CAN_Start>

  TxTransmitter.StdId = 0x601;
 8000524:	4b3e      	ldr	r3, [pc, #248]	; (8000620 <main+0x120>)
 8000526:	f240 6201 	movw	r2, #1537	; 0x601
 800052a:	601a      	str	r2, [r3, #0]
  TxTransmitter.DLC = 8;
 800052c:	4b3c      	ldr	r3, [pc, #240]	; (8000620 <main+0x120>)
 800052e:	2208      	movs	r2, #8
 8000530:	611a      	str	r2, [r3, #16]
  TxTransmitter.IDE = CAN_ID_STD;
 8000532:	4b3b      	ldr	r3, [pc, #236]	; (8000620 <main+0x120>)
 8000534:	2200      	movs	r2, #0
 8000536:	609a      	str	r2, [r3, #8]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  Giden_Data[0] = 40;
 8000538:	4b3a      	ldr	r3, [pc, #232]	; (8000624 <main+0x124>)
 800053a:	2228      	movs	r2, #40	; 0x28
 800053c:	701a      	strb	r2, [r3, #0]
	  Giden_Data[1] = 01;
 800053e:	4b39      	ldr	r3, [pc, #228]	; (8000624 <main+0x124>)
 8000540:	2201      	movs	r2, #1
 8000542:	705a      	strb	r2, [r3, #1]
	  Giden_Data[2] = 65;
 8000544:	4b37      	ldr	r3, [pc, #220]	; (8000624 <main+0x124>)
 8000546:	2241      	movs	r2, #65	; 0x41
 8000548:	709a      	strb	r2, [r3, #2]
	  Giden_Data[3] = 01;
 800054a:	4b36      	ldr	r3, [pc, #216]	; (8000624 <main+0x124>)
 800054c:	2201      	movs	r2, #1
 800054e:	70da      	strb	r2, [r3, #3]
	  Giden_Data[4] = 00;
 8000550:	4b34      	ldr	r3, [pc, #208]	; (8000624 <main+0x124>)
 8000552:	2200      	movs	r2, #0
 8000554:	711a      	strb	r2, [r3, #4]
	  Giden_Data[5] = 00;
 8000556:	4b33      	ldr	r3, [pc, #204]	; (8000624 <main+0x124>)
 8000558:	2200      	movs	r2, #0
 800055a:	715a      	strb	r2, [r3, #5]
	  Giden_Data[6] = 00;
 800055c:	4b31      	ldr	r3, [pc, #196]	; (8000624 <main+0x124>)
 800055e:	2200      	movs	r2, #0
 8000560:	719a      	strb	r2, [r3, #6]
	  Giden_Data[7] = 00;
 8000562:	4b30      	ldr	r3, [pc, #192]	; (8000624 <main+0x124>)
 8000564:	2200      	movs	r2, #0
 8000566:	71da      	strb	r2, [r3, #7]

	  HAL_CAN_AddTxMessage(&hcan1, &TxTransmitter, Giden_Data, &TxMailbox);
 8000568:	4b2f      	ldr	r3, [pc, #188]	; (8000628 <main+0x128>)
 800056a:	4a2e      	ldr	r2, [pc, #184]	; (8000624 <main+0x124>)
 800056c:	492c      	ldr	r1, [pc, #176]	; (8000620 <main+0x120>)
 800056e:	482b      	ldr	r0, [pc, #172]	; (800061c <main+0x11c>)
 8000570:	f000 fcb1 	bl	8000ed6 <HAL_CAN_AddTxMessage>


	  if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13) == GPIO_PIN_SET)
 8000574:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000578:	482c      	ldr	r0, [pc, #176]	; (800062c <main+0x12c>)
 800057a:	f001 f801 	bl	8001580 <HAL_GPIO_ReadPin>
 800057e:	4603      	mov	r3, r0
 8000580:	2b01      	cmp	r3, #1
 8000582:	d124      	bne.n	80005ce <main+0xce>
	 		  {
	 		       HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14,GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800058a:	4829      	ldr	r0, [pc, #164]	; (8000630 <main+0x130>)
 800058c:	f001 f810 	bl	80015b0 <HAL_GPIO_WritePin>

	 			  Giden_Data[0] = 40;
 8000590:	4b24      	ldr	r3, [pc, #144]	; (8000624 <main+0x124>)
 8000592:	2228      	movs	r2, #40	; 0x28
 8000594:	701a      	strb	r2, [r3, #0]
	 			  Giden_Data[1] = 01;
 8000596:	4b23      	ldr	r3, [pc, #140]	; (8000624 <main+0x124>)
 8000598:	2201      	movs	r2, #1
 800059a:	705a      	strb	r2, [r3, #1]
	 			  Giden_Data[2] = 65;
 800059c:	4b21      	ldr	r3, [pc, #132]	; (8000624 <main+0x124>)
 800059e:	2241      	movs	r2, #65	; 0x41
 80005a0:	709a      	strb	r2, [r3, #2]
	 			  Giden_Data[3] = 01;
 80005a2:	4b20      	ldr	r3, [pc, #128]	; (8000624 <main+0x124>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	70da      	strb	r2, [r3, #3]
	 			  Giden_Data[4] = 00;
 80005a8:	4b1e      	ldr	r3, [pc, #120]	; (8000624 <main+0x124>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	711a      	strb	r2, [r3, #4]
	 			  Giden_Data[5] = 00;
 80005ae:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <main+0x124>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	715a      	strb	r2, [r3, #5]
	 			  Giden_Data[6] = 00;
 80005b4:	4b1b      	ldr	r3, [pc, #108]	; (8000624 <main+0x124>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	719a      	strb	r2, [r3, #6]
	 			  Giden_Data[7] = 00;
 80005ba:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <main+0x124>)
 80005bc:	2200      	movs	r2, #0
 80005be:	71da      	strb	r2, [r3, #7]
	 			  HAL_CAN_AddTxMessage(&hcan2, &TxTransmitter, Giden_Data, &TxMailbox);
 80005c0:	4b19      	ldr	r3, [pc, #100]	; (8000628 <main+0x128>)
 80005c2:	4a18      	ldr	r2, [pc, #96]	; (8000624 <main+0x124>)
 80005c4:	4916      	ldr	r1, [pc, #88]	; (8000620 <main+0x120>)
 80005c6:	4814      	ldr	r0, [pc, #80]	; (8000618 <main+0x118>)
 80005c8:	f000 fc85 	bl	8000ed6 <HAL_CAN_AddTxMessage>
 80005cc:	e7b4      	b.n	8000538 <main+0x38>

	 	      }
	 	  else{
	 		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14,GPIO_PIN_SET);
 80005ce:	2201      	movs	r2, #1
 80005d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005d4:	4816      	ldr	r0, [pc, #88]	; (8000630 <main+0x130>)
 80005d6:	f000 ffeb 	bl	80015b0 <HAL_GPIO_WritePin>

 			  Giden_Data[0] = 40;
 80005da:	4b12      	ldr	r3, [pc, #72]	; (8000624 <main+0x124>)
 80005dc:	2228      	movs	r2, #40	; 0x28
 80005de:	701a      	strb	r2, [r3, #0]
 			  Giden_Data[1] = 01;
 80005e0:	4b10      	ldr	r3, [pc, #64]	; (8000624 <main+0x124>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	705a      	strb	r2, [r3, #1]
 			  Giden_Data[2] = 65;
 80005e6:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <main+0x124>)
 80005e8:	2241      	movs	r2, #65	; 0x41
 80005ea:	709a      	strb	r2, [r3, #2]
 			  Giden_Data[3] = 01;
 80005ec:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <main+0x124>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	70da      	strb	r2, [r3, #3]
 			  Giden_Data[4] = 02;
 80005f2:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <main+0x124>)
 80005f4:	2202      	movs	r2, #2
 80005f6:	711a      	strb	r2, [r3, #4]
 			  Giden_Data[5] = 00;
 80005f8:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <main+0x124>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	715a      	strb	r2, [r3, #5]
 			  Giden_Data[6] = 00;
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <main+0x124>)
 8000600:	2200      	movs	r2, #0
 8000602:	719a      	strb	r2, [r3, #6]
 			  Giden_Data[7] = 00;
 8000604:	4b07      	ldr	r3, [pc, #28]	; (8000624 <main+0x124>)
 8000606:	2200      	movs	r2, #0
 8000608:	71da      	strb	r2, [r3, #7]
 			  HAL_CAN_AddTxMessage(&hcan2, &TxTransmitter, Giden_Data, &TxMailbox);
 800060a:	4b07      	ldr	r3, [pc, #28]	; (8000628 <main+0x128>)
 800060c:	4a05      	ldr	r2, [pc, #20]	; (8000624 <main+0x124>)
 800060e:	4904      	ldr	r1, [pc, #16]	; (8000620 <main+0x120>)
 8000610:	4801      	ldr	r0, [pc, #4]	; (8000618 <main+0x118>)
 8000612:	f000 fc60 	bl	8000ed6 <HAL_CAN_AddTxMessage>
	  Giden_Data[0] = 40;
 8000616:	e78f      	b.n	8000538 <main+0x38>
 8000618:	20000050 	.word	0x20000050
 800061c:	20000028 	.word	0x20000028
 8000620:	20000078 	.word	0x20000078
 8000624:	20000090 	.word	0x20000090
 8000628:	20000098 	.word	0x20000098
 800062c:	40021000 	.word	0x40021000
 8000630:	40020800 	.word	0x40020800

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	; 0x50
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 031c 	add.w	r3, r7, #28
 800063e:	2234      	movs	r2, #52	; 0x34
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f001 fd82 	bl	800214c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 0308 	add.w	r3, r7, #8
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	4b29      	ldr	r3, [pc, #164]	; (8000704 <SystemClock_Config+0xd0>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	4a28      	ldr	r2, [pc, #160]	; (8000704 <SystemClock_Config+0xd0>)
 8000662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000666:	6413      	str	r3, [r2, #64]	; 0x40
 8000668:	4b26      	ldr	r3, [pc, #152]	; (8000704 <SystemClock_Config+0xd0>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000674:	2300      	movs	r3, #0
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	4b23      	ldr	r3, [pc, #140]	; (8000708 <SystemClock_Config+0xd4>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a22      	ldr	r2, [pc, #136]	; (8000708 <SystemClock_Config+0xd4>)
 800067e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	4b20      	ldr	r3, [pc, #128]	; (8000708 <SystemClock_Config+0xd4>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800068c:	603b      	str	r3, [r7, #0]
 800068e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000690:	2301      	movs	r3, #1
 8000692:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000694:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000698:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069a:	2302      	movs	r3, #2
 800069c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a4:	2304      	movs	r3, #4
 80006a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006a8:	23a8      	movs	r3, #168	; 0xa8
 80006aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 031c 	add.w	r3, r7, #28
 80006bc:	4618      	mov	r0, r3
 80006be:	f001 faa7 	bl	8001c10 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006c8:	f000 f922 	bl	8000910 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2302      	movs	r3, #2
 80006d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e4:	f107 0308 	add.w	r3, r7, #8
 80006e8:	2105      	movs	r1, #5
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 ff7a 	bl	80015e4 <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006f6:	f000 f90b 	bl	8000910 <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3750      	adds	r7, #80	; 0x50
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000710:	4b17      	ldr	r3, [pc, #92]	; (8000770 <MX_CAN1_Init+0x64>)
 8000712:	4a18      	ldr	r2, [pc, #96]	; (8000774 <MX_CAN1_Init+0x68>)
 8000714:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 8000716:	4b16      	ldr	r3, [pc, #88]	; (8000770 <MX_CAN1_Init+0x64>)
 8000718:	2215      	movs	r2, #21
 800071a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_CAN1_Init+0x64>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000722:	4b13      	ldr	r3, [pc, #76]	; (8000770 <MX_CAN1_Init+0x64>)
 8000724:	2200      	movs	r2, #0
 8000726:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_CAN1_Init+0x64>)
 800072a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800072e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_CAN1_Init+0x64>)
 8000732:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000736:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000738:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <MX_CAN1_Init+0x64>)
 800073a:	2200      	movs	r2, #0
 800073c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_CAN1_Init+0x64>)
 8000740:	2200      	movs	r2, #0
 8000742:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000744:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <MX_CAN1_Init+0x64>)
 8000746:	2200      	movs	r2, #0
 8000748:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_CAN1_Init+0x64>)
 800074c:	2200      	movs	r2, #0
 800074e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <MX_CAN1_Init+0x64>)
 8000752:	2200      	movs	r2, #0
 8000754:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_CAN1_Init+0x64>)
 8000758:	2200      	movs	r2, #0
 800075a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800075c:	4804      	ldr	r0, [pc, #16]	; (8000770 <MX_CAN1_Init+0x64>)
 800075e:	f000 fa7b 	bl	8000c58 <HAL_CAN_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000768:	f000 f8d2 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000028 	.word	0x20000028
 8000774:	40006400 	.word	0x40006400

08000778 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	; 0x28
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800077e:	4b23      	ldr	r3, [pc, #140]	; (800080c <MX_CAN2_Init+0x94>)
 8000780:	4a23      	ldr	r2, [pc, #140]	; (8000810 <MX_CAN2_Init+0x98>)
 8000782:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 12;
 8000784:	4b21      	ldr	r3, [pc, #132]	; (800080c <MX_CAN2_Init+0x94>)
 8000786:	220c      	movs	r2, #12
 8000788:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800078a:	4b20      	ldr	r3, [pc, #128]	; (800080c <MX_CAN2_Init+0x94>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000790:	4b1e      	ldr	r3, [pc, #120]	; (800080c <MX_CAN2_Init+0x94>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000796:	4b1d      	ldr	r3, [pc, #116]	; (800080c <MX_CAN2_Init+0x94>)
 8000798:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 800079c:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 800079e:	4b1b      	ldr	r3, [pc, #108]	; (800080c <MX_CAN2_Init+0x94>)
 80007a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80007a4:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80007a6:	4b19      	ldr	r3, [pc, #100]	; (800080c <MX_CAN2_Init+0x94>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80007ac:	4b17      	ldr	r3, [pc, #92]	; (800080c <MX_CAN2_Init+0x94>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80007b2:	4b16      	ldr	r3, [pc, #88]	; (800080c <MX_CAN2_Init+0x94>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80007b8:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_CAN2_Init+0x94>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80007be:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_CAN2_Init+0x94>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_CAN2_Init+0x94>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80007ca:	4810      	ldr	r0, [pc, #64]	; (800080c <MX_CAN2_Init+0x94>)
 80007cc:	f000 fa44 	bl	8000c58 <HAL_CAN_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 80007d6:	f000 f89b 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  CAN_FilterTypeDef can_filter_yapi;

  can_filter_yapi.FilterActivation = CAN_FILTER_ENABLE;
 80007da:	2301      	movs	r3, #1
 80007dc:	623b      	str	r3, [r7, #32]
  can_filter_yapi.FilterBank = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
  can_filter_yapi.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
  can_filter_yapi.FilterIdHigh = 0x0000;
 80007e6:	2300      	movs	r3, #0
 80007e8:	603b      	str	r3, [r7, #0]
  can_filter_yapi.FilterIdLow = 0x0000;
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
  can_filter_yapi.FilterMaskIdHigh = 0x0000;
 80007ee:	2300      	movs	r3, #0
 80007f0:	60bb      	str	r3, [r7, #8]
  can_filter_yapi.FilterMaskIdLow = 0x0000;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
  can_filter_yapi.FilterMode = CAN_FILTERMODE_IDMASK;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61bb      	str	r3, [r7, #24]
  can_filter_yapi.FilterScale = CAN_FILTERSCALE_16BIT;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
  can_filter_yapi.SlaveStartFilterBank = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  /* USER CODE END CAN2_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	3728      	adds	r7, #40	; 0x28
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000050 	.word	0x20000050
 8000810:	40006800 	.word	0x40006800

08000814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	; 0x28
 8000818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
 800082e:	4b35      	ldr	r3, [pc, #212]	; (8000904 <MX_GPIO_Init+0xf0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a34      	ldr	r2, [pc, #208]	; (8000904 <MX_GPIO_Init+0xf0>)
 8000834:	f043 0304 	orr.w	r3, r3, #4
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b32      	ldr	r3, [pc, #200]	; (8000904 <MX_GPIO_Init+0xf0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0304 	and.w	r3, r3, #4
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	4b2e      	ldr	r3, [pc, #184]	; (8000904 <MX_GPIO_Init+0xf0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a2d      	ldr	r2, [pc, #180]	; (8000904 <MX_GPIO_Init+0xf0>)
 8000850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b2b      	ldr	r3, [pc, #172]	; (8000904 <MX_GPIO_Init+0xf0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	4b27      	ldr	r3, [pc, #156]	; (8000904 <MX_GPIO_Init+0xf0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a26      	ldr	r2, [pc, #152]	; (8000904 <MX_GPIO_Init+0xf0>)
 800086c:	f043 0310 	orr.w	r3, r3, #16
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b24      	ldr	r3, [pc, #144]	; (8000904 <MX_GPIO_Init+0xf0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0310 	and.w	r3, r3, #16
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	4b20      	ldr	r3, [pc, #128]	; (8000904 <MX_GPIO_Init+0xf0>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a1f      	ldr	r2, [pc, #124]	; (8000904 <MX_GPIO_Init+0xf0>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b1d      	ldr	r3, [pc, #116]	; (8000904 <MX_GPIO_Init+0xf0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	603b      	str	r3, [r7, #0]
 800089e:	4b19      	ldr	r3, [pc, #100]	; (8000904 <MX_GPIO_Init+0xf0>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a18      	ldr	r2, [pc, #96]	; (8000904 <MX_GPIO_Init+0xf0>)
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b16      	ldr	r3, [pc, #88]	; (8000904 <MX_GPIO_Init+0xf0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008bc:	4812      	ldr	r0, [pc, #72]	; (8000908 <MX_GPIO_Init+0xf4>)
 80008be:	f000 fe77 	bl	80015b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80008c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4619      	mov	r1, r3
 80008da:	480b      	ldr	r0, [pc, #44]	; (8000908 <MX_GPIO_Init+0xf4>)
 80008dc:	f000 fcbc 	bl	8001258 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	4619      	mov	r1, r3
 80008f4:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_GPIO_Init+0xf8>)
 80008f6:	f000 fcaf 	bl	8001258 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008fa:	bf00      	nop
 80008fc:	3728      	adds	r7, #40	; 0x28
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800
 8000908:	40020800 	.word	0x40020800
 800090c:	40021000 	.word	0x40021000

08000910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000914:	b672      	cpsid	i
}
 8000916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000918:	e7fe      	b.n	8000918 <Error_Handler+0x8>
	...

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <HAL_MspInit+0x4c>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092a:	4a0f      	ldr	r2, [pc, #60]	; (8000968 <HAL_MspInit+0x4c>)
 800092c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000930:	6453      	str	r3, [r2, #68]	; 0x44
 8000932:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <HAL_MspInit+0x4c>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <HAL_MspInit+0x4c>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	4a08      	ldr	r2, [pc, #32]	; (8000968 <HAL_MspInit+0x4c>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094c:	6413      	str	r3, [r2, #64]	; 0x40
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <HAL_MspInit+0x4c>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800

0800096c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08c      	sub	sp, #48	; 0x30
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a42      	ldr	r2, [pc, #264]	; (8000a94 <HAL_CAN_MspInit+0x128>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d136      	bne.n	80009fc <HAL_CAN_MspInit+0x90>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800098e:	4b42      	ldr	r3, [pc, #264]	; (8000a98 <HAL_CAN_MspInit+0x12c>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	3301      	adds	r3, #1
 8000994:	4a40      	ldr	r2, [pc, #256]	; (8000a98 <HAL_CAN_MspInit+0x12c>)
 8000996:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000998:	4b3f      	ldr	r3, [pc, #252]	; (8000a98 <HAL_CAN_MspInit+0x12c>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d10d      	bne.n	80009bc <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80009a0:	2300      	movs	r3, #0
 80009a2:	61bb      	str	r3, [r7, #24]
 80009a4:	4b3d      	ldr	r3, [pc, #244]	; (8000a9c <HAL_CAN_MspInit+0x130>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a8:	4a3c      	ldr	r2, [pc, #240]	; (8000a9c <HAL_CAN_MspInit+0x130>)
 80009aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009ae:	6413      	str	r3, [r2, #64]	; 0x40
 80009b0:	4b3a      	ldr	r3, [pc, #232]	; (8000a9c <HAL_CAN_MspInit+0x130>)
 80009b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009b8:	61bb      	str	r3, [r7, #24]
 80009ba:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]
 80009c0:	4b36      	ldr	r3, [pc, #216]	; (8000a9c <HAL_CAN_MspInit+0x130>)
 80009c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c4:	4a35      	ldr	r2, [pc, #212]	; (8000a9c <HAL_CAN_MspInit+0x130>)
 80009c6:	f043 0302 	orr.w	r3, r3, #2
 80009ca:	6313      	str	r3, [r2, #48]	; 0x30
 80009cc:	4b33      	ldr	r3, [pc, #204]	; (8000a9c <HAL_CAN_MspInit+0x130>)
 80009ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d0:	f003 0302 	and.w	r3, r3, #2
 80009d4:	617b      	str	r3, [r7, #20]
 80009d6:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e6:	2303      	movs	r3, #3
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80009ea:	2309      	movs	r3, #9
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	482a      	ldr	r0, [pc, #168]	; (8000aa0 <HAL_CAN_MspInit+0x134>)
 80009f6:	f000 fc2f 	bl	8001258 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80009fa:	e047      	b.n	8000a8c <HAL_CAN_MspInit+0x120>
  else if(hcan->Instance==CAN2)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a28      	ldr	r2, [pc, #160]	; (8000aa4 <HAL_CAN_MspInit+0x138>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d142      	bne.n	8000a8c <HAL_CAN_MspInit+0x120>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	4b24      	ldr	r3, [pc, #144]	; (8000a9c <HAL_CAN_MspInit+0x130>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	4a23      	ldr	r2, [pc, #140]	; (8000a9c <HAL_CAN_MspInit+0x130>)
 8000a10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a14:	6413      	str	r3, [r2, #64]	; 0x40
 8000a16:	4b21      	ldr	r3, [pc, #132]	; (8000a9c <HAL_CAN_MspInit+0x130>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000a22:	4b1d      	ldr	r3, [pc, #116]	; (8000a98 <HAL_CAN_MspInit+0x12c>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	3301      	adds	r3, #1
 8000a28:	4a1b      	ldr	r2, [pc, #108]	; (8000a98 <HAL_CAN_MspInit+0x12c>)
 8000a2a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000a2c:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <HAL_CAN_MspInit+0x12c>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d10d      	bne.n	8000a50 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <HAL_CAN_MspInit+0x130>)
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	4a17      	ldr	r2, [pc, #92]	; (8000a9c <HAL_CAN_MspInit+0x130>)
 8000a3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a42:	6413      	str	r3, [r2, #64]	; 0x40
 8000a44:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <HAL_CAN_MspInit+0x130>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a50:	2300      	movs	r3, #0
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <HAL_CAN_MspInit+0x130>)
 8000a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a58:	4a10      	ldr	r2, [pc, #64]	; (8000a9c <HAL_CAN_MspInit+0x130>)
 8000a5a:	f043 0302 	orr.w	r3, r3, #2
 8000a5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a60:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <HAL_CAN_MspInit+0x130>)
 8000a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a64:	f003 0302 	and.w	r3, r3, #2
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000a6c:	2360      	movs	r3, #96	; 0x60
 8000a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a70:	2302      	movs	r3, #2
 8000a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000a7c:	2309      	movs	r3, #9
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4619      	mov	r1, r3
 8000a86:	4806      	ldr	r0, [pc, #24]	; (8000aa0 <HAL_CAN_MspInit+0x134>)
 8000a88:	f000 fbe6 	bl	8001258 <HAL_GPIO_Init>
}
 8000a8c:	bf00      	nop
 8000a8e:	3730      	adds	r7, #48	; 0x30
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40006400 	.word	0x40006400
 8000a98:	2000009c 	.word	0x2000009c
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40020400 	.word	0x40020400
 8000aa4:	40006800 	.word	0x40006800

08000aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <NMI_Handler+0x4>

08000aae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <HardFault_Handler+0x4>

08000ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <MemManage_Handler+0x4>

08000aba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000abe:	e7fe      	b.n	8000abe <BusFault_Handler+0x4>

08000ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <UsageFault_Handler+0x4>

08000ac6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af4:	f000 f890 	bl	8000c18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}

08000afc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <SystemInit+0x20>)
 8000b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b06:	4a05      	ldr	r2, [pc, #20]	; (8000b1c <SystemInit+0x20>)
 8000b08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b24:	480d      	ldr	r0, [pc, #52]	; (8000b5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b26:	490e      	ldr	r1, [pc, #56]	; (8000b60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b28:	4a0e      	ldr	r2, [pc, #56]	; (8000b64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b2c:	e002      	b.n	8000b34 <LoopCopyDataInit>

08000b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b32:	3304      	adds	r3, #4

08000b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b38:	d3f9      	bcc.n	8000b2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b3a:	4a0b      	ldr	r2, [pc, #44]	; (8000b68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b3c:	4c0b      	ldr	r4, [pc, #44]	; (8000b6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b40:	e001      	b.n	8000b46 <LoopFillZerobss>

08000b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b44:	3204      	adds	r2, #4

08000b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b48:	d3fb      	bcc.n	8000b42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b4a:	f7ff ffd7 	bl	8000afc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b4e:	f001 fb05 	bl	800215c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b52:	f7ff fcd5 	bl	8000500 <main>
  bx  lr    
 8000b56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b60:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b64:	080021dc 	.word	0x080021dc
  ldr r2, =_sbss
 8000b68:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b6c:	200000a4 	.word	0x200000a4

08000b70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b70:	e7fe      	b.n	8000b70 <ADC_IRQHandler>
	...

08000b74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b78:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <HAL_Init+0x40>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a0d      	ldr	r2, [pc, #52]	; (8000bb4 <HAL_Init+0x40>)
 8000b7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b84:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <HAL_Init+0x40>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <HAL_Init+0x40>)
 8000b8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <HAL_Init+0x40>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a07      	ldr	r2, [pc, #28]	; (8000bb4 <HAL_Init+0x40>)
 8000b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b9c:	2003      	movs	r0, #3
 8000b9e:	f000 fb27 	bl	80011f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ba2:	200f      	movs	r0, #15
 8000ba4:	f000 f808 	bl	8000bb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba8:	f7ff feb8 	bl	800091c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40023c00 	.word	0x40023c00

08000bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <HAL_InitTick+0x54>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <HAL_InitTick+0x58>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 fb31 	bl	800123e <HAL_SYSTICK_Config>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	e00e      	b.n	8000c04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2b0f      	cmp	r3, #15
 8000bea:	d80a      	bhi.n	8000c02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bec:	2200      	movs	r2, #0
 8000bee:	6879      	ldr	r1, [r7, #4]
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	f000 fb07 	bl	8001206 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bf8:	4a06      	ldr	r2, [pc, #24]	; (8000c14 <HAL_InitTick+0x5c>)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	e000      	b.n	8000c04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000000 	.word	0x20000000
 8000c10:	20000008 	.word	0x20000008
 8000c14:	20000004 	.word	0x20000004

08000c18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <HAL_IncTick+0x20>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	461a      	mov	r2, r3
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_IncTick+0x24>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4413      	add	r3, r2
 8000c28:	4a04      	ldr	r2, [pc, #16]	; (8000c3c <HAL_IncTick+0x24>)
 8000c2a:	6013      	str	r3, [r2, #0]
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	20000008 	.word	0x20000008
 8000c3c:	200000a0 	.word	0x200000a0

08000c40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  return uwTick;
 8000c44:	4b03      	ldr	r3, [pc, #12]	; (8000c54 <HAL_GetTick+0x14>)
 8000c46:	681b      	ldr	r3, [r3, #0]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	200000a0 	.word	0x200000a0

08000c58 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d101      	bne.n	8000c6a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e0ed      	b.n	8000e46 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d102      	bne.n	8000c7c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff fe78 	bl	800096c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f042 0201 	orr.w	r2, r2, #1
 8000c8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c8c:	f7ff ffd8 	bl	8000c40 <HAL_GetTick>
 8000c90:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c92:	e012      	b.n	8000cba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c94:	f7ff ffd4 	bl	8000c40 <HAL_GetTick>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	2b0a      	cmp	r3, #10
 8000ca0:	d90b      	bls.n	8000cba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ca6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2205      	movs	r2, #5
 8000cb2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e0c5      	b.n	8000e46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f003 0301 	and.w	r3, r3, #1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d0e5      	beq.n	8000c94 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f022 0202 	bic.w	r2, r2, #2
 8000cd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cd8:	f7ff ffb2 	bl	8000c40 <HAL_GetTick>
 8000cdc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cde:	e012      	b.n	8000d06 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ce0:	f7ff ffae 	bl	8000c40 <HAL_GetTick>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	2b0a      	cmp	r3, #10
 8000cec:	d90b      	bls.n	8000d06 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cf2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2205      	movs	r2, #5
 8000cfe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e09f      	b.n	8000e46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 0302 	and.w	r3, r3, #2
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d1e5      	bne.n	8000ce0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	7e1b      	ldrb	r3, [r3, #24]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d108      	bne.n	8000d2e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	e007      	b.n	8000d3e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	7e5b      	ldrb	r3, [r3, #25]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d108      	bne.n	8000d58 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	e007      	b.n	8000d68 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d66:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	7e9b      	ldrb	r3, [r3, #26]
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d108      	bne.n	8000d82 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f042 0220 	orr.w	r2, r2, #32
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	e007      	b.n	8000d92 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f022 0220 	bic.w	r2, r2, #32
 8000d90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	7edb      	ldrb	r3, [r3, #27]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d108      	bne.n	8000dac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f022 0210 	bic.w	r2, r2, #16
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	e007      	b.n	8000dbc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f042 0210 	orr.w	r2, r2, #16
 8000dba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	7f1b      	ldrb	r3, [r3, #28]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d108      	bne.n	8000dd6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f042 0208 	orr.w	r2, r2, #8
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	e007      	b.n	8000de6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f022 0208 	bic.w	r2, r2, #8
 8000de4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	7f5b      	ldrb	r3, [r3, #29]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d108      	bne.n	8000e00 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f042 0204 	orr.w	r2, r2, #4
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	e007      	b.n	8000e10 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f022 0204 	bic.w	r2, r2, #4
 8000e0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	689a      	ldr	r2, [r3, #8]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	431a      	orrs	r2, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	691b      	ldr	r3, [r3, #16]
 8000e1e:	431a      	orrs	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	695b      	ldr	r3, [r3, #20]
 8000e24:	ea42 0103 	orr.w	r1, r2, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	1e5a      	subs	r2, r3, #1
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	430a      	orrs	r2, r1
 8000e34:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2201      	movs	r2, #1
 8000e40:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b084      	sub	sp, #16
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d12e      	bne.n	8000ec0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2202      	movs	r2, #2
 8000e66:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f022 0201 	bic.w	r2, r2, #1
 8000e78:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e7a:	f7ff fee1 	bl	8000c40 <HAL_GetTick>
 8000e7e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e80:	e012      	b.n	8000ea8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e82:	f7ff fedd 	bl	8000c40 <HAL_GetTick>
 8000e86:	4602      	mov	r2, r0
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	2b0a      	cmp	r3, #10
 8000e8e:	d90b      	bls.n	8000ea8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e94:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2205      	movs	r2, #5
 8000ea0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e012      	b.n	8000ece <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1e5      	bne.n	8000e82 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	e006      	b.n	8000ece <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
  }
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b089      	sub	sp, #36	; 0x24
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	60f8      	str	r0, [r7, #12]
 8000ede:	60b9      	str	r1, [r7, #8]
 8000ee0:	607a      	str	r2, [r7, #4]
 8000ee2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eea:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ef4:	7ffb      	ldrb	r3, [r7, #31]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d003      	beq.n	8000f02 <HAL_CAN_AddTxMessage+0x2c>
 8000efa:	7ffb      	ldrb	r3, [r7, #31]
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	f040 80b8 	bne.w	8001072 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d10a      	bne.n	8000f22 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d105      	bne.n	8000f22 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	f000 80a0 	beq.w	8001062 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	0e1b      	lsrs	r3, r3, #24
 8000f26:	f003 0303 	and.w	r3, r3, #3
 8000f2a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d907      	bls.n	8000f42 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f36:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e09e      	b.n	8001080 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000f42:	2201      	movs	r2, #1
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	409a      	lsls	r2, r3
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d10d      	bne.n	8000f70 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f5e:	68f9      	ldr	r1, [r7, #12]
 8000f60:	6809      	ldr	r1, [r1, #0]
 8000f62:	431a      	orrs	r2, r3
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	3318      	adds	r3, #24
 8000f68:	011b      	lsls	r3, r3, #4
 8000f6a:	440b      	add	r3, r1
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	e00f      	b.n	8000f90 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f7a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f80:	68f9      	ldr	r1, [r7, #12]
 8000f82:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000f84:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	3318      	adds	r3, #24
 8000f8a:	011b      	lsls	r3, r3, #4
 8000f8c:	440b      	add	r3, r1
 8000f8e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	6819      	ldr	r1, [r3, #0]
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	691a      	ldr	r2, [r3, #16]
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	3318      	adds	r3, #24
 8000f9c:	011b      	lsls	r3, r3, #4
 8000f9e:	440b      	add	r3, r1
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	7d1b      	ldrb	r3, [r3, #20]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d111      	bne.n	8000fd0 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	3318      	adds	r3, #24
 8000fb4:	011b      	lsls	r3, r3, #4
 8000fb6:	4413      	add	r3, r2
 8000fb8:	3304      	adds	r3, #4
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	68fa      	ldr	r2, [r7, #12]
 8000fbe:	6811      	ldr	r1, [r2, #0]
 8000fc0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	3318      	adds	r3, #24
 8000fc8:	011b      	lsls	r3, r3, #4
 8000fca:	440b      	add	r3, r1
 8000fcc:	3304      	adds	r3, #4
 8000fce:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3307      	adds	r3, #7
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	061a      	lsls	r2, r3, #24
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3306      	adds	r3, #6
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	041b      	lsls	r3, r3, #16
 8000fe0:	431a      	orrs	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3305      	adds	r3, #5
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	021b      	lsls	r3, r3, #8
 8000fea:	4313      	orrs	r3, r2
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	3204      	adds	r2, #4
 8000ff0:	7812      	ldrb	r2, [r2, #0]
 8000ff2:	4610      	mov	r0, r2
 8000ff4:	68fa      	ldr	r2, [r7, #12]
 8000ff6:	6811      	ldr	r1, [r2, #0]
 8000ff8:	ea43 0200 	orr.w	r2, r3, r0
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	011b      	lsls	r3, r3, #4
 8001000:	440b      	add	r3, r1
 8001002:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001006:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3303      	adds	r3, #3
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	061a      	lsls	r2, r3, #24
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3302      	adds	r3, #2
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	041b      	lsls	r3, r3, #16
 8001018:	431a      	orrs	r2, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3301      	adds	r3, #1
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	4313      	orrs	r3, r2
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	7812      	ldrb	r2, [r2, #0]
 8001028:	4610      	mov	r0, r2
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	6811      	ldr	r1, [r2, #0]
 800102e:	ea43 0200 	orr.w	r2, r3, r0
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	011b      	lsls	r3, r3, #4
 8001036:	440b      	add	r3, r1
 8001038:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800103c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	3318      	adds	r3, #24
 8001046:	011b      	lsls	r3, r3, #4
 8001048:	4413      	add	r3, r2
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	68fa      	ldr	r2, [r7, #12]
 800104e:	6811      	ldr	r1, [r2, #0]
 8001050:	f043 0201 	orr.w	r2, r3, #1
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	3318      	adds	r3, #24
 8001058:	011b      	lsls	r3, r3, #4
 800105a:	440b      	add	r3, r1
 800105c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800105e:	2300      	movs	r3, #0
 8001060:	e00e      	b.n	8001080 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001066:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e006      	b.n	8001080 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001076:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
  }
}
 8001080:	4618      	mov	r0, r3
 8001082:	3724      	adds	r7, #36	; 0x24
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <__NVIC_SetPriorityGrouping+0x44>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a2:	68ba      	ldr	r2, [r7, #8]
 80010a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a8:	4013      	ands	r3, r2
 80010aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010be:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <__NVIC_SetPriorityGrouping+0x44>)
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	60d3      	str	r3, [r2, #12]
}
 80010c4:	bf00      	nop
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d8:	4b04      	ldr	r3, [pc, #16]	; (80010ec <__NVIC_GetPriorityGrouping+0x18>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	0a1b      	lsrs	r3, r3, #8
 80010de:	f003 0307 	and.w	r3, r3, #7
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	6039      	str	r1, [r7, #0]
 80010fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001100:	2b00      	cmp	r3, #0
 8001102:	db0a      	blt.n	800111a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	b2da      	uxtb	r2, r3
 8001108:	490c      	ldr	r1, [pc, #48]	; (800113c <__NVIC_SetPriority+0x4c>)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	0112      	lsls	r2, r2, #4
 8001110:	b2d2      	uxtb	r2, r2
 8001112:	440b      	add	r3, r1
 8001114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001118:	e00a      	b.n	8001130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	b2da      	uxtb	r2, r3
 800111e:	4908      	ldr	r1, [pc, #32]	; (8001140 <__NVIC_SetPriority+0x50>)
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	f003 030f 	and.w	r3, r3, #15
 8001126:	3b04      	subs	r3, #4
 8001128:	0112      	lsls	r2, r2, #4
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	440b      	add	r3, r1
 800112e:	761a      	strb	r2, [r3, #24]
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000e100 	.word	0xe000e100
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001144:	b480      	push	{r7}
 8001146:	b089      	sub	sp, #36	; 0x24
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	f1c3 0307 	rsb	r3, r3, #7
 800115e:	2b04      	cmp	r3, #4
 8001160:	bf28      	it	cs
 8001162:	2304      	movcs	r3, #4
 8001164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3304      	adds	r3, #4
 800116a:	2b06      	cmp	r3, #6
 800116c:	d902      	bls.n	8001174 <NVIC_EncodePriority+0x30>
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3b03      	subs	r3, #3
 8001172:	e000      	b.n	8001176 <NVIC_EncodePriority+0x32>
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001178:	f04f 32ff 	mov.w	r2, #4294967295
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43da      	mvns	r2, r3
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	401a      	ands	r2, r3
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800118c:	f04f 31ff 	mov.w	r1, #4294967295
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	fa01 f303 	lsl.w	r3, r1, r3
 8001196:	43d9      	mvns	r1, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	4313      	orrs	r3, r2
         );
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3724      	adds	r7, #36	; 0x24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011bc:	d301      	bcc.n	80011c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011be:	2301      	movs	r3, #1
 80011c0:	e00f      	b.n	80011e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011c2:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <SysTick_Config+0x40>)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ca:	210f      	movs	r1, #15
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295
 80011d0:	f7ff ff8e 	bl	80010f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <SysTick_Config+0x40>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011da:	4b04      	ldr	r3, [pc, #16]	; (80011ec <SysTick_Config+0x40>)
 80011dc:	2207      	movs	r2, #7
 80011de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	e000e010 	.word	0xe000e010

080011f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff ff47 	bl	800108c <__NVIC_SetPriorityGrouping>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001206:	b580      	push	{r7, lr}
 8001208:	b086      	sub	sp, #24
 800120a:	af00      	add	r7, sp, #0
 800120c:	4603      	mov	r3, r0
 800120e:	60b9      	str	r1, [r7, #8]
 8001210:	607a      	str	r2, [r7, #4]
 8001212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001218:	f7ff ff5c 	bl	80010d4 <__NVIC_GetPriorityGrouping>
 800121c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	68b9      	ldr	r1, [r7, #8]
 8001222:	6978      	ldr	r0, [r7, #20]
 8001224:	f7ff ff8e 	bl	8001144 <NVIC_EncodePriority>
 8001228:	4602      	mov	r2, r0
 800122a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122e:	4611      	mov	r1, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff5d 	bl	80010f0 <__NVIC_SetPriority>
}
 8001236:	bf00      	nop
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff ffb0 	bl	80011ac <SysTick_Config>
 800124c:	4603      	mov	r3, r0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001258:	b480      	push	{r7}
 800125a:	b089      	sub	sp, #36	; 0x24
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800126a:	2300      	movs	r3, #0
 800126c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
 8001272:	e165      	b.n	8001540 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001274:	2201      	movs	r2, #1
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	429a      	cmp	r2, r3
 800128e:	f040 8154 	bne.w	800153a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f003 0303 	and.w	r3, r3, #3
 800129a:	2b01      	cmp	r3, #1
 800129c:	d005      	beq.n	80012aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d130      	bne.n	800130c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	2203      	movs	r2, #3
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43db      	mvns	r3, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4013      	ands	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	68da      	ldr	r2, [r3, #12]
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012e0:	2201      	movs	r2, #1
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	091b      	lsrs	r3, r3, #4
 80012f6:	f003 0201 	and.w	r2, r3, #1
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 0303 	and.w	r3, r3, #3
 8001314:	2b03      	cmp	r3, #3
 8001316:	d017      	beq.n	8001348 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	2203      	movs	r2, #3
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f003 0303 	and.w	r3, r3, #3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d123      	bne.n	800139c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	08da      	lsrs	r2, r3, #3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3208      	adds	r2, #8
 800135c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001360:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	f003 0307 	and.w	r3, r3, #7
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	220f      	movs	r2, #15
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	691a      	ldr	r2, [r3, #16]
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	08da      	lsrs	r2, r3, #3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3208      	adds	r2, #8
 8001396:	69b9      	ldr	r1, [r7, #24]
 8001398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	2203      	movs	r2, #3
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 0203 	and.w	r2, r3, #3
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f000 80ae 	beq.w	800153a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	4b5d      	ldr	r3, [pc, #372]	; (8001558 <HAL_GPIO_Init+0x300>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	4a5c      	ldr	r2, [pc, #368]	; (8001558 <HAL_GPIO_Init+0x300>)
 80013e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ec:	6453      	str	r3, [r2, #68]	; 0x44
 80013ee:	4b5a      	ldr	r3, [pc, #360]	; (8001558 <HAL_GPIO_Init+0x300>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013fa:	4a58      	ldr	r2, [pc, #352]	; (800155c <HAL_GPIO_Init+0x304>)
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	089b      	lsrs	r3, r3, #2
 8001400:	3302      	adds	r3, #2
 8001402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001406:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f003 0303 	and.w	r3, r3, #3
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	220f      	movs	r2, #15
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4013      	ands	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a4f      	ldr	r2, [pc, #316]	; (8001560 <HAL_GPIO_Init+0x308>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d025      	beq.n	8001472 <HAL_GPIO_Init+0x21a>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a4e      	ldr	r2, [pc, #312]	; (8001564 <HAL_GPIO_Init+0x30c>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d01f      	beq.n	800146e <HAL_GPIO_Init+0x216>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a4d      	ldr	r2, [pc, #308]	; (8001568 <HAL_GPIO_Init+0x310>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d019      	beq.n	800146a <HAL_GPIO_Init+0x212>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a4c      	ldr	r2, [pc, #304]	; (800156c <HAL_GPIO_Init+0x314>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d013      	beq.n	8001466 <HAL_GPIO_Init+0x20e>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a4b      	ldr	r2, [pc, #300]	; (8001570 <HAL_GPIO_Init+0x318>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d00d      	beq.n	8001462 <HAL_GPIO_Init+0x20a>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a4a      	ldr	r2, [pc, #296]	; (8001574 <HAL_GPIO_Init+0x31c>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d007      	beq.n	800145e <HAL_GPIO_Init+0x206>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a49      	ldr	r2, [pc, #292]	; (8001578 <HAL_GPIO_Init+0x320>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d101      	bne.n	800145a <HAL_GPIO_Init+0x202>
 8001456:	2306      	movs	r3, #6
 8001458:	e00c      	b.n	8001474 <HAL_GPIO_Init+0x21c>
 800145a:	2307      	movs	r3, #7
 800145c:	e00a      	b.n	8001474 <HAL_GPIO_Init+0x21c>
 800145e:	2305      	movs	r3, #5
 8001460:	e008      	b.n	8001474 <HAL_GPIO_Init+0x21c>
 8001462:	2304      	movs	r3, #4
 8001464:	e006      	b.n	8001474 <HAL_GPIO_Init+0x21c>
 8001466:	2303      	movs	r3, #3
 8001468:	e004      	b.n	8001474 <HAL_GPIO_Init+0x21c>
 800146a:	2302      	movs	r3, #2
 800146c:	e002      	b.n	8001474 <HAL_GPIO_Init+0x21c>
 800146e:	2301      	movs	r3, #1
 8001470:	e000      	b.n	8001474 <HAL_GPIO_Init+0x21c>
 8001472:	2300      	movs	r3, #0
 8001474:	69fa      	ldr	r2, [r7, #28]
 8001476:	f002 0203 	and.w	r2, r2, #3
 800147a:	0092      	lsls	r2, r2, #2
 800147c:	4093      	lsls	r3, r2
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001484:	4935      	ldr	r1, [pc, #212]	; (800155c <HAL_GPIO_Init+0x304>)
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	089b      	lsrs	r3, r3, #2
 800148a:	3302      	adds	r3, #2
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001492:	4b3a      	ldr	r3, [pc, #232]	; (800157c <HAL_GPIO_Init+0x324>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	43db      	mvns	r3, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4013      	ands	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014b6:	4a31      	ldr	r2, [pc, #196]	; (800157c <HAL_GPIO_Init+0x324>)
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014bc:	4b2f      	ldr	r3, [pc, #188]	; (800157c <HAL_GPIO_Init+0x324>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014e0:	4a26      	ldr	r2, [pc, #152]	; (800157c <HAL_GPIO_Init+0x324>)
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014e6:	4b25      	ldr	r3, [pc, #148]	; (800157c <HAL_GPIO_Init+0x324>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4013      	ands	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800150a:	4a1c      	ldr	r2, [pc, #112]	; (800157c <HAL_GPIO_Init+0x324>)
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001510:	4b1a      	ldr	r3, [pc, #104]	; (800157c <HAL_GPIO_Init+0x324>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	4313      	orrs	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001534:	4a11      	ldr	r2, [pc, #68]	; (800157c <HAL_GPIO_Init+0x324>)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3301      	adds	r3, #1
 800153e:	61fb      	str	r3, [r7, #28]
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	2b0f      	cmp	r3, #15
 8001544:	f67f ae96 	bls.w	8001274 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001548:	bf00      	nop
 800154a:	bf00      	nop
 800154c:	3724      	adds	r7, #36	; 0x24
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	40023800 	.word	0x40023800
 800155c:	40013800 	.word	0x40013800
 8001560:	40020000 	.word	0x40020000
 8001564:	40020400 	.word	0x40020400
 8001568:	40020800 	.word	0x40020800
 800156c:	40020c00 	.word	0x40020c00
 8001570:	40021000 	.word	0x40021000
 8001574:	40021400 	.word	0x40021400
 8001578:	40021800 	.word	0x40021800
 800157c:	40013c00 	.word	0x40013c00

08001580 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));


  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	691a      	ldr	r2, [r3, #16]
 8001590:	887b      	ldrh	r3, [r7, #2]
 8001592:	4013      	ands	r3, r2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d002      	beq.n	800159e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001598:	2301      	movs	r3, #1
 800159a:	73fb      	strb	r3, [r7, #15]
 800159c:	e001      	b.n	80015a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800159e:	2300      	movs	r3, #0
 80015a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	807b      	strh	r3, [r7, #2]
 80015bc:	4613      	mov	r3, r2
 80015be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015c0:	787b      	ldrb	r3, [r7, #1]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015c6:	887a      	ldrh	r2, [r7, #2]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015cc:	e003      	b.n	80015d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015ce:	887b      	ldrh	r3, [r7, #2]
 80015d0:	041a      	lsls	r2, r3, #16
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	619a      	str	r2, [r3, #24]
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
	...

080015e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e0cc      	b.n	8001792 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015f8:	4b68      	ldr	r3, [pc, #416]	; (800179c <HAL_RCC_ClockConfig+0x1b8>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 030f 	and.w	r3, r3, #15
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	429a      	cmp	r2, r3
 8001604:	d90c      	bls.n	8001620 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001606:	4b65      	ldr	r3, [pc, #404]	; (800179c <HAL_RCC_ClockConfig+0x1b8>)
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800160e:	4b63      	ldr	r3, [pc, #396]	; (800179c <HAL_RCC_ClockConfig+0x1b8>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 030f 	and.w	r3, r3, #15
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	429a      	cmp	r2, r3
 800161a:	d001      	beq.n	8001620 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e0b8      	b.n	8001792 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d020      	beq.n	800166e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0304 	and.w	r3, r3, #4
 8001634:	2b00      	cmp	r3, #0
 8001636:	d005      	beq.n	8001644 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001638:	4b59      	ldr	r3, [pc, #356]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	4a58      	ldr	r2, [pc, #352]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 800163e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001642:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0308 	and.w	r3, r3, #8
 800164c:	2b00      	cmp	r3, #0
 800164e:	d005      	beq.n	800165c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001650:	4b53      	ldr	r3, [pc, #332]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	4a52      	ldr	r2, [pc, #328]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001656:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800165a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800165c:	4b50      	ldr	r3, [pc, #320]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	494d      	ldr	r1, [pc, #308]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	4313      	orrs	r3, r2
 800166c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b00      	cmp	r3, #0
 8001678:	d044      	beq.n	8001704 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d107      	bne.n	8001692 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001682:	4b47      	ldr	r3, [pc, #284]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d119      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e07f      	b.n	8001792 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b02      	cmp	r3, #2
 8001698:	d003      	beq.n	80016a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800169e:	2b03      	cmp	r3, #3
 80016a0:	d107      	bne.n	80016b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016a2:	4b3f      	ldr	r3, [pc, #252]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d109      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e06f      	b.n	8001792 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b2:	4b3b      	ldr	r3, [pc, #236]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e067      	b.n	8001792 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016c2:	4b37      	ldr	r3, [pc, #220]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f023 0203 	bic.w	r2, r3, #3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	4934      	ldr	r1, [pc, #208]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016d4:	f7ff fab4 	bl	8000c40 <HAL_GetTick>
 80016d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016da:	e00a      	b.n	80016f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016dc:	f7ff fab0 	bl	8000c40 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e04f      	b.n	8001792 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016f2:	4b2b      	ldr	r3, [pc, #172]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 020c 	and.w	r2, r3, #12
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	429a      	cmp	r2, r3
 8001702:	d1eb      	bne.n	80016dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001704:	4b25      	ldr	r3, [pc, #148]	; (800179c <HAL_RCC_ClockConfig+0x1b8>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 030f 	and.w	r3, r3, #15
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	429a      	cmp	r2, r3
 8001710:	d20c      	bcs.n	800172c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001712:	4b22      	ldr	r3, [pc, #136]	; (800179c <HAL_RCC_ClockConfig+0x1b8>)
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800171a:	4b20      	ldr	r3, [pc, #128]	; (800179c <HAL_RCC_ClockConfig+0x1b8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 030f 	and.w	r3, r3, #15
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	429a      	cmp	r2, r3
 8001726:	d001      	beq.n	800172c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e032      	b.n	8001792 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	2b00      	cmp	r3, #0
 8001736:	d008      	beq.n	800174a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001738:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	4916      	ldr	r1, [pc, #88]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	4313      	orrs	r3, r2
 8001748:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0308 	and.w	r3, r3, #8
 8001752:	2b00      	cmp	r3, #0
 8001754:	d009      	beq.n	800176a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001756:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	490e      	ldr	r1, [pc, #56]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	4313      	orrs	r3, r2
 8001768:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800176a:	f000 f821 	bl	80017b0 <HAL_RCC_GetSysClockFreq>
 800176e:	4602      	mov	r2, r0
 8001770:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	091b      	lsrs	r3, r3, #4
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	490a      	ldr	r1, [pc, #40]	; (80017a4 <HAL_RCC_ClockConfig+0x1c0>)
 800177c:	5ccb      	ldrb	r3, [r1, r3]
 800177e:	fa22 f303 	lsr.w	r3, r2, r3
 8001782:	4a09      	ldr	r2, [pc, #36]	; (80017a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001784:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001786:	4b09      	ldr	r3, [pc, #36]	; (80017ac <HAL_RCC_ClockConfig+0x1c8>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff fa14 	bl	8000bb8 <HAL_InitTick>

  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40023c00 	.word	0x40023c00
 80017a0:	40023800 	.word	0x40023800
 80017a4:	080021bc 	.word	0x080021bc
 80017a8:	20000000 	.word	0x20000000
 80017ac:	20000004 	.word	0x20000004

080017b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017b4:	b0ae      	sub	sp, #184	; 0xb8
 80017b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80017be:	2300      	movs	r3, #0
 80017c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017d6:	4bcb      	ldr	r3, [pc, #812]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x354>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f003 030c 	and.w	r3, r3, #12
 80017de:	2b0c      	cmp	r3, #12
 80017e0:	f200 8206 	bhi.w	8001bf0 <HAL_RCC_GetSysClockFreq+0x440>
 80017e4:	a201      	add	r2, pc, #4	; (adr r2, 80017ec <HAL_RCC_GetSysClockFreq+0x3c>)
 80017e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ea:	bf00      	nop
 80017ec:	08001821 	.word	0x08001821
 80017f0:	08001bf1 	.word	0x08001bf1
 80017f4:	08001bf1 	.word	0x08001bf1
 80017f8:	08001bf1 	.word	0x08001bf1
 80017fc:	08001829 	.word	0x08001829
 8001800:	08001bf1 	.word	0x08001bf1
 8001804:	08001bf1 	.word	0x08001bf1
 8001808:	08001bf1 	.word	0x08001bf1
 800180c:	08001831 	.word	0x08001831
 8001810:	08001bf1 	.word	0x08001bf1
 8001814:	08001bf1 	.word	0x08001bf1
 8001818:	08001bf1 	.word	0x08001bf1
 800181c:	08001a21 	.word	0x08001a21
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001820:	4bb9      	ldr	r3, [pc, #740]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x358>)
 8001822:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001826:	e1e7      	b.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001828:	4bb8      	ldr	r3, [pc, #736]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x35c>)
 800182a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800182e:	e1e3      	b.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001830:	4bb4      	ldr	r3, [pc, #720]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x354>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001838:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800183c:	4bb1      	ldr	r3, [pc, #708]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x354>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d071      	beq.n	800192c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001848:	4bae      	ldr	r3, [pc, #696]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x354>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	099b      	lsrs	r3, r3, #6
 800184e:	2200      	movs	r2, #0
 8001850:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001854:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001858:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800185c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001860:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001864:	2300      	movs	r3, #0
 8001866:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800186a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800186e:	4622      	mov	r2, r4
 8001870:	462b      	mov	r3, r5
 8001872:	f04f 0000 	mov.w	r0, #0
 8001876:	f04f 0100 	mov.w	r1, #0
 800187a:	0159      	lsls	r1, r3, #5
 800187c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001880:	0150      	lsls	r0, r2, #5
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4621      	mov	r1, r4
 8001888:	1a51      	subs	r1, r2, r1
 800188a:	6439      	str	r1, [r7, #64]	; 0x40
 800188c:	4629      	mov	r1, r5
 800188e:	eb63 0301 	sbc.w	r3, r3, r1
 8001892:	647b      	str	r3, [r7, #68]	; 0x44
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	f04f 0300 	mov.w	r3, #0
 800189c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80018a0:	4649      	mov	r1, r9
 80018a2:	018b      	lsls	r3, r1, #6
 80018a4:	4641      	mov	r1, r8
 80018a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018aa:	4641      	mov	r1, r8
 80018ac:	018a      	lsls	r2, r1, #6
 80018ae:	4641      	mov	r1, r8
 80018b0:	1a51      	subs	r1, r2, r1
 80018b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80018b4:	4649      	mov	r1, r9
 80018b6:	eb63 0301 	sbc.w	r3, r3, r1
 80018ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	f04f 0300 	mov.w	r3, #0
 80018c4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80018c8:	4649      	mov	r1, r9
 80018ca:	00cb      	lsls	r3, r1, #3
 80018cc:	4641      	mov	r1, r8
 80018ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80018d2:	4641      	mov	r1, r8
 80018d4:	00ca      	lsls	r2, r1, #3
 80018d6:	4610      	mov	r0, r2
 80018d8:	4619      	mov	r1, r3
 80018da:	4603      	mov	r3, r0
 80018dc:	4622      	mov	r2, r4
 80018de:	189b      	adds	r3, r3, r2
 80018e0:	633b      	str	r3, [r7, #48]	; 0x30
 80018e2:	462b      	mov	r3, r5
 80018e4:	460a      	mov	r2, r1
 80018e6:	eb42 0303 	adc.w	r3, r2, r3
 80018ea:	637b      	str	r3, [r7, #52]	; 0x34
 80018ec:	f04f 0200 	mov.w	r2, #0
 80018f0:	f04f 0300 	mov.w	r3, #0
 80018f4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80018f8:	4629      	mov	r1, r5
 80018fa:	024b      	lsls	r3, r1, #9
 80018fc:	4621      	mov	r1, r4
 80018fe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001902:	4621      	mov	r1, r4
 8001904:	024a      	lsls	r2, r1, #9
 8001906:	4610      	mov	r0, r2
 8001908:	4619      	mov	r1, r3
 800190a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800190e:	2200      	movs	r2, #0
 8001910:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001914:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001918:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800191c:	f7fe fc72 	bl	8000204 <__aeabi_uldivmod>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4613      	mov	r3, r2
 8001926:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800192a:	e067      	b.n	80019fc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800192c:	4b75      	ldr	r3, [pc, #468]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x354>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	099b      	lsrs	r3, r3, #6
 8001932:	2200      	movs	r2, #0
 8001934:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001938:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800193c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001944:	67bb      	str	r3, [r7, #120]	; 0x78
 8001946:	2300      	movs	r3, #0
 8001948:	67fb      	str	r3, [r7, #124]	; 0x7c
 800194a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800194e:	4622      	mov	r2, r4
 8001950:	462b      	mov	r3, r5
 8001952:	f04f 0000 	mov.w	r0, #0
 8001956:	f04f 0100 	mov.w	r1, #0
 800195a:	0159      	lsls	r1, r3, #5
 800195c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001960:	0150      	lsls	r0, r2, #5
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4621      	mov	r1, r4
 8001968:	1a51      	subs	r1, r2, r1
 800196a:	62b9      	str	r1, [r7, #40]	; 0x28
 800196c:	4629      	mov	r1, r5
 800196e:	eb63 0301 	sbc.w	r3, r3, r1
 8001972:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001974:	f04f 0200 	mov.w	r2, #0
 8001978:	f04f 0300 	mov.w	r3, #0
 800197c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001980:	4649      	mov	r1, r9
 8001982:	018b      	lsls	r3, r1, #6
 8001984:	4641      	mov	r1, r8
 8001986:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800198a:	4641      	mov	r1, r8
 800198c:	018a      	lsls	r2, r1, #6
 800198e:	4641      	mov	r1, r8
 8001990:	ebb2 0a01 	subs.w	sl, r2, r1
 8001994:	4649      	mov	r1, r9
 8001996:	eb63 0b01 	sbc.w	fp, r3, r1
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	f04f 0300 	mov.w	r3, #0
 80019a2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80019a6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80019aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80019ae:	4692      	mov	sl, r2
 80019b0:	469b      	mov	fp, r3
 80019b2:	4623      	mov	r3, r4
 80019b4:	eb1a 0303 	adds.w	r3, sl, r3
 80019b8:	623b      	str	r3, [r7, #32]
 80019ba:	462b      	mov	r3, r5
 80019bc:	eb4b 0303 	adc.w	r3, fp, r3
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	f04f 0300 	mov.w	r3, #0
 80019ca:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80019ce:	4629      	mov	r1, r5
 80019d0:	028b      	lsls	r3, r1, #10
 80019d2:	4621      	mov	r1, r4
 80019d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019d8:	4621      	mov	r1, r4
 80019da:	028a      	lsls	r2, r1, #10
 80019dc:	4610      	mov	r0, r2
 80019de:	4619      	mov	r1, r3
 80019e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019e4:	2200      	movs	r2, #0
 80019e6:	673b      	str	r3, [r7, #112]	; 0x70
 80019e8:	677a      	str	r2, [r7, #116]	; 0x74
 80019ea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80019ee:	f7fe fc09 	bl	8000204 <__aeabi_uldivmod>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	4613      	mov	r3, r2
 80019f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019fc:	4b41      	ldr	r3, [pc, #260]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x354>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	0c1b      	lsrs	r3, r3, #16
 8001a02:	f003 0303 	and.w	r3, r3, #3
 8001a06:	3301      	adds	r3, #1
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001a0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001a12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a1e:	e0eb      	b.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a20:	4b38      	ldr	r3, [pc, #224]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a2c:	4b35      	ldr	r3, [pc, #212]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d06b      	beq.n	8001b10 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a38:	4b32      	ldr	r3, [pc, #200]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	099b      	lsrs	r3, r3, #6
 8001a3e:	2200      	movs	r2, #0
 8001a40:	66bb      	str	r3, [r7, #104]	; 0x68
 8001a42:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001a44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a4a:	663b      	str	r3, [r7, #96]	; 0x60
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	667b      	str	r3, [r7, #100]	; 0x64
 8001a50:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001a54:	4622      	mov	r2, r4
 8001a56:	462b      	mov	r3, r5
 8001a58:	f04f 0000 	mov.w	r0, #0
 8001a5c:	f04f 0100 	mov.w	r1, #0
 8001a60:	0159      	lsls	r1, r3, #5
 8001a62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a66:	0150      	lsls	r0, r2, #5
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4621      	mov	r1, r4
 8001a6e:	1a51      	subs	r1, r2, r1
 8001a70:	61b9      	str	r1, [r7, #24]
 8001a72:	4629      	mov	r1, r5
 8001a74:	eb63 0301 	sbc.w	r3, r3, r1
 8001a78:	61fb      	str	r3, [r7, #28]
 8001a7a:	f04f 0200 	mov.w	r2, #0
 8001a7e:	f04f 0300 	mov.w	r3, #0
 8001a82:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001a86:	4659      	mov	r1, fp
 8001a88:	018b      	lsls	r3, r1, #6
 8001a8a:	4651      	mov	r1, sl
 8001a8c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a90:	4651      	mov	r1, sl
 8001a92:	018a      	lsls	r2, r1, #6
 8001a94:	4651      	mov	r1, sl
 8001a96:	ebb2 0801 	subs.w	r8, r2, r1
 8001a9a:	4659      	mov	r1, fp
 8001a9c:	eb63 0901 	sbc.w	r9, r3, r1
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001aac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ab0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ab4:	4690      	mov	r8, r2
 8001ab6:	4699      	mov	r9, r3
 8001ab8:	4623      	mov	r3, r4
 8001aba:	eb18 0303 	adds.w	r3, r8, r3
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	462b      	mov	r3, r5
 8001ac2:	eb49 0303 	adc.w	r3, r9, r3
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	f04f 0300 	mov.w	r3, #0
 8001ad0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001ad4:	4629      	mov	r1, r5
 8001ad6:	024b      	lsls	r3, r1, #9
 8001ad8:	4621      	mov	r1, r4
 8001ada:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ade:	4621      	mov	r1, r4
 8001ae0:	024a      	lsls	r2, r1, #9
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001aea:	2200      	movs	r2, #0
 8001aec:	65bb      	str	r3, [r7, #88]	; 0x58
 8001aee:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001af0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001af4:	f7fe fb86 	bl	8000204 <__aeabi_uldivmod>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	4613      	mov	r3, r2
 8001afe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001b02:	e065      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x420>
 8001b04:	40023800 	.word	0x40023800
 8001b08:	00f42400 	.word	0x00f42400
 8001b0c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b10:	4b3d      	ldr	r3, [pc, #244]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x458>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	099b      	lsrs	r3, r3, #6
 8001b16:	2200      	movs	r2, #0
 8001b18:	4618      	mov	r0, r3
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b20:	653b      	str	r3, [r7, #80]	; 0x50
 8001b22:	2300      	movs	r3, #0
 8001b24:	657b      	str	r3, [r7, #84]	; 0x54
 8001b26:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001b2a:	4642      	mov	r2, r8
 8001b2c:	464b      	mov	r3, r9
 8001b2e:	f04f 0000 	mov.w	r0, #0
 8001b32:	f04f 0100 	mov.w	r1, #0
 8001b36:	0159      	lsls	r1, r3, #5
 8001b38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b3c:	0150      	lsls	r0, r2, #5
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	4641      	mov	r1, r8
 8001b44:	1a51      	subs	r1, r2, r1
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	4649      	mov	r1, r9
 8001b4a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	f04f 0300 	mov.w	r3, #0
 8001b58:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001b5c:	4659      	mov	r1, fp
 8001b5e:	018b      	lsls	r3, r1, #6
 8001b60:	4651      	mov	r1, sl
 8001b62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b66:	4651      	mov	r1, sl
 8001b68:	018a      	lsls	r2, r1, #6
 8001b6a:	4651      	mov	r1, sl
 8001b6c:	1a54      	subs	r4, r2, r1
 8001b6e:	4659      	mov	r1, fp
 8001b70:	eb63 0501 	sbc.w	r5, r3, r1
 8001b74:	f04f 0200 	mov.w	r2, #0
 8001b78:	f04f 0300 	mov.w	r3, #0
 8001b7c:	00eb      	lsls	r3, r5, #3
 8001b7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b82:	00e2      	lsls	r2, r4, #3
 8001b84:	4614      	mov	r4, r2
 8001b86:	461d      	mov	r5, r3
 8001b88:	4643      	mov	r3, r8
 8001b8a:	18e3      	adds	r3, r4, r3
 8001b8c:	603b      	str	r3, [r7, #0]
 8001b8e:	464b      	mov	r3, r9
 8001b90:	eb45 0303 	adc.w	r3, r5, r3
 8001b94:	607b      	str	r3, [r7, #4]
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ba2:	4629      	mov	r1, r5
 8001ba4:	028b      	lsls	r3, r1, #10
 8001ba6:	4621      	mov	r1, r4
 8001ba8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bac:	4621      	mov	r1, r4
 8001bae:	028a      	lsls	r2, r1, #10
 8001bb0:	4610      	mov	r0, r2
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bb8:	2200      	movs	r2, #0
 8001bba:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bbc:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001bbe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001bc2:	f7fe fb1f 	bl	8000204 <__aeabi_uldivmod>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4613      	mov	r3, r2
 8001bcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001bd0:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x458>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	0f1b      	lsrs	r3, r3, #28
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001bde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001be2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001bee:	e003      	b.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bf0:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001bf2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001bf6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bf8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	37b8      	adds	r7, #184	; 0xb8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c06:	bf00      	nop
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	00f42400 	.word	0x00f42400

08001c10 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e28d      	b.n	800213e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 8083 	beq.w	8001d36 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c30:	4b94      	ldr	r3, [pc, #592]	; (8001e84 <HAL_RCC_OscConfig+0x274>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 030c 	and.w	r3, r3, #12
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	d019      	beq.n	8001c70 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c3c:	4b91      	ldr	r3, [pc, #580]	; (8001e84 <HAL_RCC_OscConfig+0x274>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d106      	bne.n	8001c56 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c48:	4b8e      	ldr	r3, [pc, #568]	; (8001e84 <HAL_RCC_OscConfig+0x274>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c54:	d00c      	beq.n	8001c70 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c56:	4b8b      	ldr	r3, [pc, #556]	; (8001e84 <HAL_RCC_OscConfig+0x274>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c5e:	2b0c      	cmp	r3, #12
 8001c60:	d112      	bne.n	8001c88 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c62:	4b88      	ldr	r3, [pc, #544]	; (8001e84 <HAL_RCC_OscConfig+0x274>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c6e:	d10b      	bne.n	8001c88 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c70:	4b84      	ldr	r3, [pc, #528]	; (8001e84 <HAL_RCC_OscConfig+0x274>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d05b      	beq.n	8001d34 <HAL_RCC_OscConfig+0x124>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d157      	bne.n	8001d34 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e25a      	b.n	800213e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c90:	d106      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x90>
 8001c92:	4b7c      	ldr	r3, [pc, #496]	; (8001e84 <HAL_RCC_OscConfig+0x274>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a7b      	ldr	r2, [pc, #492]	; (8001e84 <HAL_RCC_OscConfig+0x274>)
 8001c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	e01d      	b.n	8001cdc <HAL_RCC_OscConfig+0xcc>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ca8:	d10c      	bne.n	8001cc4 <HAL_RCC_OscConfig+0xb4>
 8001caa:	4b76      	ldr	r3, [pc, #472]	; (8001e84 <HAL_RCC_OscConfig+0x274>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a75      	ldr	r2, [pc, #468]	; (8001e84 <HAL_RCC_OscConfig+0x274>)
 8001cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	4b73      	ldr	r3, [pc, #460]	; (8001e84 <HAL_RCC_OscConfig+0x274>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a72      	ldr	r2, [pc, #456]	; (8001e84 <HAL_RCC_OscConfig+0x274>)
 8001cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	e00b      	b.n	8001cdc <HAL_RCC_OscConfig+0xcc>
 8001cc4:	4b6f      	ldr	r3, [pc, #444]	; (8001e84 <HAL_RCC_OscConfig+0x274>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a6e      	ldr	r2, [pc, #440]	; (8001e84 <HAL_RCC_OscConfig+0x274>)
 8001cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cce:	6013      	str	r3, [r2, #0]
 8001cd0:	4b6c      	ldr	r3, [pc, #432]	; (8001e84 <HAL_RCC_OscConfig+0x274>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a6b      	ldr	r2, [pc, #428]	; (8001e84 <HAL_RCC_OscConfig+0x274>)
 8001cd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d013      	beq.n	8001d0c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce4:	f7fe ffac 	bl	8000c40 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cec:	f7fe ffa8 	bl	8000c40 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b64      	cmp	r3, #100	; 0x64
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e21f      	b.n	800213e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfe:	4b61      	ldr	r3, [pc, #388]	; (8001e84 <HAL_RCC_OscConfig+0x274>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0xdc>
 8001d0a:	e014      	b.n	8001d36 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0c:	f7fe ff98 	bl	8000c40 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d14:	f7fe ff94 	bl	8000c40 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b64      	cmp	r3, #100	; 0x64
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e20b      	b.n	800213e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d26:	4b57      	ldr	r3, [pc, #348]	; (8001e84 <HAL_RCC_OscConfig+0x274>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f0      	bne.n	8001d14 <HAL_RCC_OscConfig+0x104>
 8001d32:	e000      	b.n	8001d36 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d06f      	beq.n	8001e22 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d42:	4b50      	ldr	r3, [pc, #320]	; (8001e84 <HAL_RCC_OscConfig+0x274>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 030c 	and.w	r3, r3, #12
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d017      	beq.n	8001d7e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d4e:	4b4d      	ldr	r3, [pc, #308]	; (8001e84 <HAL_RCC_OscConfig+0x274>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d56:	2b08      	cmp	r3, #8
 8001d58:	d105      	bne.n	8001d66 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d5a:	4b4a      	ldr	r3, [pc, #296]	; (8001e84 <HAL_RCC_OscConfig+0x274>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00b      	beq.n	8001d7e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d66:	4b47      	ldr	r3, [pc, #284]	; (8001e84 <HAL_RCC_OscConfig+0x274>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d6e:	2b0c      	cmp	r3, #12
 8001d70:	d11c      	bne.n	8001dac <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d72:	4b44      	ldr	r3, [pc, #272]	; (8001e84 <HAL_RCC_OscConfig+0x274>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d116      	bne.n	8001dac <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d7e:	4b41      	ldr	r3, [pc, #260]	; (8001e84 <HAL_RCC_OscConfig+0x274>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d005      	beq.n	8001d96 <HAL_RCC_OscConfig+0x186>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d001      	beq.n	8001d96 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e1d3      	b.n	800213e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d96:	4b3b      	ldr	r3, [pc, #236]	; (8001e84 <HAL_RCC_OscConfig+0x274>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	4937      	ldr	r1, [pc, #220]	; (8001e84 <HAL_RCC_OscConfig+0x274>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001daa:	e03a      	b.n	8001e22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d020      	beq.n	8001df6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001db4:	4b34      	ldr	r3, [pc, #208]	; (8001e88 <HAL_RCC_OscConfig+0x278>)
 8001db6:	2201      	movs	r2, #1
 8001db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dba:	f7fe ff41 	bl	8000c40 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dc2:	f7fe ff3d 	bl	8000c40 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e1b4      	b.n	800213e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd4:	4b2b      	ldr	r3, [pc, #172]	; (8001e84 <HAL_RCC_OscConfig+0x274>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d0f0      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de0:	4b28      	ldr	r3, [pc, #160]	; (8001e84 <HAL_RCC_OscConfig+0x274>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	4925      	ldr	r1, [pc, #148]	; (8001e84 <HAL_RCC_OscConfig+0x274>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	600b      	str	r3, [r1, #0]
 8001df4:	e015      	b.n	8001e22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001df6:	4b24      	ldr	r3, [pc, #144]	; (8001e88 <HAL_RCC_OscConfig+0x278>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfc:	f7fe ff20 	bl	8000c40 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e04:	f7fe ff1c 	bl	8000c40 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e193      	b.n	800213e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e16:	4b1b      	ldr	r3, [pc, #108]	; (8001e84 <HAL_RCC_OscConfig+0x274>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1f0      	bne.n	8001e04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0308 	and.w	r3, r3, #8
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d036      	beq.n	8001e9c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d016      	beq.n	8001e64 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e36:	4b15      	ldr	r3, [pc, #84]	; (8001e8c <HAL_RCC_OscConfig+0x27c>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e3c:	f7fe ff00 	bl	8000c40 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e44:	f7fe fefc 	bl	8000c40 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e173      	b.n	800213e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e56:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <HAL_RCC_OscConfig+0x274>)
 8001e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0f0      	beq.n	8001e44 <HAL_RCC_OscConfig+0x234>
 8001e62:	e01b      	b.n	8001e9c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e64:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <HAL_RCC_OscConfig+0x27c>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e6a:	f7fe fee9 	bl	8000c40 <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e70:	e00e      	b.n	8001e90 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e72:	f7fe fee5 	bl	8000c40 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d907      	bls.n	8001e90 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e15c      	b.n	800213e <HAL_RCC_OscConfig+0x52e>
 8001e84:	40023800 	.word	0x40023800
 8001e88:	42470000 	.word	0x42470000
 8001e8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e90:	4b8a      	ldr	r3, [pc, #552]	; (80020bc <HAL_RCC_OscConfig+0x4ac>)
 8001e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1ea      	bne.n	8001e72 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 8097 	beq.w	8001fd8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eae:	4b83      	ldr	r3, [pc, #524]	; (80020bc <HAL_RCC_OscConfig+0x4ac>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d10f      	bne.n	8001eda <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60bb      	str	r3, [r7, #8]
 8001ebe:	4b7f      	ldr	r3, [pc, #508]	; (80020bc <HAL_RCC_OscConfig+0x4ac>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	4a7e      	ldr	r2, [pc, #504]	; (80020bc <HAL_RCC_OscConfig+0x4ac>)
 8001ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eca:	4b7c      	ldr	r3, [pc, #496]	; (80020bc <HAL_RCC_OscConfig+0x4ac>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	60bb      	str	r3, [r7, #8]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eda:	4b79      	ldr	r3, [pc, #484]	; (80020c0 <HAL_RCC_OscConfig+0x4b0>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d118      	bne.n	8001f18 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ee6:	4b76      	ldr	r3, [pc, #472]	; (80020c0 <HAL_RCC_OscConfig+0x4b0>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a75      	ldr	r2, [pc, #468]	; (80020c0 <HAL_RCC_OscConfig+0x4b0>)
 8001eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ef2:	f7fe fea5 	bl	8000c40 <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef8:	e008      	b.n	8001f0c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001efa:	f7fe fea1 	bl	8000c40 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e118      	b.n	800213e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0c:	4b6c      	ldr	r3, [pc, #432]	; (80020c0 <HAL_RCC_OscConfig+0x4b0>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d0f0      	beq.n	8001efa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d106      	bne.n	8001f2e <HAL_RCC_OscConfig+0x31e>
 8001f20:	4b66      	ldr	r3, [pc, #408]	; (80020bc <HAL_RCC_OscConfig+0x4ac>)
 8001f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f24:	4a65      	ldr	r2, [pc, #404]	; (80020bc <HAL_RCC_OscConfig+0x4ac>)
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f2c:	e01c      	b.n	8001f68 <HAL_RCC_OscConfig+0x358>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	2b05      	cmp	r3, #5
 8001f34:	d10c      	bne.n	8001f50 <HAL_RCC_OscConfig+0x340>
 8001f36:	4b61      	ldr	r3, [pc, #388]	; (80020bc <HAL_RCC_OscConfig+0x4ac>)
 8001f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3a:	4a60      	ldr	r2, [pc, #384]	; (80020bc <HAL_RCC_OscConfig+0x4ac>)
 8001f3c:	f043 0304 	orr.w	r3, r3, #4
 8001f40:	6713      	str	r3, [r2, #112]	; 0x70
 8001f42:	4b5e      	ldr	r3, [pc, #376]	; (80020bc <HAL_RCC_OscConfig+0x4ac>)
 8001f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f46:	4a5d      	ldr	r2, [pc, #372]	; (80020bc <HAL_RCC_OscConfig+0x4ac>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f4e:	e00b      	b.n	8001f68 <HAL_RCC_OscConfig+0x358>
 8001f50:	4b5a      	ldr	r3, [pc, #360]	; (80020bc <HAL_RCC_OscConfig+0x4ac>)
 8001f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f54:	4a59      	ldr	r2, [pc, #356]	; (80020bc <HAL_RCC_OscConfig+0x4ac>)
 8001f56:	f023 0301 	bic.w	r3, r3, #1
 8001f5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f5c:	4b57      	ldr	r3, [pc, #348]	; (80020bc <HAL_RCC_OscConfig+0x4ac>)
 8001f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f60:	4a56      	ldr	r2, [pc, #344]	; (80020bc <HAL_RCC_OscConfig+0x4ac>)
 8001f62:	f023 0304 	bic.w	r3, r3, #4
 8001f66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d015      	beq.n	8001f9c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f70:	f7fe fe66 	bl	8000c40 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f76:	e00a      	b.n	8001f8e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f78:	f7fe fe62 	bl	8000c40 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e0d7      	b.n	800213e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f8e:	4b4b      	ldr	r3, [pc, #300]	; (80020bc <HAL_RCC_OscConfig+0x4ac>)
 8001f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d0ee      	beq.n	8001f78 <HAL_RCC_OscConfig+0x368>
 8001f9a:	e014      	b.n	8001fc6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f9c:	f7fe fe50 	bl	8000c40 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa2:	e00a      	b.n	8001fba <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fa4:	f7fe fe4c 	bl	8000c40 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e0c1      	b.n	800213e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fba:	4b40      	ldr	r3, [pc, #256]	; (80020bc <HAL_RCC_OscConfig+0x4ac>)
 8001fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1ee      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fc6:	7dfb      	ldrb	r3, [r7, #23]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d105      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fcc:	4b3b      	ldr	r3, [pc, #236]	; (80020bc <HAL_RCC_OscConfig+0x4ac>)
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	4a3a      	ldr	r2, [pc, #232]	; (80020bc <HAL_RCC_OscConfig+0x4ac>)
 8001fd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fd6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f000 80ad 	beq.w	800213c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fe2:	4b36      	ldr	r3, [pc, #216]	; (80020bc <HAL_RCC_OscConfig+0x4ac>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	d060      	beq.n	80020b0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d145      	bne.n	8002082 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff6:	4b33      	ldr	r3, [pc, #204]	; (80020c4 <HAL_RCC_OscConfig+0x4b4>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffc:	f7fe fe20 	bl	8000c40 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002004:	f7fe fe1c 	bl	8000c40 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e093      	b.n	800213e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002016:	4b29      	ldr	r3, [pc, #164]	; (80020bc <HAL_RCC_OscConfig+0x4ac>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f0      	bne.n	8002004 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69da      	ldr	r2, [r3, #28]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a1b      	ldr	r3, [r3, #32]
 800202a:	431a      	orrs	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002030:	019b      	lsls	r3, r3, #6
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002038:	085b      	lsrs	r3, r3, #1
 800203a:	3b01      	subs	r3, #1
 800203c:	041b      	lsls	r3, r3, #16
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002044:	061b      	lsls	r3, r3, #24
 8002046:	431a      	orrs	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204c:	071b      	lsls	r3, r3, #28
 800204e:	491b      	ldr	r1, [pc, #108]	; (80020bc <HAL_RCC_OscConfig+0x4ac>)
 8002050:	4313      	orrs	r3, r2
 8002052:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002054:	4b1b      	ldr	r3, [pc, #108]	; (80020c4 <HAL_RCC_OscConfig+0x4b4>)
 8002056:	2201      	movs	r2, #1
 8002058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205a:	f7fe fdf1 	bl	8000c40 <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002060:	e008      	b.n	8002074 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002062:	f7fe fded 	bl	8000c40 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e064      	b.n	800213e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002074:	4b11      	ldr	r3, [pc, #68]	; (80020bc <HAL_RCC_OscConfig+0x4ac>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0f0      	beq.n	8002062 <HAL_RCC_OscConfig+0x452>
 8002080:	e05c      	b.n	800213c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002082:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <HAL_RCC_OscConfig+0x4b4>)
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002088:	f7fe fdda 	bl	8000c40 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002090:	f7fe fdd6 	bl	8000c40 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e04d      	b.n	800213e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020a2:	4b06      	ldr	r3, [pc, #24]	; (80020bc <HAL_RCC_OscConfig+0x4ac>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f0      	bne.n	8002090 <HAL_RCC_OscConfig+0x480>
 80020ae:	e045      	b.n	800213c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d107      	bne.n	80020c8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e040      	b.n	800213e <HAL_RCC_OscConfig+0x52e>
 80020bc:	40023800 	.word	0x40023800
 80020c0:	40007000 	.word	0x40007000
 80020c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020c8:	4b1f      	ldr	r3, [pc, #124]	; (8002148 <HAL_RCC_OscConfig+0x538>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d030      	beq.n	8002138 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d129      	bne.n	8002138 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d122      	bne.n	8002138 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020f8:	4013      	ands	r3, r2
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002100:	4293      	cmp	r3, r2
 8002102:	d119      	bne.n	8002138 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210e:	085b      	lsrs	r3, r3, #1
 8002110:	3b01      	subs	r3, #1
 8002112:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002114:	429a      	cmp	r2, r3
 8002116:	d10f      	bne.n	8002138 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002122:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002124:	429a      	cmp	r2, r3
 8002126:	d107      	bne.n	8002138 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002134:	429a      	cmp	r2, r3
 8002136:	d001      	beq.n	800213c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e000      	b.n	800213e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3718      	adds	r7, #24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40023800 	.word	0x40023800

0800214c <memset>:
 800214c:	4402      	add	r2, r0
 800214e:	4603      	mov	r3, r0
 8002150:	4293      	cmp	r3, r2
 8002152:	d100      	bne.n	8002156 <memset+0xa>
 8002154:	4770      	bx	lr
 8002156:	f803 1b01 	strb.w	r1, [r3], #1
 800215a:	e7f9      	b.n	8002150 <memset+0x4>

0800215c <__libc_init_array>:
 800215c:	b570      	push	{r4, r5, r6, lr}
 800215e:	4d0d      	ldr	r5, [pc, #52]	; (8002194 <__libc_init_array+0x38>)
 8002160:	4c0d      	ldr	r4, [pc, #52]	; (8002198 <__libc_init_array+0x3c>)
 8002162:	1b64      	subs	r4, r4, r5
 8002164:	10a4      	asrs	r4, r4, #2
 8002166:	2600      	movs	r6, #0
 8002168:	42a6      	cmp	r6, r4
 800216a:	d109      	bne.n	8002180 <__libc_init_array+0x24>
 800216c:	4d0b      	ldr	r5, [pc, #44]	; (800219c <__libc_init_array+0x40>)
 800216e:	4c0c      	ldr	r4, [pc, #48]	; (80021a0 <__libc_init_array+0x44>)
 8002170:	f000 f818 	bl	80021a4 <_init>
 8002174:	1b64      	subs	r4, r4, r5
 8002176:	10a4      	asrs	r4, r4, #2
 8002178:	2600      	movs	r6, #0
 800217a:	42a6      	cmp	r6, r4
 800217c:	d105      	bne.n	800218a <__libc_init_array+0x2e>
 800217e:	bd70      	pop	{r4, r5, r6, pc}
 8002180:	f855 3b04 	ldr.w	r3, [r5], #4
 8002184:	4798      	blx	r3
 8002186:	3601      	adds	r6, #1
 8002188:	e7ee      	b.n	8002168 <__libc_init_array+0xc>
 800218a:	f855 3b04 	ldr.w	r3, [r5], #4
 800218e:	4798      	blx	r3
 8002190:	3601      	adds	r6, #1
 8002192:	e7f2      	b.n	800217a <__libc_init_array+0x1e>
 8002194:	080021d4 	.word	0x080021d4
 8002198:	080021d4 	.word	0x080021d4
 800219c:	080021d4 	.word	0x080021d4
 80021a0:	080021d8 	.word	0x080021d8

080021a4 <_init>:
 80021a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021a6:	bf00      	nop
 80021a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021aa:	bc08      	pop	{r3}
 80021ac:	469e      	mov	lr, r3
 80021ae:	4770      	bx	lr

080021b0 <_fini>:
 80021b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021b2:	bf00      	nop
 80021b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021b6:	bc08      	pop	{r3}
 80021b8:	469e      	mov	lr, r3
 80021ba:	4770      	bx	lr
